{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileHandle"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","kind":"typeIdentifier","text":"NIOFileHandle","preciseIdentifier":"s:7NIOCore13NIOFileHandleC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fromOffset"},{"kind":"text","text":" "},{"kind":"internalParam","text":"fileOffset"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":", "},{"kind":"externalParam","text":"byteCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":" = NonBlockingFileIO.defaultChunkSize, "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","kind":"typeIdentifier","text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" which is the result of the overall operation. If either the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" fails, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will fail too. If the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" as well as ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" always succeeded, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will succeed too.","type":"text"}],"type":"paragraph"}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":" to read from.","type":"text"}]}],"name":"fileHandle"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The number of bytes to read from ","type":"text"},{"type":"codeVoice","code":"fileHandle"},{"text":".","type":"text"}]}],"name":"byteCount"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The size of the individual chunks to deliver."}]}],"name":"chunkSize"},{"content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"ByteBufferAllocator","type":"codeVoice"},{"text":" used to allocate space for the chunks.","type":"text"}]}],"name":"allocator"},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" to call "},{"code":"chunkHandler","type":"codeVoice"},{"type":"text","text":" on."}],"type":"paragraph"}],"name":"eventLoop"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Called for every chunk read. The next chunk will be read upon successful completion of the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". If the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" fails, the overall operation is aborted."}]}],"name":"chunkHandler"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called on ","type":"text"},{"code":"eventLoop","type":"codeVoice"},{"text":" for every chunk that was read. Assuming ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" is greater than","type":"text"},{"text":" ","type":"text"},{"text":"zero and there are enough bytes available ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called ","type":"text"},{"code":"1 + |_ byteCount \/ chunkSize _|","type":"codeVoice"},{"text":" ","type":"text"},{"text":"times, delivering ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes each time. If less than ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" bytes can be read from ","type":"text"},{"code":"descriptor","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called less often with the last invocation possibly being of less than ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The allocation and reading of a subsequent chunk will only be attempted when "},{"code":"chunkHandler","type":"codeVoice"},{"type":"text","text":" succeeds."}]},{"type":"paragraph","inlineContent":[{"text":"This method will not use the file descriptorâ€™s seek pointer which means there is no danger of reading from the","type":"text"},{"text":" ","type":"text"},{"text":"same ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":" in multiple threads.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)"},{"type":"text","text":" should be preferred as it uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" object instead of raw "},{"type":"codeVoice","code":"NIOFileHandle"},{"type":"text","text":"s."}],"type":"paragraph"}],"style":"note"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)"},"metadata":{"role":"symbol","symbolKind":"method","modules":[{"name":"NIOPosix"}],"title":"readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOFileHandle","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13NIOFileHandleC"},{"text":", ","kind":"text"},{"text":"fromOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","externalID":"s:8NIOPosix17NonBlockingFileIOV11readChunked10fileHandle10fromOffset9byteCount9chunkSize9allocator9eventLoop0N7Handler7NIOCore05EventR6FutureCyytGAL07NIOFileI0C_s5Int64VS2iAL19ByteBufferAllocatorVAL0uR0_pAoL0yZ0VctF"},"kind":"symbol","abstract":[{"text":"Read ","type":"text"},{"type":"codeVoice","code":"byteCount"},{"text":" bytes from offset ","type":"text"},{"type":"codeVoice","code":"fileOffset"},{"text":" in chunks of ","type":"text"},{"type":"codeVoice","code":"chunkSize"},{"text":" bytes from ","type":"text"},{"type":"codeVoice","code":"fileHandle"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":"â€™s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" thread.","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:fromoffset:bytecount:chunksize:allocator:eventloop:chunkhandler:)"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"url":"\/documentation\/niocore\/bytebufferallocator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"role":"symbol","type":"topic","title":"ByteBufferAllocator","abstract":[{"text":"The preferred allocator for ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" values. The allocation strategy is opaque but is currently libcâ€™s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"type":"text","text":", "},{"code":"realloc","type":"codeVoice"},{"type":"text","text":" and "},{"code":"free","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOFileHandle","preciseIdentifier":"s:7NIOCore13NIOFileHandleC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fromOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int64","preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">"}],"kind":"symbol","url":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:fromoffset:bytecount:chunksize:allocator:eventloop:chunkhandler:)","abstract":[{"type":"text","text":"Read "},{"type":"codeVoice","code":"byteCount"},{"text":" bytes from offset ","type":"text"},{"type":"codeVoice","code":"fileOffset"},{"text":" in chunks of ","type":"text"},{"type":"codeVoice","code":"chunkSize"},{"text":" bytes from ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"type":"text","text":" in "},{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":"â€™s private thread"},{"type":"text","text":" "},{"type":"text","text":"pool which is separate from any "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" thread."}],"role":"symbol","title":"readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"type":"topic","role":"collection","abstract":[],"url":"\/documentation\/nioposix","title":"NIOPosix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"type":"topic","role":"symbol","url":"\/documentation\/niocore\/niofilehandle","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","abstract":[{"text":"A ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" is a handle to an open file.","type":"text"}],"title":"NIOFileHandle","navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":"s until itâ€™s closed.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","url":"\/documentation\/niocore\/eventloop","title":"EventLoop"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"role":"symbol","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"title":"NonBlockingFileIO","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"kind":"symbol","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","type":"topic","url":"\/documentation\/nioposix\/nonblockingfileio","navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}]}}}