{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(group:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(validatingGroup:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/bind(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelOption(_:value:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(host:port:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(unixDomainSocketPath:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connectTimeout(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/protocolHandlers(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/resolver(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(descriptor:)"]}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix"]]},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":" is an easy way to bootstrap a "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" when creating network clients."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/clientbootstrap"]}],"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClientBootstrap"}],"roleHeading":"Class","modules":[{"name":"NIOPosix"}],"title":"ClientBootstrap","navigatorTitle":[{"kind":"identifier","text":"ClientBootstrap"}],"role":"symbol","symbolKind":"class","externalID":"s:8NIOPosix15ClientBootstrapC"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClientBootstrap"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Usually you re-use a ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" once you set it up and called ","type":"text"},{"code":"connect","type":"codeVoice"},{"text":" multiple times on it.","type":"text"},{"text":" ","type":"text"},{"text":"This way you ensure that the same ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":"s will be shared across all your connections.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["    let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","    defer {","        try! group.syncShutdownGracefully()","    }","    let bootstrap = ClientBootstrap(group: group)","        \/\/ Enable SO_REUSEADDR.","        .channelOption(ChannelOptions.socketOption(.so_reuseaddr), value: 1)","        .channelInitializer { channel in","            \/\/ always instantiate the handler _within_ the closure as","            \/\/ it may be called multiple times (for example if the hostname","            \/\/ resolves to both IPv4 and IPv6 addresses, cf. Happy Eyeballs).","            channel.pipeline.addHandler(MyChannelHandler())","        }","    try! bootstrap.connect(host: \"example.org\", port: 12345).wait()","    \/* the Channel is now connected *\/"]},{"type":"paragraph","inlineContent":[{"text":"The connected ","type":"text"},{"type":"codeVoice","code":"SocketChannel"},{"text":" will operate on ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" as inbound and on ","type":"text"},{"type":"codeVoice","code":"IOData"},{"text":" as outbound messages.","type":"text"}]}]}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/withConnectedSocket(_:)":{"title":"withConnectedSocket(_:)","url":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withConnectedSocket"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore12NIOBSDSocketO","text":"NIOBSDSocket"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore12NIOBSDSocketO6Handlea","text":"Handle"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":">"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(_:)","kind":"symbol","abstract":[{"type":"text","text":"Use the existing connected socket file descriptor."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(to:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(to:)","title":"connect(to:)","abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"address"},{"type":"text","text":" to connect to for the TCP "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that will be established."}],"url":"\/documentation\/nioposix\/clientbootstrap\/connect(to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":">"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/init(group:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(group:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"group"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore14EventLoopGroupP","text":"EventLoopGroup"},{"kind":"text","text":")"}],"url":"\/documentation\/nioposix\/clientbootstrap\/init(group:)","title":"init(group:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"EventLoopGroup"},{"text":" ","type":"text"},{"code":"group","type":"codeVoice"},{"text":".","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/bind(to:)":{"abstract":[{"type":"text","text":"Bind the "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" to "},{"type":"codeVoice","code":"address"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/bind(to:)","title":"bind(to:)","url":"\/documentation\/nioposix\/clientbootstrap\/bind(to:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"bind"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ClientBootstrap","preciseIdentifier":"s:8NIOPosix15ClientBootstrapC"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","navigatorTitle":[{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"title":"NIOClientTCPBootstrapProtocol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"role":"symbol","abstract":[{"code":"NIOClientTCPBootstrapProtocol","type":"codeVoice"},{"text":" is implemented by various underlying transport mechanisms. Typically,","type":"text"},{"text":" ","type":"text"},{"text":"this will be the BSD Sockets API implemented by ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connectTimeout(_:)":{"abstract":[{"type":"text","text":"Specifies a timeout to apply to a connection attempt."}],"title":"connectTimeout(_:)","url":"\/documentation\/nioposix\/clientbootstrap\/connecttimeout(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"connectTimeout"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"TimeAmount","preciseIdentifier":"s:7NIOCore10TimeAmountV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connectTimeout(_:)","role":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/channelInitializer(_:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","url":"\/documentation\/nioposix\/clientbootstrap\/channelinitializer(_:)","abstract":[{"type":"text","text":"Initialize the connected "},{"code":"SocketChannel","type":"codeVoice"},{"type":"text","text":" with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"title":"channelInitializer(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/resolver(_:)":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Specifies the "},{"code":"Resolver","type":"codeVoice"},{"type":"text","text":" to use or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the default should be used."}],"title":"resolver(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolver"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Resolver","preciseIdentifier":"s:8NIOPosix8ResolverP"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","url":"\/documentation\/nioposix\/clientbootstrap\/resolver(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/resolver(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(host:port:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(host:port:)","url":"\/documentation\/nioposix\/clientbootstrap\/connect(host:port:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"host","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":">","kind":"text"}],"type":"topic","title":"connect(host:port:)","abstract":[{"text":"Specify the ","type":"text"},{"type":"codeVoice","code":"host"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"port"},{"text":" to connect to for the TCP ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/protocolHandlers(_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"protocolHandlers","kind":"identifier"},{"text":"(() -> [","kind":"text"},{"text":"ChannelHandler","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore14ChannelHandlerP"},{"text":"]) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"protocolHandlers(_:)","kind":"symbol","abstract":[{"text":"Sets the protocol handlers that will be added to the front of the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" right after the","type":"text"},{"text":" ","type":"text"},{"code":"channelInitializer","type":"codeVoice"},{"text":" has been called.","type":"text"}],"url":"\/documentation\/nioposix\/clientbootstrap\/protocolhandlers(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/protocolHandlers(_:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"type":"topic","role":"collection","abstract":[],"url":"\/documentation\/nioposix","title":"NIOPosix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/withConnectedSocket(descriptor:)":{"abstract":[{"type":"text","text":"Use the existing connected socket file descriptor."}],"url":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(descriptor:)","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(descriptor:)","title":"withConnectedSocket(descriptor:)","deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withConnectedSocket"},{"kind":"text","text":"("},{"kind":"externalParam","text":"descriptor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4CInta","text":"CInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/init(validatingGroup:)":{"kind":"symbol","url":"\/documentation\/nioposix\/clientbootstrap\/init(validatinggroup:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(validatingGroup:)","title":"init(validatingGroup:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"validatingGroup"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore14EventLoopGroupP","text":"EventLoopGroup"},{"kind":"text","text":")"}],"role":"symbol","type":"topic","abstract":[{"text":"Create a ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" on the ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":" ","type":"text"},{"type":"codeVoice","code":"group"},{"text":", validating that ","type":"text"},{"type":"codeVoice","code":"group"},{"text":" is compatible.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap":{"navigatorTitle":[{"text":"ClientBootstrap","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/nioposix\/clientbootstrap","type":"topic","title":"ClientBootstrap","abstract":[{"text":"A ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" is an easy way to bootstrap a ","type":"text"},{"type":"codeVoice","code":"SocketChannel"},{"text":" when creating network clients.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClientBootstrap","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/channelOption(_:value:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelOption","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","title":"channelOption(_:value:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelOption(_:value:)","abstract":[{"type":"text","text":"Specifies a "},{"code":"ChannelOption","type":"codeVoice"},{"type":"text","text":" to be applied to the "},{"type":"codeVoice","code":"SocketChannel"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/nioposix\/clientbootstrap\/channeloption(_:value:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(unixDomainSocketPath:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/connect(unixdomainsocketpath:)","abstract":[{"text":"Specify the ","type":"text"},{"type":"codeVoice","code":"unixDomainSocket"},{"type":"text","text":" path to connect to for the UDS "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that will be established."}],"kind":"symbol","role":"symbol","title":"connect(unixDomainSocketPath:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"unixDomainSocketPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":">"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(unixDomainSocketPath:)"}}}