{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap\/childChannelInitializer(_:)","interfaceLanguage":"swift"},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"childChannelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Method","title":"childChannelInitializer(_:)","modules":[{"name":"NIOPosix"}],"symbolKind":"method","externalID":"s:8NIOPosix15ServerBootstrapC23childChannelInitializeryACXD7NIOCore15EventLoopFutureCyytGAE0E0_pcF"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"childChannelInitializer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initializer"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"initializer","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that initializes the provided "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":" will be invoked once for every accepted connection. Therefore itâ€™s usually the"},{"type":"text","text":" "},{"type":"text","text":"right choice to instantiate stateful "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s within the closure to make sure they are not"},{"type":"text","text":" "},{"type":"text","text":"accidentally shared across "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s. There are expert use-cases where stateful handler need to be"},{"type":"text","text":" "},{"type":"text","text":"shared across "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s in which case the user is responsible to synchronise the state access"},{"type":"text","text":" "},{"type":"text","text":"appropriately."}],"type":"paragraph"}],"style":"warning","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"The accepted ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" will operate on ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" as inbound and ","type":"text"},{"code":"IOData","type":"codeVoice"},{"text":" as outbound messages.","type":"text"}]}]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Initialize the accepted "},{"code":"SocketChannel","type":"codeVoice"},{"type":"text","text":"s with "},{"code":"initializer","type":"codeVoice"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s to the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":". Note that if the "},{"code":"initializer","type":"codeVoice"},{"type":"text","text":" fails then the error will be"},{"type":"text","text":" "},{"type":"text","text":"fired in the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parent"}]},{"type":"text","text":" channel."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/serverbootstrap\/childchannelinitializer(_:)"]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ServerBootstrap":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ServerBootstrap"},{"type":"text","text":" is an easy way to bootstrap a "},{"type":"codeVoice","code":"ServerSocketChannel"},{"type":"text","text":" when creating network servers."}],"navigatorTitle":[{"kind":"identifier","text":"ServerBootstrap"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ServerBootstrap"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap","title":"ServerBootstrap","type":"topic","role":"symbol","url":"\/documentation\/nioposix\/serverbootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"role":"symbol","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ServerBootstrap/childChannelInitializer(_:)":{"type":"topic","url":"\/documentation\/nioposix\/serverbootstrap\/childchannelinitializer(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"childChannelInitializer"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"childChannelInitializer(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ServerBootstrap\/childChannelInitializer(_:)","kind":"symbol","abstract":[{"type":"text","text":"Initialize the accepted "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":"s with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":". Note that if the "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":" fails then the error will be"},{"type":"text","text":" "},{"type":"text","text":"fired in the "},{"inlineContent":[{"type":"text","text":"parent"}],"type":"emphasis"},{"type":"text","text":" channel."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"url":"\/documentation\/niocore\/channel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"title":"Channel"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"type":"topic","role":"collection","abstract":[],"url":"\/documentation\/nioposix","title":"NIOPosix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","kind":"symbol"}}}