{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment"]]},"metadata":{"externalID":"s:5Vapor11EnvironmentV6secret3key6fileIO2on7NIOCore15EventLoopFutureCySSSgGSS_8NIOPosix015NonBlockingFileF0VAH0iJ0_ptFZ","modules":[{"name":"Vapor"}],"extendedModule":"Vapor","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"secret"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?>"}],"role":"symbol","title":"secret(key:fileIO:on:)","roleHeading":"Type Method","symbolKind":"method"},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"name":"key","content":[{"type":"paragraph","inlineContent":[{"text":"The environment variable name","type":"text"}]}]},{"name":"fileIO","content":[{"inlineContent":[{"text":"","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" handler provided by NIO","type":"text"}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" for NIO to use for working with the file"}]}]}]},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Example usage:"}],"type":"paragraph"},{"code":["func configure(_ app: Application) {","    \/\/ ...","","    let databasePassword = try Environment.secret(","        key: \"DATABASE_PASSWORD_FILE\",","        fileIO: app.fileio,","        on: app.eventLoopGroup.next()","    ).wait()",""],"type":"codeListing","syntax":null},{"style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Do ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" use ","type":"text"},{"type":"codeVoice","code":".wait()"},{"text":" if loading a secret at any time after the app has booted, such as while","type":"text"},{"text":" ","type":"text"},{"text":"handling a ","type":"text"},{"type":"codeVoice","code":"Request"},{"text":". Chain the result as you would any other future instead.","type":"text"}]}]}],"kind":"content"}],"sections":[],"abstract":[{"text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to","type":"text"},{"text":" ","type":"text"},{"text":"specify the path of the file containing the secret.","type":"text"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/vapor\/environment\/secret(key:fileio:on:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"role":"symbol","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/Vapor":{"type":"topic","url":"\/documentation\/vapor","kind":"symbol","title":"Vapor","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment":{"navigatorTitle":[{"kind":"identifier","text":"Environment"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Environment"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment","type":"topic","title":"Environment","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"The environment the application is running in, i.e., production, dev, etc. All "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"s will have"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" that can be used to dynamically register and configure services."}],"url":"\/documentation\/vapor\/environment"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"title":"NonBlockingFileIO","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"kind":"symbol","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","type":"topic","url":"\/documentation\/nioposix\/nonblockingfileio","navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":"s until it’s closed.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","url":"\/documentation\/niocore\/eventloop","title":"EventLoop"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment/secret(key:fileIO:on:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?>"}],"role":"symbol","type":"topic","title":"secret(key:fileIO:on:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)","url":"\/documentation\/vapor\/environment\/secret(key:fileio:on:)","abstract":[{"text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to","type":"text"},{"text":" ","type":"text"},{"text":"specify the path of the file containing the secret.","type":"text"}]}}}