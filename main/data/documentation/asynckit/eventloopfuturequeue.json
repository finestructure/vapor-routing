{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/init(eventLoop:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/eventLoop"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-1fw85","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-3i4m4","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(onPrevious:generator:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError"],"title":"Enumerations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue"},"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/asynckit\/eventloopfuturequeue"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"EventLoopFutureQueue","roleHeading":"Class","navigatorTitle":[{"kind":"identifier","text":"EventLoopFutureQueue"}],"role":"symbol","symbolKind":"class","modules":[{"name":"AsyncKit"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFutureQueue"}],"externalID":"s:8AsyncKit20EventLoopFutureQueueC"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"identifier"}]}],"kind":"declarations"}],"kind":"symbol","abstract":[{"type":"text","text":"Allows you to queue closures that produce an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":", so each future only gets run if the previous ones complete, succeed, or fail."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/ContinueError":{"role":"symbol","kind":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror","type":"topic","title":"EventLoopFutureQueue.ContinueError","abstract":[{"type":"text","text":"Errors that get propogated based on a future’s completion status and the next appended closure’s continuation condition."}],"navigatorTitle":[{"kind":"identifier","text":"ContinueError"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContinueError"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(each:_:)-1fw85":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-1fw85","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(each:_:)-1fw85","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"each"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"]>"}],"kind":"symbol","abstract":[{"text":"For each element of the provided collection, invoke the given generator","type":"text"},{"text":" ","type":"text"},{"text":"and queue the returned future. Return a future whose value is an array","type":"text"},{"text":" ","type":"text"},{"text":"containing the result of each generated future in the same order as the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence. The resulting array is intended to have semantics","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"substantially similar to those provided by "},{"type":"codeVoice","code":"EventLoop.flatten(_:on:)"},{"type":"text","text":"."}],"role":"symbol","title":"append(each:_:)"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue":{"role":"symbol","kind":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue","type":"topic","title":"EventLoopFutureQueue","abstract":[{"type":"text","text":"Allows you to queue closures that produce an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":", so each future only gets run if the previous ones complete, succeed, or fail."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFutureQueue"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFutureQueue"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(_:runningOn:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(_:runningon:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(() -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"runningOn","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC"},{"text":".","kind":"text"},{"text":"ContinueCondition","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","abstract":[{"text":"An overload for ","type":"text"},{"code":"append(generator:runningOn:)","type":"codeVoice"},{"text":" that takes in an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" as an auto closure to provide a better 1-liner API.","type":"text"}],"role":"symbol","title":"append(_:runningOn:)"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(onPrevious:generator:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(onPrevious:generator:)","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(onprevious:generator:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"onPrevious","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC"},{"text":".","kind":"text"},{"text":"ContinueCondition","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO"},{"text":", ","kind":"text"},{"text":"generator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","abstract":[{"text":"Adds another ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" producing closure to be run as soon as all previously queued future have completed, succeeded, or failed.","type":"text"}],"role":"symbol","title":"append(onPrevious:generator:)"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/ContinueCondition":{"abstract":[{"text":"Under what conditions an appended closure should be run.","type":"text"}],"type":"topic","title":"EventLoopFutureQueue.ContinueCondition","navigatorTitle":[{"text":"ContinueCondition","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContinueCondition","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"title":"AsyncKit","url":"\/documentation\/asynckit","role":"collection","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(each:_:)-3i4m4":{"abstract":[{"text":"Same as ","type":"text"},{"code":"append(each:_:)","type":"codeVoice"},{"text":" above, but assumes all futures return ","type":"text"},{"code":"Void","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and returns a "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" future instead of a result array."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"each","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"title":"append(each:_:)","kind":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(each:_:)-3i4m4","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-3i4m4"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/eventLoop":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/eventLoop","url":"\/documentation\/asynckit\/eventloopfuturequeue\/eventloop","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"kind":"symbol","abstract":[{"text":"The event loop that all the futures’s completions are handled on.","type":"text"}],"role":"symbol","title":"eventLoop"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/init(eventLoop:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/init(eventLoop:)","url":"\/documentation\/asynckit\/eventloopfuturequeue\/init(eventloop:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"text":"Create a new ","type":"text"},{"code":"EventLoopFutureQueue","type":"codeVoice"},{"text":" on a given event loop.","type":"text"}],"role":"symbol","title":"init(eventLoop:)"}}}