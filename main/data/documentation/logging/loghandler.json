{"relationshipsSections":[{"kind":"relationships","title":"Conforming Types","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler"],"type":"conformingTypes"}],"metadata":{"roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"LogHandler"}],"externalID":"s:7Logging10LogHandlerP","role":"symbol","title":"LogHandler","symbolKind":"protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LogHandler"}],"modules":[{"name":"Logging"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/logging\/loghandler"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7"]},{"title":"Subscripts","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" is an implementation of a logging backend.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LogHandler"}]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"This type is an implementation detail and should not normally be used, unless implementing your own logging backend.","type":"text"},{"text":" ","type":"text"},{"text":"To use the SwiftLog API, please refer to the documentation of ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Implementation-requirements","text":"Implementation requirements","type":"heading","level":1},{"inlineContent":[{"type":"text","text":"To implement your own "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" you should respect a few requirements that are necessary so applications work"},{"type":"text","text":" "},{"type":"text","text":"as expected regardless of the selected "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" implementation."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" must be a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"The metadata and ","type":"text"},{"type":"codeVoice","code":"logLevel"},{"text":" properties must be implemented so that setting them on a ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":" does not affect","type":"text"},{"text":" ","type":"text"},{"text":"other ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":"s.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Treat-log-level-&-metadata-as-values","text":"Treat log level & metadata as values","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"When developing your "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":", please make sure the following test works."}],"type":"paragraph"},{"code":["LoggingSystem.bootstrap(MyLogHandler.init) \/\/ your LogHandler might have a different bootstrapping step","var logger1 = Logger(label: \"first logger\")","logger1.logLevel = .debug","logger1[metadataKey: \"only-on\"] = \"first\"","","var logger2 = logger1","logger2.logLevel = .error                  \/\/ this must not override `logger1`'s log level","logger2[metadataKey: \"only-on\"] = \"second\" \/\/ this must not override `logger1`'s metadata","","XCTAssertEqual(.debug, logger1.logLevel)","XCTAssertEqual(.error, logger2.logLevel)","XCTAssertEqual(\"first\", logger1[metadataKey: \"only-on\"])","XCTAssertEqual(\"second\", logger2[metadataKey: \"only-on\"])"],"type":"codeListing","syntax":"swift"},{"anchor":"Special-cases","text":"Special cases","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"In certain special cases, the log level behaving like a value on "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" might not be what you want. For example,"},{"type":"text","text":" "},{"type":"text","text":"you might want to set the log level across "},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":"s to "},{"type":"codeVoice","code":".debug"},{"type":"text","text":" when say a signal (eg. "},{"type":"codeVoice","code":"SIGUSR1"},{"type":"text","text":") is received"},{"type":"text","text":" "},{"type":"text","text":"to be able to debug special failures in production. This special case is acceptable but we urge you to create a"},{"type":"text","text":" "},{"type":"text","text":"solution specific to your "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" implementation to achieve that. Please find an example implementation of this"},{"type":"text","text":" "},{"type":"text","text":"behavior below, on reception of the signal you would call"},{"type":"text","text":" "},{"type":"codeVoice","code":"LogHandlerWithGlobalLogLevelOverride.overrideGlobalLogLevel = .debug"},{"type":"text","text":", for example."}],"type":"paragraph"},{"code":["import class Foundation.NSLock","","public struct LogHandlerWithGlobalLogLevelOverride: LogHandler {","    \/\/ the static properties hold the globally overridden log level (if overridden)","    private static let overrideLock = NSLock()","    private static var overrideLogLevel: Logger.Level? = nil","","    \/\/ this holds the log level if not overridden","    private var _logLevel: Logger.Level = .info","","    \/\/ metadata storage","    public var metadata: Logger.Metadata = [:]","","    public init(label: String) {","        \/\/ [...]","    }","","    public var logLevel: Logger.Level {","        \/\/ when we get asked for the log level, we check if it was globally overridden or not","        get {","            LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","            defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","            return LogHandlerWithGlobalLogLevelOverride.overrideLogLevel ?? self._logLevel","        }","        \/\/ we set the log level whenever we're asked (note: this might not have an effect if globally","        \/\/ overridden)","        set {","            self._logLevel = newValue","        }","    }","","    public func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?,","                    source: String, file: String, function: String, line: UInt) {","        \/\/ [...]","    }","","    public subscript(metadataKey metadataKey: String) -> Logger.Metadata.Value? {","        get {","            return self.metadata[metadataKey]","        }","        set(newValue) {","            self.metadata[metadataKey] = newValue","        }","    }","","    \/\/ this is the function to globally override the log level, it is not part of the `LogHandler` protocol","    public static func overrideGlobalLogLevel(_ logLevel: Logger.Level) {","        LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","        defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","        LogHandlerWithGlobalLogLevelOverride.overrideLogLevel = logLevel","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Please note that the above "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" will still pass the ‘log level is a value’ test above it iff the global log"},{"type":"text","text":" "},{"type":"text","text":"level has not been overridden. And most importantly it passes the requirement listed above: A change to the log"},{"type":"text","text":" "},{"type":"text","text":"level on one "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" should not affect the log level of another "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" variable."}],"type":"paragraph"}]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/subscript(metadataKey:)":{"role":"symbol","required":true,"abstract":[{"text":"Add, remove, or change the logging metadata.","type":"text"}],"kind":"symbol","title":"subscript(metadataKey:)","type":"topic","url":"\/documentation\/logging\/loghandler\/subscript(metadatakey:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"metadataKey","kind":"externalParam"},{"text":" _: ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:SD5Valuea"},{"kind":"text","text":"?"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:file:function:line:)-89rya":{"title":"log(level:message:metadata:file:function:line:)","url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya","defaultImplementations":1,"required":true,"deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"log"},{"kind":"text","text":"("},{"kind":"externalParam","text":"level"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"message"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Message","preciseIdentifier":"s:7Logging6LoggerV7MessageV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"role":"symbol","abstract":[{"text":"SwiftLog 1.0 compatibility method. Please do ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" implement, implement","type":"text"},{"text":" ","type":"text"},{"code":"log(level:message:metadata:source:file:function:line:)","type":"codeVoice"},{"text":" instead.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/ConsoleKit/ConsoleLogger":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Outputs logs to a "},{"type":"codeVoice","code":"Console"},{"type":"text","text":"."}],"title":"ConsoleLogger","url":"\/documentation\/consolekit\/consolelogger","navigatorTitle":[{"text":"ConsoleLogger","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConsoleLogger","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/StreamLogHandler":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StreamLogHandler"}],"abstract":[{"type":"codeVoice","code":"StreamLogHandler"},{"type":"text","text":" is a simple implementation of "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" for directing"},{"type":"text","text":" "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" output to either "},{"type":"codeVoice","code":"stderr"},{"type":"text","text":" or "},{"type":"codeVoice","code":"stdout"},{"type":"text","text":" via the factory methods."}],"role":"symbol","title":"StreamLogHandler","type":"topic","url":"\/documentation\/logging\/streamloghandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","navigatorTitle":[{"kind":"identifier","text":"StreamLogHandler"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/SwiftLogNoOpLogHandler":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwiftLogNoOpLogHandler","kind":"identifier"}],"abstract":[{"text":"No operation LogHandler, used when no logging is required","type":"text"}],"role":"symbol","title":"SwiftLogNoOpLogHandler","type":"topic","url":"\/documentation\/logging\/swiftlognooploghandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler","navigatorTitle":[{"text":"SwiftLogNoOpLogHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler":{"role":"symbol","navigatorTitle":[{"text":"LogHandler","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" is an implementation of a logging backend."}],"kind":"symbol","title":"LogHandler","type":"topic","url":"\/documentation\/logging\/loghandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Logging":{"role":"collection","abstract":[],"kind":"symbol","title":"Logging","type":"topic","url":"\/documentation\/logging","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/metadata":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"metadata"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV8Metadataa","text":"Metadata","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata","type":"topic","url":"\/documentation\/logging\/loghandler\/metadata","role":"symbol","abstract":[{"text":"Get or set the entire metadata storage as a dictionary.","type":"text"}],"required":true,"title":"metadata"},"doc://co.pointfree.VaporRouting/documentation/Logging/MultiplexLogHandler":{"abstract":[{"type":"text","text":"A pseudo-"},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" that can be used to send messages to multiple other "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":"s."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","title":"MultiplexLogHandler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MultiplexLogHandler","kind":"identifier"}],"navigatorTitle":[{"text":"MultiplexLogHandler","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/logging\/multiplexloghandler","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:source:file:function:line:)-8kgt7":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","kind":"symbol","role":"symbol","defaultImplementations":1,"url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","title":"log(level:message:metadata:source:file:function:line:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"log","kind":"identifier"},{"text":"(","kind":"text"},{"text":"level","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":".","kind":"text"},{"text":"Level","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV5LevelO"},{"text":", ","kind":"text"},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":".","kind":"text"},{"text":"Message","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV7MessageV"},{"text":", ","kind":"text"},{"text":"metadata","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":".","kind":"text"},{"text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"source","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}],"required":true,"abstract":[{"type":"text","text":"This method is called when a "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" must emit a log message. There is no need for the "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"check if the "},{"code":"level","type":"codeVoice"},{"type":"text","text":" is above or below the configured "},{"code":"logLevel","type":"codeVoice"},{"type":"text","text":" as "},{"code":"Logger","type":"codeVoice"},{"type":"text","text":" already performed this check and"},{"type":"text","text":" "},{"type":"text","text":"determined that a message should be logged."}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/logLevel":{"abstract":[{"text":"Get or set the configured log level.","type":"text"}],"required":true,"url":"\/documentation\/logging\/loghandler\/loglevel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","title":"logLevel","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"logLevel"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV5LevelO","text":"Level"}],"role":"symbol","kind":"symbol"}}}