{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Shuts down the client and event loop gracefully. This function is clearly an outlier in that it uses a completion","type":"text"},{"text":" ","type":"text"},{"text":"callback instead of an EventLoopFuture. The reason for that is that NIO’s EventLoopFutures will call back on an event loop.","type":"text"},{"text":" ","type":"text"},{"text":"The virtue of this function is to shut the event loop down. To work around that we call back on a DispatchQueue","type":"text"},{"text":" ","type":"text"},{"text":"instead.","type":"text"}],"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient\/shutdown(queue:_:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asynchttpclient\/httpclient\/shutdown(queue:_:)"]}],"metadata":{"roleHeading":"Instance Method","role":"symbol","title":"shutdown(queue:_:)","externalID":"s:15AsyncHTTPClient0B0C8shutdown5queue_y8Dispatch0E5QueueC_ys5Error_pSgctF","symbolKind":"method","modules":[{"name":"AsyncHTTPClient"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shutdown"},{"kind":"text","text":"("},{"kind":"externalParam","text":"queue"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8Dispatch0A5QueueC","kind":"typeIdentifier","text":"DispatchQueue"},{"kind":"text","text":", ("},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shutdown","kind":"identifier"},{"text":"(","kind":"text"},{"text":"queue","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8Dispatch0A5QueueC","text":"DispatchQueue","kind":"typeIdentifier"},{"text":" = .global(), ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"callback","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient":{"abstract":[],"role":"collection","title":"AsyncHTTPClient","url":"\/documentation\/asynchttpclient","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClient":{"abstract":[{"type":"text","text":"HTTPClient class provides API for request execution."}],"role":"symbol","title":"HTTPClient","url":"\/documentation\/asynchttpclient\/httpclient","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPClient"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPClient"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClient/shutdown(queue:_:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient\/shutdown(queue:_:)","type":"topic","abstract":[{"text":"Shuts down the client and event loop gracefully. This function is clearly an outlier in that it uses a completion","type":"text"},{"text":" ","type":"text"},{"text":"callback instead of an EventLoopFuture. The reason for that is that NIO’s EventLoopFutures will call back on an event loop.","type":"text"},{"text":" ","type":"text"},{"text":"The virtue of this function is to shut the event loop down. To work around that we call back on a DispatchQueue","type":"text"},{"text":" ","type":"text"},{"text":"instead.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shutdown","kind":"identifier"},{"text":"(","kind":"text"},{"text":"queue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"DispatchQueue","preciseIdentifier":"s:8Dispatch0A5QueueC","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"role":"symbol","title":"shutdown(queue:_:)","url":"\/documentation\/asynchttpclient\/httpclient\/shutdown(queue:_:)"}}}