{"kind":"article","metadata":{"modules":[{"name":"NIOHTTPCompression"}],"role":"collectionGroup","title":"ChannelInboundHandler Implementations"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niohttpcompression\/httpresponsecompressor\/channelinboundhandler-implementations"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/ChannelInboundHandler-Implementations","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/unwrapInboundIn(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/wrapInboundOut(_:)"],"generated":true,"title":"Instance Methods"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor/unwrapInboundIn(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapInboundIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundIn"}],"type":"topic","url":"\/documentation\/niohttpcompression\/httpresponsecompressor\/unwrapinboundin(_:)","abstract":[{"text":"Unwrap the provided ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" that was passed to ","type":"text"},{"code":"channelRead","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","kind":"symbol","title":"unwrapInboundIn(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/unwrapInboundIn(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression":{"url":"\/documentation\/niohttpcompression","kind":"symbol","role":"collection","title":"NIOHTTPCompression","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor":{"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponseCompressor","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","title":"HTTPResponseCompressor","url":"\/documentation\/niohttpcompression\/httpresponsecompressor","navigatorTitle":[{"text":"HTTPResponseCompressor","kind":"identifier"}],"abstract":[{"text":"A HTTPResponseCompressor is a duplex channel handler that handles automatic streaming compression of","type":"text"},{"text":" ","type":"text"},{"text":"HTTP responses. It respects the clientâ€™s Accept-Encoding preferences, including q-values if present,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and ensures that clients are served the compression algorithm that works best for them."}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor/wrapInboundOut(_:)":{"role":"symbol","url":"\/documentation\/niohttpcompression\/httpresponsecompressor\/wrapinboundout(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrapInboundOut","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier"}],"type":"topic","title":"wrapInboundOut(_:)","abstract":[{"text":"Wrap the provided ","type":"text"},{"type":"codeVoice","code":"InboundOut"},{"text":" that will be passed to the next ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" by calling ","type":"text"},{"type":"codeVoice","code":"ChannelHandlerContext.fireChannelRead"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor\/wrapInboundOut(_:)"}}}