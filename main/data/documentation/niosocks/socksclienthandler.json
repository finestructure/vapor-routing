{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/init(targetAddress:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelActive(context:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelRead(context:data:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/flush(context:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/handlerAdded(context:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/write(context:data:promise:)"],"title":"Instance Methods"},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundOut","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundOut"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelInboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelOutboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/RemovableChannelHandler-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler"},"metadata":{"roleHeading":"Class","externalID":"s:8NIOSOCKS18SOCKSClientHandlerC","role":"symbol","navigatorTitle":[{"text":"SOCKSClientHandler","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SOCKSClientHandler","kind":"identifier"}],"modules":[{"name":"NIOSOCKS"}],"symbolKind":"class","title":"SOCKSClientHandler"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SOCKSClientHandler","kind":"identifier"}],"languages":["swift"],"platforms":["Linux"]}]}],"sections":[],"abstract":[{"text":"Connects to a SOCKS server to establish a proxied connection","type":"text"},{"text":" ","type":"text"},{"text":"to a host. This handler should be inserted at the beginning of a","type":"text"},{"text":" ","type":"text"},{"text":"channelâ€™s pipeline. Note that SOCKS only supports fully-qualified","type":"text"},{"text":" ","type":"text"},{"text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets.","type":"text"}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS"]]},"variants":[{"paths":["\/documentation\/niosocks\/socksclienthandler"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/flush(context:)":{"url":"\/documentation\/niosocks\/socksclienthandler\/flush(context:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/flush(context:)","type":"topic","title":"flush(context:)","abstract":[{"text":"Called to request that the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" flush all pending writes. The flush operation will try to flush out all previous written messages","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that are pending."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flush"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/ChannelHandler-Implementations":{"url":"\/documentation\/niosocks\/socksclienthandler\/channelhandler-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelHandler-Implementations","type":"topic","title":"ChannelHandler Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/channelActive(context:)":{"abstract":[{"type":"text","text":"Called when the "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" has become active, and is able to send and receive data."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelActive(context:)","url":"\/documentation\/niosocks\/socksclienthandler\/channelactive(context:)","title":"channelActive(context:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelActive"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/ChannelInboundHandler-Implementations":{"type":"topic","title":"ChannelInboundHandler Implementations","kind":"article","url":"\/documentation\/niosocks\/socksclienthandler\/channelinboundhandler-implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelInboundHandler-Implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","type":"topic","title":"ChannelOutboundHandler","role":"symbol","kind":"symbol","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/channeloutboundhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"title":"RemovableChannelHandler","navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that can be dynamically removed from a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" whilst"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is operating normally."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is required to remove itself from the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" (using"},{"type":"text","text":" "},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"type":"text","text":") as soon as possible."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"url":"\/documentation\/niocore\/removablechannelhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/OutboundOut":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundOut"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundOut","navigatorTitle":[{"kind":"identifier","text":"OutboundOut"}],"abstract":[{"type":"text","text":"The type of the outbound data which will be forwarded to the next "},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"type":"text","text":" in the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}],"title":"SOCKSClientHandler.OutboundOut","url":"\/documentation\/niosocks\/socksclienthandler\/outboundout","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelHandler","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","role":"symbol","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"text":"never","type":"text"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}],"title":"ChannelHandler","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"url":"\/documentation\/niocore\/channelhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/OutboundIn":{"type":"topic","abstract":[{"type":"text","text":"The type of the outbound data which is wrapped in "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundIn"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundIn","navigatorTitle":[{"kind":"identifier","text":"OutboundIn"}],"kind":"symbol","title":"SOCKSClientHandler.OutboundIn","url":"\/documentation\/niosocks\/socksclienthandler\/outboundin"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/handlerAdded(context:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/handlerAdded(context:)","title":"handlerAdded(context:)","url":"\/documentation\/niosocks\/socksclienthandler\/handleradded(context:)","kind":"symbol","role":"symbol","type":"topic","abstract":[{"text":"Called when this ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" is added to the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handlerAdded","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier","text":"ChannelHandlerContext"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/write(context:data:promise:)":{"url":"\/documentation\/niosocks\/socksclienthandler\/write(context:data:promise:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/write(context:data:promise:)","type":"topic","title":"write(context:data:promise:)","abstract":[{"text":"Called to request a write operation. The write operation will write the messages through the","type":"text"},{"text":" ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":". Those are then ready to be flushed to the actual ","type":"text"},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"codeVoice","code":"Channel.flush"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ChannelHandlerContext.flush"},{"type":"text","text":" is called."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">?)"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler":{"type":"topic","abstract":[{"type":"text","text":"Connects to a SOCKS server to establish a proxied connection"},{"type":"text","text":" "},{"type":"text","text":"to a host. This handler should be inserted at the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"channelâ€™s pipeline. Note that SOCKS only supports fully-qualified"},{"type":"text","text":" "},{"type":"text","text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets."}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SOCKSClientHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","navigatorTitle":[{"text":"SOCKSClientHandler","kind":"identifier"}],"kind":"symbol","title":"SOCKSClientHandler","url":"\/documentation\/niosocks\/socksclienthandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/ChannelOutboundHandler-Implementations":{"url":"\/documentation\/niosocks\/socksclienthandler\/channeloutboundhandler-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/ChannelOutboundHandler-Implementations","type":"topic","title":"ChannelOutboundHandler Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS":{"type":"topic","abstract":[],"role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS","kind":"symbol","title":"NIOSOCKS","url":"\/documentation\/niosocks"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/RemovableChannelHandler-Implementations":{"url":"\/documentation\/niosocks\/socksclienthandler\/removablechannelhandler-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/RemovableChannelHandler-Implementations","type":"topic","title":"RemovableChannelHandler Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/channelRead(context:data:)":{"url":"\/documentation\/niosocks\/socksclienthandler\/channelread(context:data:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/channelRead(context:data:)","type":"topic","title":"channelRead(context:data:)","abstract":[{"text":"Called when some data has been read from the remote peer.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelRead"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/InboundIn":{"url":"\/documentation\/niosocks\/socksclienthandler\/inboundin","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundIn","type":"topic","title":"SOCKSClientHandler.InboundIn","abstract":[{"text":"The type of the inbound data which is wrapped in ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"InboundIn"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundIn"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelInboundHandler","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","role":"symbol","abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"text":" which handles inbound I\/O events for a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"title":"ChannelInboundHandler","navigatorTitle":[{"text":"ChannelInboundHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/channelinboundhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/InboundOut":{"url":"\/documentation\/niosocks\/socksclienthandler\/inboundout","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/InboundOut","type":"topic","title":"SOCKSClientHandler.InboundOut","abstract":[{"text":"The type of the inbound data which will be forwarded to the next ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"InboundOut"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundOut"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/init(targetAddress:)":{"url":"\/documentation\/niosocks\/socksclienthandler\/init(targetaddress:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/init(targetAddress:)","type":"topic","title":"init(targetAddress:)","abstract":[{"text":"Creates a new ","type":"text"},{"code":"SOCKSClientHandler","type":"codeVoice"},{"text":" that connects to a server","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and instructs the server to connect to "},{"type":"codeVoice","code":"targetAddress"},{"type":"text","text":"."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"targetAddress"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOSOCKS12SOCKSAddressO","text":"SOCKSAddress"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol"}}}