{"kind":"symbol","variants":[{"paths":["\/documentation\/niocore"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"},"metadata":{"role":"collection","roleHeading":"Framework","title":"NIOCore","externalID":"NIOCore","symbolKind":"module","modules":[{"name":"NIOCore"}]},"sections":[],"topicSections":[{"title":"Classes","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System"]}],"hierarchy":{"paths":[[]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","title":"BackPressureHandler","role":"symbol","url":"\/documentation\/niocore\/backpressurehandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BackPressureHandler"}],"type":"topic","abstract":[{"type":"text","text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough."},{"type":"text","text":" "},{"type":"text","text":"It will start reading again once pending data was written."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackPressureHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPacketInfo":{"url":"\/documentation\/niocore\/niopacketinfo","navigatorTitle":[{"kind":"identifier","text":"NIOPacketInfo"}],"title":"NIOPacketInfo","kind":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOPacketInfo"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelCore","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/channelcore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"text":"The core ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" methods that are for internal use of the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" implementation only.","type":"text"}],"navigatorTitle":[{"text":"ChannelCore","kind":"identifier"}],"title":"ChannelCore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","type":"topic","title":"ChannelOutboundHandler","role":"symbol","kind":"symbol","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/channeloutboundhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MaxMessagesPerReadOption":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"MaxMessagesPerReadOption","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/niocore\/maxmessagesperreadoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MaxMessagesPerReadOption","kind":"identifier"}],"title":"MaxMessagesPerReadOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOData":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IOData"}],"url":"\/documentation\/niocore\/iodata","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"IOData"}],"title":"IOData","abstract":[{"type":"codeVoice","code":"IOData"},{"type":"text","text":" unifies standard SwiftNIO types that are raw bytes of data; currently "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelShouldQuiesceEvent":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","kind":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" user event that is sent when the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" has been asked to quiesce.","type":"text"}],"navigatorTitle":[{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}],"url":"\/documentation\/niocore\/channelshouldquiesceevent","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}],"title":"ChannelShouldQuiesceEvent"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddress":{"navigatorTitle":[{"text":"SocketAddress","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketAddress","kind":"identifier"}],"title":"SocketAddress","role":"symbol","url":"\/documentation\/niocore\/socketaddress","abstract":[{"text":"Represent a socket address to which we may want to connect or bind.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"abstract":[{"type":"text","text":"Provides an endless stream of "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to use."}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopgroup","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","title":"EventLoopGroup","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/TimeAmount":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TimeAmount","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount","navigatorTitle":[{"text":"TimeAmount","kind":"identifier"}],"abstract":[{"text":"Represents a time ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"interval"}]},{"text":".","type":"text"}],"role":"symbol","title":"TimeAmount","type":"topic","url":"\/documentation\/niocore\/timeamount","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOBSDSocket":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOBSDSocket","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"NIOBSDSocket"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","url":"\/documentation\/niocore\/niobsdsocket","kind":"symbol","type":"topic","abstract":[],"title":"NIOBSDSocket","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageHandler","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/bytetomessagehandler","navigatorTitle":[{"text":"ByteToMessageHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"A handler which turns a given "},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"title":"ByteToMessageHandler","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopPromise":{"role":"symbol","abstract":[{"type":"text","text":"A promise to provide a result later."}],"kind":"symbol","navigatorTitle":[{"text":"EventLoopPromise","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopPromise","kind":"identifier"}],"type":"topic","title":"EventLoopPromise","url":"\/documentation\/niocore\/eventlooppromise","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOption":{"abstract":[],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketOption"}],"deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"SocketOption"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","url":"\/documentation\/niocore\/socketoption","role":"symbol","title":"SocketOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileDescriptor":{"navigatorTitle":[{"kind":"identifier","text":"FileDescriptor"}],"role":"symbol","url":"\/documentation\/niocore\/filedescriptor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","type":"topic","title":"FileDescriptor","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileDescriptor"}],"abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionProvider":{"url":"\/documentation\/niocore\/socketoptionprovider","title":"SocketOptionProvider","abstract":[{"text":"This protocol defines an object, most commonly a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":", that supports","type":"text"},{"text":" ","type":"text"},{"text":"setting and getting socket options (via ","type":"text"},{"type":"codeVoice","code":"setsockopt"},{"text":"\/","type":"text"},{"code":"getsockopt","type":"codeVoice"},{"text":" or similar).","type":"text"},{"text":" ","type":"text"},{"text":"It provides a strongly typed API that makes working with larger, less-common","type":"text"},{"text":" ","type":"text"},{"text":"socket options easier than the ","type":"text"},{"code":"ChannelOption","type":"codeVoice"},{"text":" API allows.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"SocketOptionProvider","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionProvider","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"navigatorTitle":[{"kind":"identifier","text":"AcceptBackoffHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AcceptBackoffHandler"}],"url":"\/documentation\/niocore\/acceptbackoffhandler","role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that implements a backoff for a "},{"type":"codeVoice","code":"ServerChannel"},{"type":"text","text":" when accept produces an "},{"type":"codeVoice","code":"IOError"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These errors are often recoverable by reducing the rate at which we call accept."}],"kind":"symbol","title":"AcceptBackoffHandler","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"title":"NIOSingleStepByteToMessageDecoder","url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"type":"topic","abstract":[{"text":"A simplified version of ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" that can generate zero or one messages for each invocation of ","type":"text"},{"code":"decode","type":"codeVoice"},{"type":"text","text":" or "},{"code":"decodeLast","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Having "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" when returning. This allows for greatly simplified processing."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvAllocatorOption":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"RecvAllocatorOption","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/niocore\/recvallocatoroption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecvAllocatorOption","kind":"identifier"}],"title":"RecvAllocatorOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOExplicitCongestionNotificationState":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","kind":"symbol","abstract":[{"text":"Possible Explicit Congestion Notification States","type":"text"}],"navigatorTitle":[{"text":"NIOExplicitCongestionNotificationState","kind":"identifier"}],"url":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOExplicitCongestionNotificationState","kind":"identifier"}],"title":"NIOExplicitCongestionNotificationState"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"url":"\/documentation\/niocore\/nioclienttcpbootstrap","title":"NIOClientTCPBootstrap","navigatorTitle":[{"kind":"identifier","text":"NIOClientTCPBootstrap"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","abstract":[{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTCPBootstrap"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMark":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"WriteBufferWaterMark","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/niocore\/writebufferwatermark","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WriteBufferWaterMark","kind":"identifier"}],"title":"WriteBufferWaterMark"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AutoReadOption":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"AutoReadOption","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/niocore\/autoreadoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoReadOption","kind":"identifier"}],"title":"AutoReadOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundInvoker":{"title":"ChannelInboundInvoker","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundInvoker"}],"type":"topic","url":"\/documentation\/niocore\/channelinboundinvoker","role":"symbol","abstract":[{"type":"text","text":"Fire inbound events related to a "},{"type":"codeVoice","code":"Channel"},{"text":" through the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":" until its end is reached or it’s consumed by a ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundInvoker"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSynchronousChannelOptions":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","url":"\/documentation\/niocore\/niosynchronouschanneloptions","navigatorTitle":[{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"type":"topic","title":"NIOSynchronousChannelOptions","kind":"symbol","abstract":[],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundInvoker":{"abstract":[{"text":"Allows users to invoke an “outbound” operation related to a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that will flow through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" until","type":"text"},{"text":" ","type":"text"},{"text":"it will finally be executed by the the ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"type":"text","text":" implementation."}],"navigatorTitle":[{"text":"ChannelOutboundInvoker","kind":"identifier"}],"url":"\/documentation\/niocore\/channeloutboundinvoker","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","title":"ChannelOutboundInvoker","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ChannelOutboundInvoker","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllocatorOption":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"AllocatorOption","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/niocore\/allocatoroption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AllocatorOption","kind":"identifier"}],"title":"AllocatorOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"title":"RemovableChannelHandler","navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"role":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that can be dynamically removed from a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" whilst"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is operating normally."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is required to remove itself from the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" (using"},{"type":"text","text":" "},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"type":"text","text":") as soon as possible."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"url":"\/documentation\/niocore\/removablechannelhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionName":{"title":"SocketOptionName","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","role":"symbol","abstract":[],"url":"\/documentation\/niocore\/socketoptionname","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionName","kind":"identifier"}],"navigatorTitle":[{"text":"SocketOptionName","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotSupportedError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","navigatorTitle":[{"kind":"identifier","text":"NIOMulticastNotSupportedError"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOMulticastNotSupportedError"}],"kind":"symbol","title":"NIOMulticastNotSupportedError","abstract":[{"type":"text","text":"Multicast is not supported on this interface."}],"url":"\/documentation\/niocore\/niomulticastnotsupportederror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DatagramVectorReadMessageCountOption":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"DatagramVectorReadMessageCountOption","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/niocore\/datagramvectorreadmessagecountoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatagramVectorReadMessageCountOption","kind":"identifier"}],"title":"DatagramVectorReadMessageCountOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSendable":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"NIOSendable","kind":"identifier"}],"url":"\/documentation\/niocore\/niosendable","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSendable","kind":"identifier"}],"title":"NIOSendable"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteObservingByteToMessageDecoder":{"abstract":[{"type":"text","text":"Some "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s need to observe "},{"type":"codeVoice","code":"write"},{"type":"text","text":"s (which are outbound events). "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s which"},{"text":" ","type":"text"},{"text":"implement the ","type":"text"},{"code":"WriteObservingByteToMessageDecoder","type":"codeVoice"},{"text":" protocol will be notified about every outbound write.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteObservingByteToMessageDecoder"}],"navigatorTitle":[{"kind":"identifier","text":"WriteObservingByteToMessageDecoder"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder","title":"WriteObservingByteToMessageDecoder","url":"\/documentation\/niocore\/writeobservingbytetomessagedecoder","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoderError":{"url":"\/documentation\/niocore\/bytetomessagedecodererror","type":"topic","abstract":[{"text":"Common errors thrown by ","type":"text"},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s."}],"navigatorTitle":[{"text":"ByteToMessageDecoderError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageDecoderError","kind":"identifier"}],"title":"ByteToMessageDecoderError","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoder":{"navigatorTitle":[{"text":"ByteToMessageDecoder","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","title":"ByteToMessageDecoder","abstract":[{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s decode bytes in a stream-like fashion from "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to another message type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ByteToMessageDecoder","kind":"identifier"}],"url":"\/documentation\/niocore\/bytetomessagedecoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AddressedEnvelope":{"role":"symbol","navigatorTitle":[{"text":"AddressedEnvelope","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A data structure for processing addressed datagrams, such as those used by UDP.","type":"text"}],"title":"AddressedEnvelope","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AddressedEnvelope","kind":"identifier"}],"url":"\/documentation\/niocore\/addressedenvelope"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOInsecureNoTLS":{"title":"NIOInsecureNoTLS","abstract":[],"url":"\/documentation\/niocore\/nioinsecurenotls","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOInsecureNoTLS"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOInsecureNoTLS"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","kind":"symbol","type":"topic","navigatorTitle":[{"text":"IOError","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IOError","kind":"identifier"}],"role":"symbol","title":"IOError","abstract":[{"text":"An ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" for an IO operation.","type":"text"}],"url":"\/documentation\/niocore\/ioerror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelInboundHandler","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","role":"symbol","abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"text":" which handles inbound I\/O events for a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"title":"ChannelInboundHandler","navigatorTitle":[{"text":"ChannelInboundHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/channelinboundhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","navigatorTitle":[{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"title":"NIOClientTCPBootstrapProtocol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"role":"symbol","abstract":[{"code":"NIOClientTCPBootstrapProtocol","type":"codeVoice"},{"text":" is implemented by various underlying transport mechanisms. Typically,","type":"text"},{"text":" ","type":"text"},{"text":"this will be the BSD Sockets API implemented by ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteHandler":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","abstract":[{"text":"A handler which turns a given ","type":"text"},{"type":"codeVoice","code":"MessageToByteEncoder"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"type":"topic","title":"MessageToByteHandler","kind":"symbol","url":"\/documentation\/niocore\/messagetobytehandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MessageToByteHandler","kind":"identifier"}],"navigatorTitle":[{"text":"MessageToByteHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelError":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelError"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","title":"ChannelError","navigatorTitle":[{"kind":"identifier","text":"ChannelError"}],"kind":"symbol","type":"topic","url":"\/documentation\/niocore\/channelerror","abstract":[{"type":"text","text":"An error that can occur on "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" operations."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"role":"symbol","title":"EventLoopFuture"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTLSProvider":{"url":"\/documentation\/niocore\/nioclienttlsprovider","navigatorTitle":[{"text":"NIOClientTLSProvider","kind":"identifier"}],"title":"NIOClientTLSProvider","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTLSProvider","kind":"identifier"}],"role":"symbol","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandlerContext":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","role":"symbol","url":"\/documentation\/niocore\/channelhandlercontext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandlerContext"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelHandlerContext"}],"title":"ChannelHandlerContext","abstract":[{"text":"Every ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" has – when added to a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" – a corresponding "},{"type":"codeVoice","code":"ChannelHandlerContext"},{"type":"text","text":" which is"},{"type":"text","text":" "},{"type":"text","text":"the way "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s can interact with other "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s in the pipeline."}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferView":{"role":"symbol","abstract":[{"text":"A view into a portion of a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"ByteBufferView","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBufferView","kind":"identifier"}],"type":"topic","title":"ByteBufferView","url":"\/documentation\/niocore\/bytebufferview","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AdaptiveRecvByteBufferAllocator":{"role":"symbol","abstract":[{"type":"codeVoice","code":"RecvByteBufferAllocator"},{"type":"text","text":" which will gracefully increment or decrement the buffer size on the feedback that was recorded."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}],"title":"AdaptiveRecvByteBufferAllocator","url":"\/documentation\/niocore\/adaptiverecvbytebufferallocator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"url":"\/documentation\/niocore\/bytebufferallocator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"role":"symbol","type":"topic","title":"ByteBufferAllocator","abstract":[{"text":"The preferred allocator for ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"type":"text","text":", "},{"code":"realloc","type":"codeVoice"},{"type":"text","text":" and "},{"code":"free","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMarkOption":{"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteBufferWaterMarkOption"}],"type":"topic","title":"WriteBufferWaterMarkOption","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WriteBufferWaterMarkOption"}],"role":"symbol","deprecated":true,"url":"\/documentation\/niocore\/writebufferwatermarkoption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CircularBuffer"}],"type":"topic","abstract":[{"type":"text","text":"An automatically expanding ring buffer implementation backed by a "},{"code":"ContiguousArray","type":"codeVoice"},{"type":"text","text":". Even though this implementation"},{"type":"text","text":" "},{"type":"text","text":"will automatically expand if more elements than "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" are stored, it’s advantageous to prevent"},{"type":"text","text":" "},{"type":"text","text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen."}],"url":"\/documentation\/niocore\/circularbuffer","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","title":"CircularBuffer","navigatorTitle":[{"kind":"identifier","text":"CircularBuffer"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvByteBufferAllocator":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","kind":"symbol","abstract":[{"text":"Allocates ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":"s to be used to read bytes from a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" and records the number of the actual bytes that were used.","type":"text"}],"navigatorTitle":[{"text":"RecvByteBufferAllocator","kind":"identifier"}],"url":"\/documentation\/niocore\/recvbytebufferallocator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecvByteBufferAllocator","kind":"identifier"}],"title":"RecvByteBufferAllocator"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"role":"symbol","abstract":[{"type":"text","text":"A "},{"code":"FileRegion","type":"codeVoice"},{"type":"text","text":" represent a readable portion usually created to be sent over the network."}],"kind":"symbol","navigatorTitle":[{"text":"FileRegion","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileRegion","kind":"identifier"}],"type":"topic","title":"FileRegion","url":"\/documentation\/niocore\/fileregion","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DecodingState":{"role":"symbol","navigatorTitle":[{"text":"DecodingState","kind":"identifier"}],"url":"\/documentation\/niocore\/decodingstate","title":"DecodingState","abstract":[{"type":"text","text":"State of the current decoding process."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"DecodingState","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIODeadline":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIODeadline"}],"url":"\/documentation\/niocore\/niodeadline","navigatorTitle":[{"kind":"identifier","text":"NIODeadline"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"Represents a point in time.","type":"text"}],"title":"NIODeadline"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Endianness":{"url":"\/documentation\/niocore\/endianness","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Endianness"}],"title":"Endianness","abstract":[{"type":"text","text":"Endianness refers to the sequential order in which bytes are arranged into larger numerical values when stored in"},{"type":"text","text":" "},{"type":"text","text":"memory or when transmitted over digital links."}],"navigatorTitle":[{"kind":"identifier","text":"Endianness"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelHandler","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","role":"symbol","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"text":"never","type":"text"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}],"title":"ChannelHandler","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"url":"\/documentation\/niocore\/channelhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MarkedCircularBuffer":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MarkedCircularBuffer","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A circular buffer that allows one object at a time to be “marked” and easily identified and retrieved later."}],"url":"\/documentation\/niocore\/markedcircularbuffer","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","title":"MarkedCircularBuffer","navigatorTitle":[{"text":"MarkedCircularBuffer","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInvoker":{"title":"ChannelInvoker","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInvoker"}],"type":"topic","url":"\/documentation\/niocore\/channelinvoker","role":"symbol","abstract":[{"type":"text","text":"A protocol that signals that outbound and inbound events are triggered by this invoker."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInvoker"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkDevice":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","navigatorTitle":[{"kind":"identifier","text":"NIONetworkDevice"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIONetworkDevice"}],"kind":"symbol","title":"NIONetworkDevice","abstract":[{"type":"text","text":"A representation of a single network device on a system."}],"url":"\/documentation\/niocore\/nionetworkdevice"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"type":"topic","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"abstract":[{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swift’s builtin "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" the overhead of "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" depends on the the type of the wrapped value. Certain types that are important"},{"type":"text","text":" "},{"type":"text","text":"for the performance of a SwiftNIO application like "},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"title":"NIOAny","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelEvent":{"abstract":[{"type":"text","text":"An "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" related event that is passed through the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" to notify the user."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelEvent"}],"type":"topic","title":"ChannelEvent","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelEvent"}],"role":"symbol","kind":"symbol","url":"\/documentation\/niocore\/channelevent","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RepeatedTask":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepeatedTask"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask","title":"RepeatedTask","role":"symbol","type":"topic","url":"\/documentation\/niocore\/repeatedtask","navigatorTitle":[{"kind":"identifier","text":"RepeatedTask"}],"abstract":[{"text":"Returned once a task was scheduled to be repeatedly executed on the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","navigatorTitle":[{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"text":" uses a ","type":"text"},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"code":"ByteToMessageHandler","type":"codeVoice"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}],"title":"NIOSingleStepByteToMessageProcessor","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipelineError":{"role":"symbol","abstract":[{"type":"codeVoice","code":"Error"},{"type":"text","text":" that is used by the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" to inform the user of an error."}],"navigatorTitle":[{"text":"ChannelPipelineError","kind":"identifier"}],"title":"ChannelPipelineError","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"ChannelPipelineError","kind":"identifier"}],"url":"\/documentation\/niocore\/channelpipelineerror","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopIterator":{"abstract":[{"text":"An iterator over the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":"s forming an ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopIterator","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"EventLoopIterator","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","title":"EventLoopIterator","type":"topic","url":"\/documentation\/niocore\/eventloopiterator"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOption":{"title":"ChannelOption","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOption"}],"kind":"symbol","url":"\/documentation\/niocore\/channeloption","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelOption"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","abstract":[{"type":"text","text":"A configuration option that can be set on a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" to configure different behaviour."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOptions":{"title":"ChannelOptions","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","role":"symbol","abstract":[{"text":"Provides ","type":"text"},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":"s to be used with a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ServerBootstrap"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/channeloptions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOptions","kind":"identifier"}],"navigatorTitle":[{"text":"ChannelOptions","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotImplementedError":{"navigatorTitle":[{"text":"NIOMulticastNotImplementedError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","role":"symbol","title":"NIOMulticastNotImplementedError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOMulticastNotImplementedError","kind":"identifier"}],"abstract":[{"type":"text","text":"Multicast has not been properly implemented on this channel."}],"kind":"symbol","type":"topic","url":"\/documentation\/niocore\/niomulticastnotimplementederror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":"s until it’s closed.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","url":"\/documentation\/niocore\/eventloop","title":"EventLoop"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteEncoder":{"type":"topic","url":"\/documentation\/niocore\/messagetobyteencoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MessageToByteEncoder","kind":"identifier"}],"navigatorTitle":[{"text":"MessageToByteEncoder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","abstract":[{"text":"A protocol for straightforward encoders which encode custom messages to ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":"s.","type":"text"},{"text":" ","type":"text"},{"text":"To add a ","type":"text"},{"type":"codeVoice","code":"MessageToByteEncoder"},{"text":" to a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":", use","type":"text"},{"text":" ","type":"text"},{"code":"channel.pipeline.addHandler(MessageToByteHandler(myEncoder)","type":"codeVoice"},{"text":".","type":"text"}],"title":"MessageToByteEncoder","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllowRemoteHalfClosureOption":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"AllowRemoteHalfClosureOption","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/niocore\/allowremotehalfclosureoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AllowRemoteHalfClosureOption","kind":"identifier"}],"title":"AllowRemoteHalfClosureOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdleStateHandler"}],"type":"topic","abstract":[{"type":"text","text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while."}],"url":"\/documentation\/niocore\/idlestatehandler","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","title":"IdleStateHandler","navigatorTitle":[{"kind":"identifier","text":"IdleStateHandler"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FixedSizeRecvByteBufferAllocator":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}],"title":"FixedSizeRecvByteBufferAllocator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","type":"topic","abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will always return a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with the same fixed size no matter what was recorded.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}],"kind":"symbol","url":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelDuplexHandler":{"url":"\/documentation\/niocore\/channelduplexhandler","type":"topic","kind":"symbol","abstract":[{"text":"A combination of ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":".","type":"text"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelDuplexHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","navigatorTitle":[{"text":"ChannelDuplexHandler","kind":"identifier"}],"role":"symbol","title":"ChannelDuplexHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionLevel":{"title":"SocketOptionLevel","abstract":[],"role":"symbol","type":"topic","url":"\/documentation\/niocore\/socketoptionlevel","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionLevel","kind":"identifier"}],"navigatorTitle":[{"text":"SocketOptionLevel","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"url":"\/documentation\/niocore\/channel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"title":"Channel"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteSpinOption":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteSpinOption"}],"title":"WriteSpinOption","role":"symbol","deprecated":true,"abstract":[],"url":"\/documentation\/niocore\/writespinoption","navigatorTitle":[{"kind":"identifier","text":"WriteSpinOption"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ConnectTimeoutOption":{"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConnectTimeoutOption","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[],"title":"ConnectTimeoutOption","url":"\/documentation\/niocore\/connecttimeoutoption","navigatorTitle":[{"text":"ConnectTimeoutOption","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOEventLoopGroupProvider":{"kind":"symbol","navigatorTitle":[{"text":"NIOEventLoopGroupProvider","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOEventLoopGroupProvider","kind":"identifier"}],"url":"\/documentation\/niocore\/nioeventloopgroupprovider","role":"symbol","type":"topic","abstract":[{"type":"text","text":"This type is intended to be used by libraries which use NIO, and offer their users either the option"},{"type":"text","text":" "},{"type":"text","text":"to "},{"code":".share","type":"codeVoice"},{"type":"text","text":" an existing event loop group or create (and manage) a new one ("},{"code":".createNew","type":"codeVoice"},{"type":"text","text":") and let it be"},{"type":"text","text":" "},{"type":"text","text":"managed by given library and its lifecycle."}],"title":"NIOEventLoopGroupProvider"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MulticastChannel":{"role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"MulticastChannel","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that supports IP multicast operations: that is, a channel that can join multicast","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"groups."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","title":"MulticastChannel","url":"\/documentation\/niocore\/multicastchannel","navigatorTitle":[{"kind":"identifier","text":"MulticastChannel"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MulticastChannel"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Scheduled":{"navigatorTitle":[{"text":"Scheduled","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/scheduled","title":"Scheduled","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scheduled","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","abstract":[{"text":"Returned once a task was scheduled on the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" for later execution.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionValue":{"abstract":[],"url":"\/documentation\/niocore\/socketoptionvalue","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SocketOptionValue"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketOptionValue"}],"title":"SocketOptionValue","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAttemptedToRemoveHandlerMultipleTimesError":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAttemptedToRemoveHandlerMultipleTimesError"}],"role":"symbol","url":"\/documentation\/niocore\/nioattemptedtoremovehandlermultipletimeserror","title":"NIOAttemptedToRemoveHandlerMultipleTimesError","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","navigatorTitle":[{"kind":"identifier","text":"NIOAttemptedToRemoveHandlerMultipleTimesError"}],"type":"topic","abstract":[{"text":"The removal of a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"ChannelPipeline.removeHandler","type":"codeVoice"},{"text":" has been attempted more than once.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","url":"\/documentation\/niocore\/channelpipeline","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelPipeline"}],"title":"ChannelPipeline","abstract":[{"text":"A list of ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s that handle or intercept inbound events and outbound operations of a","type":"text"},{"text":" ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":". ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" implements an advanced form of the Intercepting Filter pattern","type":"text"},{"text":" ","type":"text"},{"text":"to give a user full control over how an event is handled and how the ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s in a pipeline","type":"text"},{"text":" ","type":"text"},{"text":"interact with each other.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelPipeline"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BacklogOption":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BacklogOption","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/backlogoption","title":"BacklogOption","type":"topic","deprecated":true,"abstract":[],"navigatorTitle":[{"text":"BacklogOption","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/System":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"System"}],"abstract":[],"title":"System","navigatorTitle":[{"kind":"identifier","text":"System"}],"url":"\/documentation\/niocore\/system","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkInterface":{"role":"symbol","abstract":[{"text":"A representation of a single network interface on a system.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","deprecated":true,"title":"NIONetworkInterface","url":"\/documentation\/niocore\/nionetworkinterface","navigatorTitle":[{"text":"NIONetworkInterface","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIONetworkInterface","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOCloseOnErrorHandler":{"navigatorTitle":[{"text":"NIOCloseOnErrorHandler","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOCloseOnErrorHandler","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that closes the channel when an error is caught","type":"text"}],"title":"NIOCloseOnErrorHandler","url":"\/documentation\/niocore\/niocloseonerrorhandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddressError":{"type":"topic","abstract":[{"text":"Special ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" that may be thrown if we fail to create a ","type":"text"},{"type":"codeVoice","code":"SocketAddress"},{"text":".","type":"text"}],"url":"\/documentation\/niocore\/socketaddresserror","kind":"symbol","navigatorTitle":[{"text":"SocketAddressError","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"SocketAddressError","kind":"identifier"}],"title":"SocketAddressError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopError":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopError"}],"title":"EventLoopError","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopError"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","abstract":[{"type":"text","text":"Different "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"s that are specific to "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" operations \/ implementations."}],"url":"\/documentation\/niocore\/eventlooperror","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CloseMode":{"abstract":[{"text":"Specify what kind of close operation is requested.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","navigatorTitle":[{"text":"CloseMode","kind":"identifier"}],"title":"CloseMode","url":"\/documentation\/niocore\/closemode","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CloseMode","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"type":"topic","role":"symbol","url":"\/documentation\/niocore\/niofilehandle","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","abstract":[{"text":"A ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" is a handle to an open file.","type":"text"}],"title":"NIOFileHandle","navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}]}}}