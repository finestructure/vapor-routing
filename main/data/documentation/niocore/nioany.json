{"metadata":{"navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore6NIOAnyV","title":"NIOAny","roleHeading":"Structure","role":"symbol","symbolKind":"struct"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" the overhead of "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" depends on the the type of the wrapped value. Certain types that are important"},{"type":"text","text":" "},{"type":"text","text":"for the performance of a SwiftNIO application like "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":", "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"type":"text","text":" can be expected"},{"type":"text","text":" "},{"type":"text","text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" as"},{"type":"text","text":" "},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)"],"title":"Initializers"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations"],"title":"Default Implementations"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The most important use-cases for ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" are values travelling through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" whose type can’t","type":"text"},{"text":" ","type":"text"},{"text":"be calculated at compile time. For example:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the "},{"type":"codeVoice","code":"channelRead"},{"type":"text","text":" of any "},{"type":"codeVoice","code":"ChannelInboundHandler"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"the "},{"type":"codeVoice","code":"write"},{"type":"text","text":" method of a "},{"type":"codeVoice","code":"ChannelOutboundHandler"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The abstraction that delivers a ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" to user code must provide a mechanism to unwrap a ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" as a","type":"text"},{"text":" ","type":"text"},{"text":"certain type known at run-time. Canonical example:","type":"text"}]},{"syntax":null,"code":["class SandwichHandler: ChannelInboundHandler {","    typealias InboundIn = Bacon \/* we expected to be delivered `Bacon` ... *\/","    typealias InboundOut = Sandwich \/* ... and we will make and deliver a `Sandwich` from that *\/","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","         \/* we receive the `Bacon` as a `NIOAny` as at compile-time the exact configuration of the channel","            pipeline can't be computed. The pipeline can't be computed at compile time as it can change","            dynamically at run-time. Yet, we assert that in any configuration the channel handler before","            `SandwichHandler` does actually send us a stream of `Bacon`.","         *\/","         let bacon = self.unwrapInboundIn(data) \/* `Bacon` or crash *\/","         let sandwich = makeSandwich(bacon)","         context.fireChannelRead(self.wrapInboundOut(sandwich)) \/* as promised we deliver a wrapped `Sandwich` *\/","    }","}"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/niocore\/nioany"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP"],"title":"Conforms To","type":"conformsTo"}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/init(_:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)","url":"\/documentation\/niocore\/nioany\/init(_:)","abstract":[{"type":"text","text":"Wrap a value in a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":". In most cases you should not create a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" directly using this constructor."},{"type":"text","text":" "},{"type":"text","text":"The abstraction that accepts values of type "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" must also provide a mechanism to do the wrapping. An"},{"text":" ","type":"text"},{"text":"example is a ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" which provides ","type":"text"},{"code":"self.wrapInboundOut(aValueOfTypeInboundOut)","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","title":"init(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"type":"topic","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"abstract":[{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swift’s builtin "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" the overhead of "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" depends on the the type of the wrapped value. Certain types that are important"},{"type":"text","text":" "},{"type":"text","text":"for the performance of a SwiftNIO application like "},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"title":"NIOAny","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/CustomStringConvertible-Implementations":{"role":"collectionGroup","url":"\/documentation\/niocore\/nioany\/customstringconvertible-implementations","abstract":[],"title":"CustomStringConvertible Implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations","type":"topic","kind":"article"},"doc://co.pointfree.VaporRouting/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","identifier":"doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP","type":"unresolvable"}}}