{"metadata":{"roleHeading":"Class","modules":[{"name":"NIOCore"}],"navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"externalID":"s:7NIOCore35NIOSingleStepByteToMessageProcessorC","title":"NIOSingleStepByteToMessageProcessor","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"symbolKind":"class","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Decoder","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","preciseIdentifier":"s:7NIOCore33NIOSingleStepByteToMessageDecoderP","text":"NIOSingleStepByteToMessageDecoder","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" is first initialized with a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":". Then"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"codeVoice","code":"process"},{"type":"text","text":" as each "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" is received from the stream. The closure is called repeatedly with each message produced by"},{"type":"text","text":" "},{"type":"text","text":"the decoder."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When your stream ends, call "},{"code":"finishProcessing","type":"codeVoice"},{"type":"text","text":" to ensure all buffered data is passed to your decoder. This will call "},{"code":"decodeLast","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"one or more times with any remaining data."}],"type":"paragraph"},{"level":3,"anchor":"Example","type":"heading","text":"Example"},{"inlineContent":[{"text":"Below is an example of a protocol decoded by ","type":"text"},{"code":"TwoByteStringCodec","type":"codeVoice"},{"text":" that is sent over HTTP. ","type":"text"},{"code":"RawBodyMessageHandler","type":"codeVoice"},{"text":" forwards the headers","type":"text"},{"text":" ","type":"text"},{"text":"and trailers directly and uses ","type":"text"},{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"text":" to send whole decoded messages.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["class TwoByteStringCodec: NIOSingleStepByteToMessageDecoder {","    typealias InboundOut = String","","    public func decode(buffer: inout ByteBuffer) throws -> InboundOut? {","        return buffer.readString(length: 2)","    }","","    public func decodeLast(buffer: inout ByteBuffer, seenEOF: Bool) throws -> InboundOut? {","        return try self.decode(buffer: &buffer)","    }","}","","class RawBodyMessageHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPServerRequestPart \/\/ alias for HTTPPart<HTTPRequestHead, ByteBuffer>","    \/\/ This converts the body from ByteBuffer to String, our message type","    typealias InboundOut = HTTPPart<HTTPRequestHead, String>","","    private var messageProcessor: NIOSingleStepByteToMessageProcessor<TwoByteStringCodec>? = nil","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let req = self.unwrapInboundIn(data)","        do {","            switch req {","            case .head(let head):","                \/\/ simply forward on the head","                context.fireChannelRead(self.wrapInboundOut(.head(head)))","            case .body(let body):","                if self.messageProcessor == nil {","                    self.messageProcessor = NIOSingleStepByteToMessageProcessor(TwoByteStringCodec())","                }","                try self.messageProcessor!.process(buffer: body) { message in","                    self.channelReadMessage(context: context, message: message)","                }","            case .end(let trailers):","                \/\/ Forward on any remaining messages and the trailers","                try self.messageProcessor?.finishProcessing(seenEOF: false) { message in","                    self.channelReadMessage(context: context, message: message)","                }","                context.fireChannelRead(self.wrapInboundOut(.end(trailers)))","            }","        } catch {","            context.fireErrorCaught(error)","        }","    }","","    \/\/ Forward on the body messages as whole messages","    func channelReadMessage(context: ChannelHandlerContext, message: String) {","        context.fireChannelRead(self.wrapInboundOut(.body(message)))","    }","}","","private class DecodedBodyHTTPHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPPart<HTTPRequestHead, String>","    typealias OutboundOut = HTTPServerResponsePart","","    var msgs: [String] = []","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let message = self.unwrapInboundIn(data)","","        switch message {","        case .head(let head):","            print(\"head: \\(head)\")","        case .body(let msg):","            self.msgs.append(msg)","        case .end(let trailers):","            print(\"trailers: \\(trailers)\")","            var responseBuffer = context.channel.allocator.buffer(capacity: 32)","            for msg in msgs {","                responseBuffer.writeString(msg)","                responseBuffer.writeStaticString(\"\\n\")","            }","            var headers = HTTPHeaders()","            headers.add(name: \"content-length\", value: String(responseBuffer.readableBytes))","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.head(","                HTTPResponseHead(version: .http1_1,","                                 status: .ok, headers: headers))), promise: nil)","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.body(","                .byteBuffer(responseBuffer))), promise: nil)","            context.writeAndFlush(self.wrapOutboundOut(HTTPServerResponsePart.end(nil)), promise: nil)","        }","    }","}","","let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","let bootstrap = ServerBootstrap(group: group).childChannelInitializer({channel in","    channel.pipeline.configureHTTPServerPipeline(withPipeliningAssistance: true, withErrorHandling: true).flatMap { _ in","        channel.pipeline.addHandlers([RawBodyMessageHandler(), DecodedBodyHTTPHandler()])","    }","})","let channelFuture = bootstrap.bind(host: \"127.0.0.1\", port: 0)"]}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","interfaceLanguage":"swift"},"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)"]}],"variants":[{"paths":["\/documentation\/niocore\/niosinglestepbytetomessageprocessor"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"text":" uses a ","type":"text"},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"code":"ByteToMessageHandler","type":"codeVoice"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/process(buffer:_:)":{"role":"symbol","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"process"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/process(buffer:_:)","abstract":[{"type":"text","text":"Feed data into the "},{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"}],"title":"process(buffer:_:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","navigatorTitle":[{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"text":" uses a ","type":"text"},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"code":"ByteToMessageHandler","type":"codeVoice"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}],"title":"NIOSingleStepByteToMessageProcessor","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/init(_:maximumBufferSize:)":{"kind":"symbol","abstract":[{"text":"Initialize a ","type":"text"},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"text":".","type":"text"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/init(_:maximumbuffersize:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Decoder","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maximumBufferSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":"?)","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)","type":"topic","role":"symbol","title":"init(_:maximumBufferSize:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/finishProcessing(seenEOF:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Decoder"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"kind":"symbol","abstract":[{"text":"Call when there is no data left in the stream. Calls ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"text":".","type":"text"},{"type":"codeVoice","code":"decodeLast"},{"text":" one or more times. If there is no data left","type":"text"},{"text":" ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":" will be called one time with an empty ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/finishprocessing(seeneof:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finishProcessing","kind":"identifier"},{"text":"(","kind":"text"},{"text":"seenEOF","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", (","kind":"text"},{"text":"Decoder","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","type":"topic","role":"symbol","title":"finishProcessing(seenEOF:_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"title":"NIOSingleStepByteToMessageDecoder","url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"type":"topic","abstract":[{"text":"A simplified version of ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" that can generate zero or one messages for each invocation of ","type":"text"},{"code":"decode","type":"codeVoice"},{"type":"text","text":" or "},{"code":"decodeLast","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Having "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" when returning. This allows for greatly simplified processing."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder"}}}