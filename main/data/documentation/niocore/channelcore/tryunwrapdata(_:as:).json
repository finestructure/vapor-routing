{"sections":[],"abstract":[{"type":"text","text":"Attempts to unwrap the given "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a specific concrete type."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)"]}],"metadata":{"roleHeading":"Instance Method","externalID":"s:7NIOCore11ChannelCorePAAE13tryUnwrapData_2asqd__SgAA6NIOAnyV_qd__mtlF","modules":[{"name":"NIOCore"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"tryUnwrapData","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"symbolKind":"method","extendedModule":"NIOCore","title":"tryUnwrapData(_:as:)"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"data"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type = T.self) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"languages":["swift"]}]},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"text":"The content of the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if the type is incorrect.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"parameters","parameters":[{"name":"data","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" to unwrap.","type":"text"}]}]},{"name":"as","content":[{"inlineContent":[{"text":"The type to extract from the ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is intended for use when writing custom "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementations."},{"type":"text","text":" "},{"type":"text","text":"This can safely be called in methods like "},{"type":"codeVoice","code":"write0"},{"type":"text","text":" to extract data from the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" "},{"type":"text","text":"provided in those cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the unwrap fails, this will return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementations should almost"},{"type":"text","text":" "},{"type":"text","text":"always support only one runtime type, so in general they should avoid using this and prefer"},{"type":"text","text":" "},{"type":"text","text":"using "},{"type":"codeVoice","code":"unwrapData"},{"type":"text","text":" instead. This method exists for rare use-cases where tolerating type"},{"type":"text","text":" "},{"type":"text","text":"mismatches is acceptable."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are implementing a "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":", you should use "},{"type":"codeVoice","code":"unwrapData"},{"type":"text","text":" unless you"},{"type":"text","text":" "},{"type":"text","text":"are doing something "},{"type":"emphasis","inlineContent":[{"text":"extremely","type":"text"}]},{"type":"text","text":" unusual."}]}],"style":"warning"}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/tryUnwrapData(_:as:)":{"role":"symbol","title":"tryUnwrapData(_:as:)","abstract":[{"type":"text","text":"Attempts to unwrap the given "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a specific concrete type."}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"url":"\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"type":"topic","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"abstract":[{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" is an opaque container for values of "},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"type":"text","text":" type, similar to Swiftâ€™s builtin "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" the overhead of "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" depends on the the type of the wrapped value. Certain types that are important"},{"type":"text","text":" "},{"type":"text","text":"for the performance of a SwiftNIO application like "},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"title":"NIOAny","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelCore","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/channelcore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"text":"The core ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" methods that are for internal use of the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" implementation only.","type":"text"}],"navigatorTitle":[{"text":"ChannelCore","kind":"identifier"}],"title":"ChannelCore"}}}