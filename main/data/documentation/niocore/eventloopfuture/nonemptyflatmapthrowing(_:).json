{"metadata":{"symbolKind":"method","externalID":"s:7NIOCore15EventLoopFutureC8AsyncKitE23nonemptyFlatMapThrowingyACyqd__Gqd__xKcSlRzSmRd__lF","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"nonemptyFlatMapThrowing"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewValue"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":">"}],"extendedModule":"NIOCore","roleHeading":"Instance Method","modules":[{"name":"NIOCore"}],"title":"nonemptyFlatMapThrowing(_:)"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonemptyFlatMapThrowing","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"RangeReplaceableCollection","preciseIdentifier":"s:Sm","kind":"typeIdentifier"}],"languages":["swift"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(_:)"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/nonemptyFlatMapThrowing(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Checks that the future’s value (if any) returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":" for "},{"type":"codeVoice","code":".isEmpty"},{"type":"text","text":". If the check fails, a new future with"},{"type":"text","text":" "},{"type":"text","text":"an empty array as its value is returned. Otherwise, the provided normal "},{"type":"codeVoice","code":"flatMapThrowing()"},{"type":"text","text":" callback is"},{"type":"text","text":" "},{"type":"text","text":"invoked. The callback’s return type must be an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/nonemptyFlatMapThrowing(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"nonemptyFlatMapThrowing"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewValue"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":">"}],"url":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/nonemptyFlatMapThrowing(_:)","role":"symbol","title":"nonemptyFlatMapThrowing(_:)","abstract":[{"type":"text","text":"Checks that the future’s value (if any) returns "},{"code":"false","type":"codeVoice"},{"text":" for ","type":"text"},{"code":".isEmpty","type":"codeVoice"},{"text":". If the check fails, a new future with","type":"text"},{"text":" ","type":"text"},{"text":"an empty array as its value is returned. Otherwise, the provided normal ","type":"text"},{"code":"flatMapThrowing()","type":"codeVoice"},{"text":" callback is","type":"text"},{"text":" ","type":"text"},{"text":"invoked. The callback’s return type must be an ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"role":"symbol","title":"EventLoopFuture"}}}