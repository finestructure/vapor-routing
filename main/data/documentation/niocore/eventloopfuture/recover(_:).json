{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"recover"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"callback"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"A future that will receive the recovered value."}],"type":"paragraph"}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"Function that will receive the error value of this "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" and return"},{"type":"text","text":" "},{"type":"text","text":"a new value lifted into a new "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"callback"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Operations performed in "},{"type":"codeVoice","code":"recover"},{"type":"text","text":" should not block, or they will block the entire"},{"type":"text","text":" "},{"type":"text","text":"event loop. "},{"type":"codeVoice","code":"recover"},{"type":"text","text":" is intended for use when you have the ability to synchronously"},{"type":"text","text":" "},{"type":"text","text":"recover from errors."}],"type":"paragraph"}]}],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"When the current "},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"type":"text","text":" is in an error state, run the provided callback, which"},{"type":"text","text":" "},{"type":"text","text":"can recover from the error and return a new value of type "},{"code":"Value","type":"codeVoice"},{"type":"text","text":". The provided callback may not "},{"code":"throw","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so this function should be used when the error is always recoverable."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/recover(_:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/eventloopfuture\/recover(_:)"]}],"metadata":{"role":"symbol","modules":[{"name":"NIOCore"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"recover","kind":"identifier"},{"text":"((","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"NIOCore","externalID":"s:7NIOCore15EventLoopFutureC7recoveryACyxGxs5Error_pcF","title":"recover(_:)","symbolKind":"method","roleHeading":"Instance Method"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/recover(_:)":{"type":"topic","title":"recover(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"recover"},{"kind":"text","text":"(("},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/recover(_:)","kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture\/recover(_:)","abstract":[{"type":"text","text":"When the current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" is in an error state, run the provided callback, which"},{"text":" ","type":"text"},{"text":"can recover from the error and return a new value of type ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":". The provided callback may not "},{"type":"codeVoice","code":"throw"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so this function should be used when the error is always recoverable."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"role":"symbol","title":"EventLoopFuture"}}}