{"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/niocore\/circularbuffer\/poplast()-3y32h"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","modules":[{"name":"NIOCore"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"popLast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"symbolKind":"method","title":"popLast()","externalID":"s:7NIOCore14CircularBufferV7popLastxSgyF","roleHeading":"Instance Method","extendedModule":"NIOCore"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"popLast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The last element of the "},{"type":"codeVoice","code":"CircularBuffer"},{"type":"text","text":" if the "},{"type":"codeVoice","code":"CircularBuffer"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"text","text":"empty; otherwise, "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"Calling this method may invalidate all saved indices of this","type":"text"},{"text":" ","type":"text"},{"code":"CircularBuffer","type":"codeVoice"},{"text":". Do not rely on a previously stored index value after","type":"text"},{"text":" ","type":"text"},{"text":"altering a ","type":"text"},{"code":"CircularBuffer","type":"codeVoice"},{"text":" with any operation that can change its length.","type":"text"}],"type":"paragraph"},{"name":"Complexity","style":"note","content":[{"inlineContent":[{"text":"O(1)","type":"text"}],"type":"paragraph"}],"type":"aside"}]}],"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Removes and returns the last element of the "},{"code":"CircularBuffer","type":"codeVoice"},{"type":"text","text":"."}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/popLast()-3y32h","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/popLast()-3y32h":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"popLast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"type":"topic","abstract":[{"type":"text","text":"Removes and returns the last element of the "},{"code":"CircularBuffer","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/circularbuffer\/poplast()-3y32h","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/popLast()-3y32h","title":"popLast()","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CircularBuffer"}],"type":"topic","abstract":[{"type":"text","text":"An automatically expanding ring buffer implementation backed by a "},{"code":"ContiguousArray","type":"codeVoice"},{"type":"text","text":". Even though this implementation"},{"type":"text","text":" "},{"type":"text","text":"will automatically expand if more elements than "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" are stored, itâ€™s advantageous to prevent"},{"type":"text","text":" "},{"type":"text","text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen."}],"url":"\/documentation\/niocore\/circularbuffer","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","title":"CircularBuffer","navigatorTitle":[{"kind":"identifier","text":"CircularBuffer"}],"role":"symbol"}}}