{"variants":[{"paths":["\/documentation\/niocore\/circularbuffer\/popfirst()-6bl9t"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Removes and returns the first element of the ","type":"text"},{"type":"codeVoice","code":"CircularBuffer"},{"text":".","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/popFirst()-6bl9t"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"mutating"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"popFirst","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}]},{"content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The first element of the "},{"type":"codeVoice","code":"CircularBuffer"},{"type":"text","text":" if the "},{"type":"codeVoice","code":"CircularBuffer"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"text","text":"empty; otherwise, "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling this method may invalidate all saved indices of this"},{"type":"text","text":" "},{"type":"codeVoice","code":"CircularBuffer"},{"type":"text","text":". Do not rely on a previously stored index value after"},{"type":"text","text":" "},{"type":"text","text":"altering a "},{"type":"codeVoice","code":"CircularBuffer"},{"type":"text","text":" with any operation that can change its length."}]},{"style":"note","name":"Complexity","type":"aside","content":[{"inlineContent":[{"type":"text","text":"O(1)"}],"type":"paragraph"}]}],"kind":"content"}],"metadata":{"extendedModule":"NIOCore","role":"symbol","modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore14CircularBufferV8popFirstxSgyF","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"popFirst","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"popFirst()","symbolKind":"method"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/popFirst()-6bl9t":{"url":"\/documentation\/niocore\/circularbuffer\/popfirst()-6bl9t","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/popFirst()-6bl9t","kind":"symbol","abstract":[{"text":"Removes and returns the first element of the ","type":"text"},{"code":"CircularBuffer","type":"codeVoice"},{"text":".","type":"text"}],"title":"popFirst()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"popFirst"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CircularBuffer"}],"type":"topic","abstract":[{"type":"text","text":"An automatically expanding ring buffer implementation backed by a "},{"code":"ContiguousArray","type":"codeVoice"},{"type":"text","text":". Even though this implementation"},{"type":"text","text":" "},{"type":"text","text":"will automatically expand if more elements than "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" are stored, itâ€™s advantageous to prevent"},{"type":"text","text":" "},{"type":"text","text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen."}],"url":"\/documentation\/niocore\/circularbuffer","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","title":"CircularBuffer","navigatorTitle":[{"kind":"identifier","text":"CircularBuffer"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"kind":"symbol","url":"\/documentation\/niocore","title":"NIOCore","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[]}}}