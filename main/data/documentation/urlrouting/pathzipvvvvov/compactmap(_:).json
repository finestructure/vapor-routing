{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting","doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipVVVVOV","doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipVVVVOV\/Parser-Implementations"]]},"metadata":{"modules":[{"name":"URLRouting"}],"role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","text":"CompactMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"Parsing","title":"compactMap(_:)","roleHeading":"Instance Method","externalID":"s:7Parsing6ParserPAAE10compactMapyAA7ParsersO07CompactD0Vy_xqd__Gqd__Sg6OutputQzclF::SYNTHESIZED::s:10URLRouting13PathZipVVVVOVV"},"sections":[],"abstract":[{"text":"Returns a parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}],"variants":[{"paths":["\/documentation\/urlrouting\/pathzipvvvvov\/compactmap(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","text":"CompactMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"type":"text","text":"A parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given transformation"},{"type":"text","text":" "},{"type":"text","text":"with the output of this parser."}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"name":"transform","content":[{"inlineContent":[{"text":"A closure that accepts output of this parser as its argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns an optional value.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"This method is similar to ","type":"text"},{"type":"codeVoice","code":"Sequence.compactMap"},{"text":" in the Swift standard library, as well as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Publisher.compactMap"},{"text":" in the Combine framework.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let evenParser = Int.parser().compactMap { $0.isMultiple(of: 2) ? $0 : nil }","","var input = \"124 hello world\"[...]","try evenParser.parse(&input)  \/\/ 124","input                         \/\/ \" hello world\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This parser fails when the provided closure returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". For example, the following parser tries"},{"type":"text","text":" "},{"type":"text","text":"to convert two characters into a hex digit, but fails to do so because "},{"type":"codeVoice","code":"\"GG\""},{"type":"text","text":" is not a valid"},{"type":"text","text":" "},{"type":"text","text":"hex number:"}],"type":"paragraph"},{"syntax":"swift","code":["var input = \"GG0000\"[...]","let hex = try Prefix(2).compactMap { Int(String($0), radix: 16) }.parse(&input)","\/\/ error: failed to process \"Int\" from \"GG\"","\/\/  --> input:1:1-2","\/\/ 1 | GG0000","\/\/   | ^^"],"type":"codeListing"},{"text":"Printability","level":2,"anchor":"Printability","type":"heading"},{"inlineContent":[{"code":"Parser.compactMap","type":"codeVoice"},{"type":"text","text":" is "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" printable, as a failable transform operation to some new output"},{"type":"text","text":" "},{"type":"text","text":"does not provide enough information to perform a transformation from that new output back to"},{"type":"text","text":" "},{"type":"text","text":"the old."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are building a parser-printer, avoid uses of "},{"type":"codeVoice","code":"compactMap"},{"type":"text","text":" and instead use"},{"type":"text","text":" "},{"type":"codeVoice","code":"Parser\/map(_:)-18m9d"},{"type":"text","text":" with a failable "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":"."}],"type":"paragraph"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipVVVVOV\/compactMap(_:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipVVVVOV/compactMap(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipVVVVOV\/compactMap(_:)","url":"\/documentation\/urlrouting\/pathzipvvvvov\/compactmap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","kind":"symbol","title":"compactMap(_:)","abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" result of calling the given closure with the"},{"type":"text","text":" "},{"type":"text","text":"output of this parser."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers":{"navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"title":"Parsers","role":"symbol","url":"\/documentation\/parsing\/parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers"},"doc://co.pointfree.VaporRouting/documentation/URLRouting":{"url":"\/documentation\/urlrouting","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting","role":"collection","title":"URLRouting","kind":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/CompactMap":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/CompactMap","navigatorTitle":[{"text":"CompactMap","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/parsers\/compactmap","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given transformation with the output","type":"text"},{"text":" ","type":"text"},{"text":"of its upstream parser.","type":"text"}],"role":"symbol","title":"Parsers.CompactMap","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompactMap","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipVVVVOV/Parser-Implementations":{"kind":"article","type":"topic","title":"Parser Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/urlrouting\/pathzipvvvvov\/parser-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipVVVVOV\/Parser-Implementations"},"doc://co.pointfree.VaporRouting/documentation/URLRouting/PathZipVVVVOV":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathZipVVVVOV","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/urlrouting\/pathzipvvvvov","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/URLRouting\/PathZipVVVVOV","abstract":[],"navigatorTitle":[{"text":"PathZipVVVVOV","kind":"identifier"}],"title":"PathZipVVVVOV"}}}