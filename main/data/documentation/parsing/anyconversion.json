{"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"This conversion forwards its ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)","type":"reference"},{"text":" methods to an arbitrary","type":"text"},{"text":" ","type":"text"},{"text":"underlying conversion having the same ","type":"text"},{"code":"Input","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" types, hiding the specifics of the"},{"type":"text","text":" "},{"type":"text","text":"underlying "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"AnyConversion","type":"codeVoice"},{"text":" to wrap a conversion whose type has details you don’t want to expose across","type":"text"},{"text":" ","type":"text"},{"text":"API boundaries, such as different modules. When you use type erasure this way, you can change","type":"text"},{"text":" ","type":"text"},{"text":"the underlying conversion over time without affecting existing clients.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AnyConversion"},{"text":" can also be useful for experimenting with ad hoc conversions in a lightweight","type":"text"},{"text":" ","type":"text"},{"text":"manner. One can avoid the upfront ceremony of defining a whole new type and instead create a","type":"text"},{"text":" ","type":"text"},{"text":"“conformance” inline by specifying the ","type":"text"},{"type":"codeVoice","code":"apply"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"unapply"},{"text":" functions directly","type":"text"}]},{"syntax":"swift","code":["Prefix { $0.isNumber }","  .map(","    AnyConversion(","      apply: { Int(String($0)) },","      unapply: { String($0)[...] {","    )","  )","","\/\/ vs.","","struct SubstringToInt: Conversion {","  func apply(_ input: Substring) throws -> Int {","    guard let int = Int(String(input)) else {","      struct ConvertingError: Error {}","      throw ConvertingError()","    }","    return int","  }","","  func unapply(_ output: Int) -> Substring {","    String(output)[...]","  }","}","","Prefix { $0.isNumber }","  .map(SubstringToInt())"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If performance is a consideration of your parser-printer, you should avoid "},{"type":"codeVoice","code":"AnyConversion"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"instead create custom types that conform to the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","isActive":true},{"type":"text","text":" protocol."}]}]}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"roleHeading":"Structure","title":"AnyConversion","symbolKind":"struct","modules":[{"name":"Parsing"}],"navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"role":"symbol","externalID":"s:7Parsing13AnyConversionV"},"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations"]}],"variants":[{"paths":["\/documentation\/parsing\/anyconversion"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","title":"Parsing","url":"\/documentation\/parsing","role":"collection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/apply(_:)":{"title":"apply(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Attempts to transform an input into an output."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"apply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"}],"url":"\/documentation\/parsing\/anyconversion\/apply(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(_:)","abstract":[{"text":"Creates a type-erasing conversion to wrap the given conversion.","type":"text"}],"role":"symbol","type":"topic","title":"init(_:)","url":"\/documentation\/parsing\/anyconversion\/init(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/unapply(_:)":{"title":"unapply(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Attempts to transform an output back into an input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"unapply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Input"}],"url":"\/documentation\/parsing\/anyconversion\/unapply(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/init(apply:unapply:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?)"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)","abstract":[{"text":"Creates a conversion that wraps the given closures in its ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)"},{"text":" ","type":"text"},{"type":"text","text":"methods, throwing an error when "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" is returned."}],"role":"symbol","type":"topic","title":"init(apply:unapply:)","url":"\/documentation\/parsing\/anyconversion\/init(apply:unapply:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/Conversion-Implementations":{"title":"Conversion Implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations","url":"\/documentation\/parsing\/anyconversion\/conversion-implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion":{"title":"AnyConversion","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A type-erased "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","isActive":true},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"url":"\/documentation\/parsing\/anyconversion","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversion":{"navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"title":"Conversion","role":"symbol","url":"\/documentation\/parsing\/conversion","abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value into an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value back into an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion"}}}