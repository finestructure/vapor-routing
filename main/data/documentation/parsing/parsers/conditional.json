{"metadata":{"modules":[{"name":"Parsing"}],"extendedModule":"Parsing","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"symbolKind":"enum","externalID":"s:7Parsing7ParsersO11ConditionalO","roleHeading":"Enumeration","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"title":"Parsers.Conditional","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers"]]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/first(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/second(_:)"],"title":"Enumeration Cases"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/ParserPrinter-Implementations"],"title":"Default Implementations","generated":true}],"sections":[],"kind":"symbol","relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/conditional"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"First"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Second"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"This parser is useful for situations where you want to run one of two different parsers based on","type":"text"},{"text":" ","type":"text"},{"text":"a condition, which typically would force you to perform ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/eraseToAnyParser()","isActive":true,"type":"reference"},{"text":" and incur","type":"text"},{"text":" ","type":"text"},{"text":"a performance penalty.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, you can use this parser in a "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/flatMap(_:)","type":"reference"},{"type":"text","text":" operation to use the parsed"},{"type":"text","text":" "},{"type":"text","text":"output to determine what parser to run next:"}],"type":"paragraph"},{"code":["versionParser.flatMap { version in","  version == \"2.0\"","    ? Conditional.first(V2Parser())","    : Conditional.second(LegacyParser())","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You won’t typically construct this parser directly, but instead will use standard ","type":"text"},{"type":"codeVoice","code":"if"},{"text":"-","type":"text"},{"type":"codeVoice","code":"else"},{"text":" ","type":"text"},{"text":"statements in a parser builder to automatically build conditional parsers:","type":"text"}],"type":"paragraph"},{"code":["versionParser.flatMap { version in","  if version == \"2.0\" {","    V2Parser()","  } else {","    LegacyParser()","  }","}"],"type":"codeListing","syntax":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"A parser that can parse output from two types of parsers.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/Conditional/first(_:)":{"role":"symbol","abstract":[],"kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"first","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/first(_:)","title":"Parsers.Conditional.first(_:)","url":"\/documentation\/parsing\/parsers\/conditional\/first(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/Conditional/second(_:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/second(_:)","title":"Parsers.Conditional.second(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"second","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/parsing\/parsers\/conditional\/second(_:)","role":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/Conditional/parse(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"title":"parse(_:)","url":"\/documentation\/parsing\/parsers\/conditional\/parse(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","title":"Parsing","url":"\/documentation\/parsing","role":"collection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/Conditional":{"abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}],"navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parsers\/conditional","title":"Parsers.Conditional"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/Conditional/ParserPrinter-Implementations":{"url":"\/documentation\/parsing\/parsers\/conditional\/parserprinter-implementations","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/ParserPrinter-Implementations","role":"collectionGroup","abstract":[],"title":"ParserPrinter Implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers":{"navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"title":"Parsers","role":"symbol","url":"\/documentation\/parsing\/parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/flatMap(_:)":{"url":"\/documentation\/parsing\/parser\/flatmap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewParser"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewParser"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO7FlatMapV","text":"FlatMap"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/flatMap(_:)","kind":"symbol","type":"topic","title":"flatMap(_:)","role":"symbol","abstract":[{"type":"text","text":"Returns a parser that transforms the output of this parser into a new parser."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/eraseToAnyParser()":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/eraseToAnyParser()","title":"eraseToAnyParser()","role":"symbol","abstract":[{"type":"text","text":"Wraps this parser with a type eraser."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eraseToAnyParser","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parser\/erasetoanyparser()"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"First"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":", "},{"type":"codeVoice","code":"Second"},{"type":"text","text":" conforms to "},{"code":"ParserPrinter","type":"codeVoice"},{"text":", ","type":"text"},{"code":"First.Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Second.Input","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"First.Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Second.Output","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","role":"symbol","title":"ParserPrinter","abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"url":"\/documentation\/parsing\/parserprinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/Conditional/Parser-Implementations":{"role":"collectionGroup","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/Conditional\/Parser-Implementations","kind":"article","type":"topic","url":"\/documentation\/parsing\/parsers\/conditional\/parser-implementations","abstract":[]}}}