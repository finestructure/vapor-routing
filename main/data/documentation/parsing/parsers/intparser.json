{"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser"},"metadata":{"modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IntParser","kind":"identifier"}],"extendedModule":"Parsing","symbolKind":"struct","roleHeading":"Structure","title":"Parsers.IntParser","role":"symbol","externalID":"s:7Parsing7ParsersO9IntParserV","navigatorTitle":[{"text":"IntParser","kind":"identifier"}]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/init(radix:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/radix"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/ParserPrinter-Implementations"]}],"abstract":[{"type":"text","text":"A parser that consumes an integer (with an optional leading "},{"type":"codeVoice","code":"+"},{"type":"text","text":" or "},{"type":"codeVoice","code":"-"},{"text":" sign for signed integer","type":"text"},{"text":" ","type":"text"},{"text":"types) from the beginning of a collection of UTF8 code units.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IntParser"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s17FixedWidthIntegerP","kind":"typeIdentifier","text":"FixedWidthInteger"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"preciseIdentifier":"s:s4UTF8a","kind":"typeIdentifier","text":"UTF8"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","kind":"typeIdentifier","text":"CodeUnit"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"You will not typically need to interact with this type directly. Instead you will usually use","type":"text"},{"text":" ","type":"text"},{"text":"the static ","type":"text"},{"type":"codeVoice","code":"parser()"},{"text":" method on the ","type":"text"},{"type":"codeVoice","code":"FixedWidthInteger"},{"text":" of your choice, e.g. ","type":"text"},{"type":"codeVoice","code":"Int.parser()"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"UInt8.parser()"},{"text":", etc., all of which construct this type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"text","text":"doc:Int"},{"type":"text","text":" for more information about this parser."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/parsing\/parsers\/intparser"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/init(radix:)":{"url":"\/documentation\/parsing\/parsers\/intparser\/init(radix:)","abstract":[],"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"radix","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","title":"init(radix:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/init(radix:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","title":"Parsing","url":"\/documentation\/parsing","role":"collection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/ParserPrinter-Implementations":{"type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/ParserPrinter-Implementations","url":"\/documentation\/parsing\/parsers\/intparser\/parserprinter-implementations","abstract":[],"role":"collectionGroup","title":"ParserPrinter Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser":{"title":"Parsers.IntParser","abstract":[{"text":"A parser that consumes an integer (with an optional leading ","type":"text"},{"code":"+","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"-","type":"codeVoice"},{"text":" sign for signed integer","type":"text"},{"text":" ","type":"text"},{"text":"types) from the beginning of a collection of UTF8 code units.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IntParser","kind":"identifier"}],"navigatorTitle":[{"text":"IntParser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser","type":"topic","role":"symbol","url":"\/documentation\/parsing\/parsers\/intparser","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/radix":{"kind":"symbol","title":"radix","type":"topic","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"radix"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"abstract":[{"type":"text","text":"The radix, or base, to use for converting text to an integer value."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/radix","url":"\/documentation\/parsing\/parsers\/intparser\/radix"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers":{"navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"title":"Parsers","role":"symbol","url":"\/documentation\/parsing\/parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/parse(_:)":{"kind":"symbol","role":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"url":"\/documentation\/parsing\/parsers\/intparser\/parse(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"title":"parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/Parser-Implementations":{"title":"Parser Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/parsing\/parsers\/intparser\/parser-implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Input.SubSequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"FixedWidthInteger","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Input.Element","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"UTF8.CodeUnit","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","url":"\/documentation\/parsing\/parserprinter","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}]}}}