{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While not very useful on its own, the "},{"type":"codeVoice","code":"Always"},{"type":"text","text":" parser can be helpful when combined with other"},{"type":"text","text":" "},{"type":"text","text":"parsers or operators."}]},{"type":"paragraph","inlineContent":[{"text":"When its ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":", it can be used as a “no-op” parser of sorts and be plugged into","type":"text"},{"text":" ","type":"text"},{"text":"other parser operations. For example, the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many"},{"text":" parser can be configured with separator and","type":"text"},{"text":" ","type":"text"},{"text":"terminator parsers:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  End()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But also exposes initializers that omit these parsers when there is no separator or terminator"},{"type":"text","text":" "},{"type":"text","text":"to be parsed:"}]},{"syntax":"swift","type":"codeListing","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To support this, "},{"type":"codeVoice","code":"Many"},{"type":"text","text":" plugs "},{"type":"codeVoice","code":"Always<Input, Void>"},{"type":"text","text":" into each omitted parser. As a simplified"},{"type":"text","text":" "},{"type":"text","text":"example:"}]},{"syntax":"swift","type":"codeListing","code":["struct Many<Element: Parser, Separator: Parser, Terminator: Parser>: Parser","where Separator.Input == Element.Input, Terminator.Input == Element.Input {","  ...","}","","extension Many where Separator == Always<Input, Void>, Terminator == Always<Input, Void> {","  init(@ParserBuilder element: () -> Element) {","    self.element = element()","    self.separator = Always(())","    self.terminator = Always(())","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means the previous example is equivalent to:"}]},{"syntax":"swift","type":"codeListing","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","} separator: {","  Always(())","} terminator: {","  Always(())","}"]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"Always"},{"type":"text","text":" can be used as the last alternative of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf"},{"type":"text","text":" to specify a default"},{"type":"text","text":" "},{"type":"text","text":"output, the resulting parser will be throwing. Instead, prefer "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/replaceError(with:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns a non-throwing parser."}],"type":"paragraph"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/parsing\/always"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/output"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/parse(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/print(_:into:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations"],"title":"Default Implementations","generated":true}],"metadata":{"title":"Always","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"symbolKind":"struct","externalID":"s:7Parsing6AlwaysV","role":"symbol","navigatorTitle":[{"text":"Always","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"Parsing"}]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","role":"symbol","url":"\/documentation\/parsing\/parserprinter","abstract":[{"text":"A ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/ParserPrinter-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations","type":"topic","kind":"article","abstract":[],"url":"\/documentation\/parsing\/always\/parserprinter-implementations","title":"ParserPrinter Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/output":{"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/output","title":"output","role":"symbol","type":"topic","url":"\/documentation\/parsing\/always\/output","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/replaceError(with:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"url":"\/documentation\/parsing\/parser\/replaceerror(with:)","role":"symbol","title":"replaceError(with:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Many":{"navigatorTitle":[{"kind":"identifier","text":"Many"}],"type":"topic","url":"\/documentation\/parsing\/many","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","title":"Many","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/init(_:)-56hez":{"title":"init(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/always\/init(_:)-56hez","abstract":[],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf":{"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/oneof","type":"topic","title":"OneOf","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/parse(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"}],"url":"\/documentation\/parsing\/always\/parse(_:)","type":"topic","title":"parse(_:)","kind":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/print(_:into:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":")"}],"title":"print(_:into:)","url":"\/documentation\/parsing\/always\/print(_:into:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/print(_:into:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/init(_:)-2spg2":{"title":"init(_:)","abstract":[],"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/always\/init(_:)-2spg2","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/init(_:)-fdjh":{"kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/parsing\/always\/init(_:)-fdjh","title":"init(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always","type":"topic","kind":"symbol","abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"url":"\/documentation\/parsing\/always","title":"Always","navigatorTitle":[{"kind":"identifier","text":"Always"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","title":"Parsing","url":"\/documentation\/parsing","role":"collection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/Parser-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/Parser-Implementations","type":"topic","abstract":[],"role":"collectionGroup","url":"\/documentation\/parsing\/always\/parser-implementations","title":"Parser Implementations","kind":"article"}}}