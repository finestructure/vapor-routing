{"abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}],"modules":[{"name":"Parsing"}],"symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"End"}],"role":"symbol","roleHeading":"Structure","externalID":"s:7Parsing3EndV","title":"End"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"kind":"relationships","title":"Conforms To"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful as a final parser in a long sequence of parsers to guarantee that all input has been"},{"type":"text","text":" "},{"type":"text","text":"consumed, especially as "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","type":"reference","isActive":true},{"type":"text","text":"’s terminal parser."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser will fail if there are input elements that have not been consumed:"}]},{"syntax":"swift","type":"codeListing","code":["input = \"Hello, Blob!!\"","try parser.parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:13","\/\/ 1 | Hello, Blob!!","\/\/   |             ^ expected end of input"]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser is automatically inserted when you invoke the non-incremental"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq","isActive":true,"type":"reference"},{"type":"text","text":" methods."}]}],"style":"note"}]}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-2egll","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-7gmzt","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-8lvil"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/parse(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/print(_:into:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/ParserPrinter-Implementations"],"title":"Default Implementations"}],"variants":[{"paths":["\/documentation\/parsing\/end"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/End/print(_:into:)":{"url":"\/documentation\/parsing\/end\/print(_:into:)","title":"print(_:into:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/print(_:into:)","abstract":[{"text":"Attempts to print a well-structured piece of data into something more nebulous.","type":"text"}],"role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"((), "},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-6h1d0":{"kind":"symbol","title":"parse(_:)","type":"topic","url":"\/documentation\/parsing\/parser\/parse(_:)-6h1d0","abstract":[{"type":"text","text":"Parse a collection into an output using a parser that works on the collection’s "},{"type":"codeVoice","code":"SubSequence"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method is more ergnomic to use than "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true,"type":"reference"},{"text":" because it accepts a","type":"text"},{"text":" ","type":"text"},{"text":"collection directly rather than its subsequence, and the input does not need to be ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","title":"Parsing","url":"\/documentation\/parsing","role":"collection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-76tcw":{"kind":"symbol","defaultImplementations":3,"title":"parse(_:)","type":"topic","url":"\/documentation\/parsing\/parser\/parse(_:)-76tcw","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"required":true,"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/End":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End","url":"\/documentation\/parsing\/end","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}],"title":"End","navigatorTitle":[{"kind":"identifier","text":"End"}],"abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/ParserPrinter-Implementations":{"abstract":[],"type":"topic","kind":"article","url":"\/documentation\/parsing\/end\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-2wzcq":{"title":"parse(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"abstract":[{"type":"text","text":"Parse a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" into an output using a UTF-8 parser. This method is more ergnomic to use"},{"type":"text","text":" "},{"text":"than ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"},{"text":" because it accepts a plain string rather than a collection of","type":"text"},{"text":" ","type":"text"},{"text":"UTF-8 code units, and the input does not need to be ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-2wzcq"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-7gmzt":{"url":"\/documentation\/parsing\/end\/init()-7gmzt","kind":"symbol","title":"init()","role":"symbol","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-7gmzt"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","role":"symbol","url":"\/documentation\/parsing\/parserprinter","abstract":[{"text":"A ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/Parser-Implementations":{"title":"Parser Implementations","url":"\/documentation\/parsing\/end\/parser-implementations","kind":"article","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/Parser-Implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-2egll":{"title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring.UTF8View","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-2egll","url":"\/documentation\/parsing\/end\/init()-2egll","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Many":{"navigatorTitle":[{"kind":"identifier","text":"Many"}],"type":"topic","url":"\/documentation\/parsing\/many","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","title":"Many","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/parse(_:)":{"title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"kind":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/parse(_:)","url":"\/documentation\/parsing\/end\/parse(_:)","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-8lvil":{"title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-8lvil","url":"\/documentation\/parsing\/end\/init()-8lvil","type":"topic","role":"symbol"}}}