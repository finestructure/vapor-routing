{"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prefixupto"]}],"metadata":{"symbolKind":"struct","externalID":"s:7Parsing10PrefixUpToV","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}],"title":"PrefixUpTo","navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"modules":[{"name":"Parsing"}],"roleHeading":"Structure"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixUpTo"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"text":"This parser is named after ","type":"text"},{"type":"codeVoice","code":"Sequence.prefix(upTo:)"},{"text":", and uses similar logic under the hood to","type":"text"},{"text":" ","type":"text"},{"text":"consume and return input up to a particular subsequence.","type":"text"}],"type":"paragraph"},{"code":["let lineParser = PrefixUpTo(\"\\n\")","","var input = \"Hello\\nworld\\n\"[...]","try line.parse(&input)  \/\/ \"Hello\"","input                   \/\/ \"\\nworld\\n\""],"type":"codeListing","syntax":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo"},"abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:)-7b2he","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:)-8sywj","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:)-9kyot","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:by:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/areEquivalent","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/possibleMatch"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/ParserPrinter-Implementations"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","kind":"article","url":"\/documentation\/parsing\/prefixupto\/parserprinter-implementations","type":"topic","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/ParserPrinter-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixUpTo"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/prefixupto","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"PrefixUpTo"}],"title":"PrefixUpTo"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/possibleMatch":{"role":"symbol","kind":"symbol","abstract":[],"title":"possibleMatch","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/possibleMatch","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"possibleMatch"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Input"}],"url":"\/documentation\/parsing\/prefixupto\/possiblematch"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/Parser-Implementations":{"type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/parsing\/prefixupto\/parser-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/Parser-Implementations","abstract":[],"title":"Parser Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","title":"Parsing","url":"\/documentation\/parsing","role":"collection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/init(_:)-9kyot":{"conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/parsing\/prefixupto\/init(_:)-9kyot","kind":"symbol","title":"init(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:)-9kyot","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":".","kind":"text"},{"text":"UTF8View","kind":"typeIdentifier","preciseIdentifier":"s:SS8UTF8ViewV"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/init(_:)-8sywj":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:)-8sywj","title":"init(_:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Input"},{"text":")","kind":"text"}],"abstract":[],"url":"\/documentation\/parsing\/prefixupto\/init(_:)-8sywj","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Input.SubSequence","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Input.Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/parse(_:)":{"url":"\/documentation\/parsing\/prefixupto\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/parse(_:)","type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/init(_:by:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[],"title":"init(_:by:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:by:)","url":"\/documentation\/parsing\/prefixupto\/init(_:by:)","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/init(_:)-7b2he":{"conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/parsing\/prefixupto\/init(_:)-7b2he","kind":"symbol","title":"init(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/init(_:)-7b2he","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"url":"\/documentation\/parsing\/parserprinter","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","abstract":[{"text":"A ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"role":"symbol","title":"ParserPrinter","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Input.SubSequence","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrefixUpTo/areEquivalent":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrefixUpTo\/areEquivalent","title":"areEquivalent","type":"topic","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"areEquivalent"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"abstract":[],"url":"\/documentation\/parsing\/prefixupto\/areequivalent","kind":"symbol","role":"symbol"}}}