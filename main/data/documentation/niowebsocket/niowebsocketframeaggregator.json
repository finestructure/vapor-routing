{"metadata":{"role":"symbol","roleHeading":"Class","navigatorTitle":[{"kind":"identifier","text":"NIOWebSocketFrameAggregator"}],"externalID":"s:12NIOWebSocket0aB15FrameAggregatorC","symbolKind":"class","title":"NIOWebSocketFrameAggregator","modules":[{"name":"NIOWebSocket"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOWebSocketFrameAggregator"}]},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/init(minNonFinalFragmentSize:maxAccumulatedFrameCount:maxAccumulatedFrameSize:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/channelRead(context:data:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/InboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/InboundOut"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/Error"],"title":"Enumerations"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/ChannelHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/ChannelInboundHandler-Implementations"],"generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"variants":[{"paths":["\/documentation\/niowebsocket\/niowebsocketframeaggregator"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOWebSocketFrameAggregator","kind":"identifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"code":".ping","type":"codeVoice"},{"text":", ","type":"text"},{"code":".pong","type":"codeVoice"},{"text":", ","type":"text"},{"code":".closeConnection","type":"codeVoice"},{"text":" frames are forwarded during frame aggregation","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"abstract":[{"code":"NIOWebSocketFrameAggregator","type":"codeVoice"},{"text":" buffers inbound fragmented ","type":"text"},{"code":"WebSocketFrame","type":"codeVoice"},{"text":"’s and aggregates them into a single ","type":"text"},{"code":"WebSocketFrame","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"It guarantees that a ","type":"text"},{"code":"WebSocketFrame","type":"codeVoice"},{"text":" with an ","type":"text"},{"code":"opcode","type":"codeVoice"},{"text":" of ","type":"text"},{"code":".continuation","type":"codeVoice"},{"text":" is never forwarded.","type":"text"},{"text":" ","type":"text"},{"text":"Frames which are not fragmented are just forwarded without any processing.","type":"text"},{"text":" ","type":"text"},{"text":"Fragmented frames are unmasked, concatenated and forwarded as a new ","type":"text"},{"code":"WebSocketFrame","type":"codeVoice"},{"text":" which is either a ","type":"text"},{"code":".binary","type":"codeVoice"},{"text":" or ","type":"text"},{"code":".text","type":"codeVoice"},{"text":" frame.","type":"text"},{"text":" ","type":"text"},{"code":"extensionData","type":"codeVoice"},{"text":", ","type":"text"},{"code":"rsv1","type":"codeVoice"},{"text":", ","type":"text"},{"code":"rsv2","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"rsv3","type":"codeVoice"},{"text":" are lost if a frame is fragmented because they cannot be concatenated.","type":"text"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOWebSocketFrameAggregator"}],"kind":"symbol","title":"NIOWebSocketFrameAggregator","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOWebSocketFrameAggregator"}],"abstract":[{"code":"NIOWebSocketFrameAggregator","type":"codeVoice"},{"text":" buffers inbound fragmented ","type":"text"},{"code":"WebSocketFrame","type":"codeVoice"},{"text":"’s and aggregates them into a single ","type":"text"},{"code":"WebSocketFrame","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It guarantees that a "},{"type":"codeVoice","code":"WebSocketFrame"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"opcode"},{"type":"text","text":" of "},{"type":"codeVoice","code":".continuation"},{"type":"text","text":" is never forwarded."},{"type":"text","text":" "},{"type":"text","text":"Frames which are not fragmented are just forwarded without any processing."},{"type":"text","text":" "},{"type":"text","text":"Fragmented frames are unmasked, concatenated and forwarded as a new "},{"type":"codeVoice","code":"WebSocketFrame"},{"text":" which is either a ","type":"text"},{"type":"codeVoice","code":".binary"},{"text":" or ","type":"text"},{"type":"codeVoice","code":".text"},{"text":" frame.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"extensionData"},{"text":", ","type":"text"},{"type":"codeVoice","code":"rsv1"},{"text":", ","type":"text"},{"type":"codeVoice","code":"rsv2"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"rsv3"},{"text":" are lost if a frame is fragmented because they cannot be concatenated.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator","type":"topic","url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator/InboundIn":{"navigatorTitle":[{"text":"InboundIn","kind":"identifier"}],"title":"NIOWebSocketFrameAggregator.InboundIn","kind":"symbol","url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/inboundin","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InboundIn","kind":"identifier"}],"type":"topic","abstract":[{"text":"The type of the inbound data which is wrapped in ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/InboundIn","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator/ChannelInboundHandler-Implementations":{"title":"ChannelInboundHandler Implementations","kind":"article","url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/channelinboundhandler-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/ChannelInboundHandler-Implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator/init(minNonFinalFragmentSize:maxAccumulatedFrameCount:maxAccumulatedFrameSize:)":{"title":"init(minNonFinalFragmentSize:maxAccumulatedFrameCount:maxAccumulatedFrameSize:)","kind":"symbol","url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/init(minnonfinalfragmentsize:maxaccumulatedframecount:maxaccumulatedframesize:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minNonFinalFragmentSize","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxAccumulatedFrameCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxAccumulatedFrameSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Configures a ","type":"text"},{"code":"NIOWebSocketFrameAggregator","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/init(minNonFinalFragmentSize:maxAccumulatedFrameCount:maxAccumulatedFrameSize:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelInboundHandler","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","role":"symbol","abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"text":" which handles inbound I\/O events for a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"title":"ChannelInboundHandler","navigatorTitle":[{"text":"ChannelInboundHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/channelinboundhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator/channelRead(context:data:)":{"url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/channelread(context:data:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/channelRead(context:data:)","abstract":[{"type":"text","text":"Called when some data has been read from the remote peer."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"channelRead","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":")"}],"type":"topic","title":"channelRead(context:data:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelHandler","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","role":"symbol","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"text":"never","type":"text"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}],"title":"ChannelHandler","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"url":"\/documentation\/niocore\/channelhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator/InboundOut":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundOut"}],"kind":"symbol","title":"NIOWebSocketFrameAggregator.InboundOut","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"InboundOut"}],"abstract":[{"text":"The type of the inbound data which will be forwarded to the next ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/InboundOut","type":"topic","url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/inboundout"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator/Error":{"url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/Error","abstract":[],"role":"symbol","navigatorTitle":[{"text":"Error","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"Error","kind":"identifier"}],"type":"topic","title":"NIOWebSocketFrameAggregator.Error","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/NIOWebSocketFrameAggregator/ChannelHandler-Implementations":{"url":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/channelhandler-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/NIOWebSocketFrameAggregator\/ChannelHandler-Implementations","abstract":[],"role":"collectionGroup","type":"topic","title":"ChannelHandler Implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket":{"title":"NIOWebSocket","abstract":[],"type":"topic","role":"collection","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket","url":"\/documentation\/niowebsocket"}}}