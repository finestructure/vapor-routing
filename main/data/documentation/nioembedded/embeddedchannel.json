{"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/SynchronousOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/WrongTypeError"],"title":"Structures"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/init(handler:loop:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/init(handlers:loop:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/allocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/closeFuture","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/embeddedEventLoop","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/eventLoop","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/isActive","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/isWritable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/localAddress","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/parent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/pipeline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/remoteAddress"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/bind(to:promise:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/connect(to:promise:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish()","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/getOption(_:)-6dgj0","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readInbound(as:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readOutbound(as:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/setOption(_:value:)-5j5cw","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/throwIfErrorCaught()","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/writeInbound(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/writeOutbound(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/BufferState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState"],"title":"Enumerations"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/Channel-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/ChannelOutboundInvoker-Implementations"],"generated":true,"title":"Default Implementations"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded"]]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"metadata":{"symbolKind":"class","roleHeading":"Class","role":"symbol","modules":[{"name":"NIOEmbedded"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}],"title":"EmbeddedChannel","externalID":"s:11NIOEmbedded15EmbeddedChannelC"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"Please remember to call ","type":"text"},{"type":"codeVoice","code":"finish()"},{"text":" when you are no longer using this","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To feed events through an "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" use"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel.writeInbound"},{"type":"text","text":" which accepts data of any type. It will then"},{"type":"text","text":" "},{"type":"text","text":"forward that data through the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" and the subsequent"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" will receive it through the usual "},{"type":"codeVoice","code":"channelRead"},{"type":"text","text":" "},{"type":"text","text":"event. The user is responsible for making sure the first"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" expects data of that type."}],"type":"paragraph"},{"inlineContent":[{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":" automatically collects arriving outbound data and makes it"},{"type":"text","text":" "},{"type":"text","text":"available one-by-one through "},{"code":"readOutbound","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" is currently only compatible with","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EmbeddedEventLoop"},{"text":"s and cannot be used with ","type":"text"},{"type":"codeVoice","code":"SelectableEventLoop"},{"text":"s from","type":"text"},{"text":" ","type":"text"},{"text":"for example ","type":"text"},{"type":"codeVoice","code":"MultiThreadedEventLoopGroup"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside"},{"style":"warning","content":[{"inlineContent":[{"text":"Unlike other ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s, ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"is not thread-safe"}],"type":"strong"},{"text":". This","type":"text"},{"text":" ","type":"text"},{"text":"is because it is intended to be run in the thread that instantiated it. Users are","type":"text"},{"text":" ","type":"text"},{"text":"responsible for ensuring they never call into an ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" in an","type":"text"},{"text":" ","type":"text"},{"text":"unsynchronized fashion. ","type":"text"},{"code":"EmbeddedEventLoop","type":"codeVoice"},{"text":"s notes also apply as","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" uses an ","type":"text"},{"code":"EmbeddedEventLoop","type":"codeVoice"},{"text":" as its ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"abstract":[{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is in unit tests when you want to feed the inbound events","type":"text"},{"text":" ","type":"text"},{"text":"and check the outbound events manually.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioembedded\/embeddedchannel"]}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/embeddedEventLoop":{"title":"embeddedEventLoop","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/embeddedEventLoop","url":"\/documentation\/nioembedded\/embeddedchannel\/embeddedeventloop","type":"topic","abstract":[{"type":"text","text":"Returns the "},{"type":"codeVoice","code":"EmbeddedEventLoop"},{"type":"text","text":" that this "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" uses. This will return the same instance as"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel.eventLoop"},{"type":"text","text":" but as the concrete "},{"type":"codeVoice","code":"EmbeddedEventLoop"},{"type":"text","text":" rather than as "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" existential."}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"embeddedEventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded17EmbeddedEventLoopC","text":"EmbeddedEventLoop","kind":"typeIdentifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/WrongTypeError":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WrongTypeError","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"WrongTypeError","kind":"identifier"}],"title":"EmbeddedChannel.WrongTypeError","abstract":[{"code":"WrongTypeError","type":"codeVoice"},{"type":"text","text":" is throws if you use "},{"type":"codeVoice","code":"readInbound"},{"type":"text","text":" or "},{"type":"codeVoice","code":"readOutbound"},{"type":"text","text":" and request a certain type but the first"},{"type":"text","text":" "},{"type":"text","text":"item in the respective buffer is of a different type."}],"type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/WrongTypeError","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/ChannelOutboundInvoker-Implementations":{"kind":"article","title":"ChannelOutboundInvoker Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/ChannelOutboundInvoker-Implementations","type":"topic","abstract":[],"url":"\/documentation\/nioembedded\/embeddedchannel\/channeloutboundinvoker-implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/bind(to:promise:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/bind(to:promise:)","type":"topic","title":"bind(to:promise:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SocketAddress","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13SocketAddressO"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopPromise","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">?)","kind":"text"}],"abstract":[{"text":"Fires the (outbound) ","type":"text"},{"code":"bind","type":"codeVoice"},{"text":" event through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":". If the event hits the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" which","type":"text"},{"text":" ","type":"text"},{"text":"happens when it travels the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" all the way to the front, this will also set the","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"localAddress","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/bind(to:promise:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"type":"topic","kind":"symbol","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actual IO nor has a proper eventing mechanism. The prime use-case for"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"type":"text","text":"and check the outbound events manually."}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}],"url":"\/documentation\/nioembedded\/embeddedchannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","title":"EmbeddedChannel","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/Channel-Implementations":{"url":"\/documentation\/nioembedded\/embeddedchannel\/channel-implementations","kind":"article","abstract":[],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/Channel-Implementations","title":"Channel Implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/isActive":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/isActive","type":"topic","title":"isActive","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isActive","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is ‘active’.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/isactive"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"url":"\/documentation\/niocore\/channel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"title":"Channel"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/getOption(_:)-6dgj0":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/getOption(_:)-6dgj0","type":"topic","title":"getOption(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"getOption","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/getoption(_:)-6dgj0"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/setOption(_:value:)-5j5cw":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/setOption(_:value:)-5j5cw","type":"topic","title":"setOption(_:value:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setOption","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/setoption(_:value:)-5j5cw"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"kind":"symbol","url":"\/documentation\/nioembedded","title":"NIOEmbedded","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundInvoker":{"abstract":[{"text":"Allows users to invoke an “outbound” operation related to a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that will flow through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" until","type":"text"},{"text":" ","type":"text"},{"text":"it will finally be executed by the the ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"type":"text","text":" implementation."}],"navigatorTitle":[{"text":"ChannelOutboundInvoker","kind":"identifier"}],"url":"\/documentation\/niocore\/channeloutboundinvoker","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","title":"ChannelOutboundInvoker","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ChannelOutboundInvoker","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/eventLoop":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/eventLoop","type":"topic","title":"eventLoop","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/eventloop"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/init(handlers:loop:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/init(handlers:loop:)","type":"topic","title":"init(handlers:loop:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"handlers","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"ChannelHandler","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore14ChannelHandlerP"},{"text":"], ","kind":"text"},{"text":"loop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EmbeddedEventLoop","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded17EmbeddedEventLoopC"},{"text":")","kind":"text"}],"abstract":[{"text":"Create a new instance.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/init(handlers:loop:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/finish(acceptAlreadyClosed:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)","type":"topic","title":"finish(acceptAlreadyClosed:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"acceptAlreadyClosed","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"EmbeddedChannel","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"text":".","kind":"text"},{"text":"LeftOverState","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"abstract":[{"text":"Synchronously closes the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/readInbound(as:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readInbound(as:)","type":"topic","title":"readInbound(as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readInbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"If available, this method reads one element of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" out of the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":"’s inbound buffer. If the","type":"text"},{"text":" ","type":"text"},{"text":"first element was of a different type than requested, ","type":"text"},{"code":"EmbeddedChannel.WrongTypeError","type":"codeVoice"},{"text":" will be thrown, if there","type":"text"},{"text":" ","type":"text"},{"text":"are no elements in the outbound buffer, ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" will be returned."}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/readinbound(as:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/writeInbound(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/writeInbound(_:)","type":"topic","title":"writeInbound(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writeInbound"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"EmbeddedChannel","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BufferState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC11BufferStateO"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/writeinbound(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/connect(to:promise:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopPromise","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">?)","kind":"text"}],"kind":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/connect(to:promise:)","role":"symbol","abstract":[{"type":"text","text":"Fires the (outbound) "},{"code":"connect","type":"codeVoice"},{"type":"text","text":" event through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"text":". If the event hits the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" ","type":"text"},{"text":"which happens when it travels the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" all the way to the front, this will also set the","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"remoteAddress","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/connect(to:promise:)","title":"connect(to:promise:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/closeFuture":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/closeFuture","type":"topic","title":"closeFuture","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"closeFuture"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/closefuture"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/init(handler:loop:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/init(handler:loop:)","type":"topic","title":"init(handler:loop:)","fragments":[{"kind":"keyword","text":"convenience"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ChannelHandler","preciseIdentifier":"s:7NIOCore14ChannelHandlerP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"loop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EmbeddedEventLoop","preciseIdentifier":"s:11NIOEmbedded17EmbeddedEventLoopC"},{"kind":"text","text":")"}],"abstract":[{"text":"Create a new instance.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/init(handler:loop:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/pipeline":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/pipeline","type":"topic","title":"pipeline","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"pipeline","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ChannelPipeline","preciseIdentifier":"s:7NIOCore15ChannelPipelineC","kind":"typeIdentifier"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/pipeline"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/throwIfErrorCaught()":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/throwIfErrorCaught()","type":"topic","title":"throwIfErrorCaught()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throwIfErrorCaught","kind":"identifier"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"throws"}],"abstract":[{"text":"This method will throw the error that is stored in the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" if any.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/throwiferrorcaught()"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/localAddress":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/localAddress","type":"topic","title":"localAddress","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"localAddress","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/localaddress"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/writeOutbound(_:)":{"type":"topic","kind":"symbol","abstract":[],"url":"\/documentation\/nioembedded\/embeddedchannel\/writeoutbound(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/writeOutbound(_:)","title":"writeOutbound(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"writeOutbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"EmbeddedChannel","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"text":".","kind":"text"},{"text":"BufferState","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC11BufferStateO"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/BufferState":{"type":"topic","kind":"symbol","abstract":[{"type":"codeVoice","code":"BufferState"},{"type":"text","text":" represents the state of either the inbound, or the outbound "},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" buffer. These","type":"text"},{"text":" ","type":"text"},{"text":"buffers contain data that travelled the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" all the way.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"BufferState"}],"url":"\/documentation\/nioembedded\/embeddedchannel\/bufferstate","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/BufferState","title":"EmbeddedChannel.BufferState","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BufferState"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/parent":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/parent","type":"topic","title":"parent","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parent","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":"?"}],"abstract":[{"type":"codeVoice","code":"nil"},{"text":" because ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":"s don’t have parents.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/parent"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/allocator":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/allocator","type":"topic","title":"allocator","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"allocator","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/allocator"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/SynchronousOptions":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/SynchronousOptions","navigatorTitle":[{"text":"SynchronousOptions","kind":"identifier"}],"abstract":[],"type":"topic","role":"symbol","kind":"symbol","title":"EmbeddedChannel.SynchronousOptions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SynchronousOptions","kind":"identifier"}],"url":"\/documentation\/nioembedded\/embeddedchannel\/synchronousoptions"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/remoteAddress":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/remoteAddress","type":"topic","title":"remoteAddress","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"remoteAddress","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/remoteaddress"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/isWritable":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/isWritable","type":"topic","title":"isWritable","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"isWritable","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/iswritable"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState":{"abstract":[{"type":"codeVoice","code":"LeftOverState"},{"type":"text","text":" represents any left-over inbound, outbound, and pending outbound events that hit the"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" and were not consumed when "},{"type":"codeVoice","code":"finish"},{"type":"text","text":" was called on the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LeftOverState"}],"title":"EmbeddedChannel.LeftOverState","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LeftOverState"}],"url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/readOutbound(as:)":{"type":"topic","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/readoutbound(as:)","abstract":[{"text":"If available, this method reads one element of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" out of the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":"’s outbound buffer. If the","type":"text"},{"text":" ","type":"text"},{"text":"first element was of a different type than requested, ","type":"text"},{"code":"EmbeddedChannel.WrongTypeError","type":"codeVoice"},{"text":" will be thrown, if there","type":"text"},{"text":" ","type":"text"},{"text":"are no elements in the outbound buffer, ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" will be returned.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readOutbound(as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readOutbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"readOutbound(as:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/finish()":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish()","type":"topic","title":"finish()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"EmbeddedChannel","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"LeftOverState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"abstract":[{"text":"Synchronously closes the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/finish()"}}}