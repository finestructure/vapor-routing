{"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Inherited from "},{"type":"codeVoice","code":"Channel.pipeline"},{"type":"text","text":"."}],"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/pipeline","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioembedded\/embeddedchannel\/pipeline"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"pipeline"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChannelPipeline","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","preciseIdentifier":"s:7NIOCore15ChannelPipelineC"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"see: "},{"type":"codeVoice","code":"Channel.pipeline"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"metadata":{"externalID":"s:11NIOEmbedded15EmbeddedChannelC8pipeline7NIOCore0C8PipelineCvp","title":"pipeline","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pipeline","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ChannelPipeline","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15ChannelPipelineC"}],"role":"symbol","symbolKind":"property","roleHeading":"Instance Property","modules":[{"name":"NIOEmbedded"}]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"type":"topic","kind":"symbol","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actual IO nor has a proper eventing mechanism. The prime use-case for"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"type":"text","text":"and check the outbound events manually."}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}],"url":"\/documentation\/nioembedded\/embeddedchannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","title":"EmbeddedChannel","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/pipeline":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/pipeline","type":"topic","title":"pipeline","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"pipeline","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ChannelPipeline","preciseIdentifier":"s:7NIOCore15ChannelPipelineC","kind":"typeIdentifier"}],"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/pipeline"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","url":"\/documentation\/niocore\/channelpipeline","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelPipeline"}],"title":"ChannelPipeline","abstract":[{"text":"A list of ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s that handle or intercept inbound events and outbound operations of a","type":"text"},{"text":" ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":". ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" implements an advanced form of the Intercepting Filter pattern","type":"text"},{"text":" ","type":"text"},{"text":"to give a user full control over how an event is handled and how the ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s in a pipeline","type":"text"},{"text":" ","type":"text"},{"text":"interact with each other.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelPipeline"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"kind":"symbol","url":"\/documentation\/nioembedded","title":"NIOEmbedded","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","abstract":[]}}}