{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readInbound(as:)"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"modules":[{"name":"NIOEmbedded"}],"roleHeading":"Instance Method","title":"readInbound(as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readInbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"symbolKind":"method","externalID":"s:11NIOEmbedded15EmbeddedChannelC11readInbound2asxSgxm_tKlF","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"variants":[{"paths":["\/documentation\/nioembedded\/embeddedchannel\/readinbound(as:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readInbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type = T.self) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}],"kind":"declarations"},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Data hits the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"’s inbound buffer when data was send through the pipeline using "},{"type":"codeVoice","code":"fireChannelRead"},{"type":"text","text":" "},{"type":"text","text":"and then travelled the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" all the way too the back. For data to hit the inbound buffer, the"},{"type":"text","text":" "},{"type":"text","text":"last "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" must have send the event either explicitly (by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandlerContext.fireChannelRead"},{"type":"text","text":") or implicitly by not implementing "},{"type":"codeVoice","code":"channelRead"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"EmbeddedChannel.writeInbound"},{"type":"text","text":" will fire data through the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" using "},{"type":"codeVoice","code":"fireChannelRead"},{"type":"text","text":"."}]}],"style":"note","type":"aside"}],"kind":"content"}],"abstract":[{"type":"text","text":"If available, this method reads one element of type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" out of the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"’s inbound buffer. If the"},{"type":"text","text":" "},{"type":"text","text":"first element was of a different type than requested, "},{"type":"codeVoice","code":"EmbeddedChannel.WrongTypeError"},{"type":"text","text":" will be thrown, if there"},{"type":"text","text":" "},{"type":"text","text":"are no elements in the outbound buffer, "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" will be returned."}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/readInbound(as:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readInbound(as:)","type":"topic","title":"readInbound(as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readInbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"If available, this method reads one element of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" out of the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":"’s inbound buffer. If the","type":"text"},{"text":" ","type":"text"},{"text":"first element was of a different type than requested, ","type":"text"},{"code":"EmbeddedChannel.WrongTypeError","type":"codeVoice"},{"text":" will be thrown, if there","type":"text"},{"text":" ","type":"text"},{"text":"are no elements in the outbound buffer, ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" will be returned."}],"kind":"symbol","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/readinbound(as:)"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"kind":"symbol","url":"\/documentation\/nioembedded","title":"NIOEmbedded","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"type":"topic","kind":"symbol","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actual IO nor has a proper eventing mechanism. The prime use-case for"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"type":"text","text":"and check the outbound events manually."}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}],"url":"\/documentation\/nioembedded\/embeddedchannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","title":"EmbeddedChannel","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}]}}}