{"variants":[{"paths":["\/documentation\/nioembedded\/embeddedchannel\/readoutbound(as:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"If available, this method reads one element of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" out of the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":"’s outbound buffer. If the","type":"text"},{"text":" ","type":"text"},{"text":"first element was of a different type than requested, ","type":"text"},{"code":"EmbeddedChannel.WrongTypeError","type":"codeVoice"},{"text":" will be thrown, if there","type":"text"},{"text":" ","type":"text"},{"text":"are no elements in the outbound buffer, ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" will be returned.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readOutbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type = T.self) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"Data hits the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":"’s outbound buffer when data was written using "},{"code":"write","type":"codeVoice"},{"type":"text","text":", then "},{"code":"flush","type":"codeVoice"},{"type":"text","text":"ed, and"},{"type":"text","text":" "},{"type":"text","text":"then travelled the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" all the way too the front. For data to hit the outbound buffer, the very"},{"type":"text","text":" "},{"type":"text","text":"first "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" must have written and flushed it either explicitly (by calling"},{"type":"text","text":" "},{"code":"ChannelHandlerContext.write","type":"codeVoice"},{"type":"text","text":" and "},{"code":"flush","type":"codeVoice"},{"type":"text","text":") or implicitly by not implementing "},{"code":"write","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"flush","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Outbound events travel the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" "},{"inlineContent":[{"text":"back to front","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","type":"aside"},{"content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"EmbeddedChannel.writeOutbound"},{"type":"text","text":" will "},{"type":"codeVoice","code":"write"},{"type":"text","text":" data through the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":", starting with last"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","type":"aside"}],"kind":"content"}],"metadata":{"title":"readOutbound(as:)","symbolKind":"method","externalID":"s:11NIOEmbedded15EmbeddedChannelC12readOutbound2asxSgxm_tKlF","roleHeading":"Instance Method","role":"symbol","modules":[{"name":"NIOEmbedded"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readOutbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readOutbound(as:)"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/readOutbound(as:)":{"type":"topic","role":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel\/readoutbound(as:)","abstract":[{"text":"If available, this method reads one element of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" out of the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":"’s outbound buffer. If the","type":"text"},{"text":" ","type":"text"},{"text":"first element was of a different type than requested, ","type":"text"},{"code":"EmbeddedChannel.WrongTypeError","type":"codeVoice"},{"text":" will be thrown, if there","type":"text"},{"text":" ","type":"text"},{"text":"are no elements in the outbound buffer, ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" will be returned.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/readOutbound(as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readOutbound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"readOutbound(as:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"kind":"symbol","url":"\/documentation\/nioembedded","title":"NIOEmbedded","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"type":"topic","kind":"symbol","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actual IO nor has a proper eventing mechanism. The prime use-case for"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"type":"text","text":"and check the outbound events manually."}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}],"url":"\/documentation\/nioembedded\/embeddedchannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","title":"EmbeddedChannel","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}]}}}