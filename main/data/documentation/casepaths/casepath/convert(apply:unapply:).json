{"abstract":[{"type":"text","text":"A conversion that invokes the given apply and unapply functions."}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"convert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"preciseIdentifier":"s:7Parsing13AnyConversionV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion","text":"AnyConversion"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A conversion that invokes the given apply and unapply functions."}]}],"kind":"content"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that attempts to convert an input into an output. "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/apply(_:)","isActive":true},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}]}],"name":"apply"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that attempts to convert an output into an input. "},{"type":"codeVoice","code":"unapply"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/unapply(_:)","isActive":true},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}]}],"name":"unapply"}],"kind":"parameters"},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Useful for experimenting with conversions in a lightweight manner, without the ceremony of"},{"type":"text","text":" "},{"type":"text","text":"defining a dedicated type."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Amount {","  var cents: Int","}","","let amount = Parse(","  .convert(","    apply: { dollars, cents in Amount(cents: dollars * 100 + cents) },","    unapply: { amount in amount.cents.quotientAndRemainder(dividingBy: 100) }","  )",") {","  Digits()","  \".\"","  Digits(2)","}"]},{"inlineContent":[{"text":"If performance is a concern, you should define a custom type that conforms to ","type":"text"},{"code":"Conversion","type":"codeVoice"},{"text":" ","type":"text"},{"text":"instead, which avoids the overhead of escaping closures, gives the compiler the ability to","type":"text"},{"text":" ","type":"text"},{"text":"better optimize, and puts your in a better position to test the conversion.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct AmountConversion: Conversion {","  func apply(_ dollarsAndCents: (Int, Int)) -> Amount {","    return Amount(cents: dollarsAndCents.0 * 100 + dollarsAndCents.1)","  }","","  func unapply(_ amount: Amount) -> (Int, Int) {","    amount.cents.quotientAndRemainder(dividingBy: 100)","  }","}","","let amount = Parse(AmountConversion()) {","  Digits()","  \".\"","  Digits(2)","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths","doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath","doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/Conversion-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/convert(apply:unapply:)"},"metadata":{"externalID":"s:7Parsing10ConversionPAAE7convert5apply7unapplyAA03AnyB0Vyqd__qd_0_Gqd_0_Sgqd__c_qd__Sgqd_0_ctAIRszr0_lFZ::SYNTHESIZED::s:9CasePaths0A4PathV","role":"symbol","symbolKind":"method","title":"convert(apply:unapply:)","modules":[{"name":"CasePaths"}],"extendedModule":"Parsing","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"roleHeading":"Type Method"},"kind":"symbol","variants":[{"paths":["\/documentation\/casepaths\/casepath\/convert(apply:unapply:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://co.pointfree.VaporRouting/documentation/CasePaths/CasePath":{"role":"symbol","abstract":[{"type":"text","text":"A path that supports embedding a value in a root and attempting to extract a rootâ€™s embedded"},{"type":"text","text":" "},{"type":"text","text":"value."}],"kind":"symbol","navigatorTitle":[{"text":"CasePath","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CasePath","kind":"identifier"}],"type":"topic","title":"CasePath","url":"\/documentation\/casepaths\/casepath","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath"},"doc://co.pointfree.VaporRouting/documentation/CasePaths/CasePath/convert(apply:unapply:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"A conversion that invokes the given apply and unapply functions."}],"type":"topic","title":"convert(apply:unapply:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/convert(apply:unapply:)","kind":"symbol","role":"symbol","url":"\/documentation\/casepaths\/casepath\/convert(apply:unapply:)"},"doc://co.pointfree.VaporRouting/documentation/CasePaths/CasePath/unapply(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/unapply(_:)","url":"\/documentation\/casepaths\/casepath\/unapply(_:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Attempts to transform an output back into an input."}],"title":"unapply(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unapply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion":{"title":"AnyConversion","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A type-erased "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","isActive":true},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"url":"\/documentation\/parsing\/anyconversion","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversion":{"navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"title":"Conversion","role":"symbol","url":"\/documentation\/parsing\/conversion","abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value into an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value back into an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion"},"doc://co.pointfree.VaporRouting/documentation/CasePaths/CasePath/Conversion-Implementations":{"role":"collectionGroup","abstract":[],"kind":"article","type":"topic","title":"Conversion Implementations","url":"\/documentation\/casepaths\/casepath\/conversion-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/Conversion-Implementations"},"doc://co.pointfree.VaporRouting/documentation/CasePaths":{"role":"collection","abstract":[],"kind":"symbol","type":"topic","title":"CasePaths","url":"\/documentation\/casepaths","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths"},"doc://co.pointfree.VaporRouting/documentation/CasePaths/CasePath/apply(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/CasePaths\/CasePath\/apply(_:)","url":"\/documentation\/casepaths\/casepath\/apply(_:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Attempts to transform an input into an output."}],"title":"apply(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"apply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Root","kind":"typeIdentifier"}]}}}