{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic\/compareAndExchange(expected:desired:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/compareandexchange(expected:desired:)"]}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"externalID":"s:21NIOConcurrencyHelpers20UnsafeEmbeddedAtomicV18compareAndExchange8expected7desiredSbx_xtF","modules":[{"name":"NIOConcurrencyHelpers"}],"roleHeading":"Instance Method","symbolKind":"method","role":"symbol","title":"compareAndExchange(expected:desired:)"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareAndExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"True"},{"type":"text","text":" if the exchange occurred, or "},{"type":"codeVoice","code":"False"},{"type":"text","text":" if "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" did not"},{"type":"text","text":" "},{"type":"text","text":"match the current value and so no exchange occurred."}]}],"kind":"content"},{"parameters":[{"name":"expected","content":[{"inlineContent":[{"type":"text","text":"The value that this object must currently hold for the"},{"type":"text","text":" "},{"type":"text","text":"compare-and-swap to succeed."}],"type":"paragraph"}]},{"name":"desired","content":[{"inlineContent":[{"text":"The new value that this object will hold if the compare","type":"text"},{"text":" ","type":"text"},{"text":"succeeds.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This implementation conforms to C11’s "},{"code":"atomic_compare_exchange_strong","type":"codeVoice"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"means that the compare-and-swap will always succeed if "},{"code":"expected","type":"codeVoice"},{"type":"text","text":" is equal to"},{"type":"text","text":" "},{"type":"text","text":"value. Additionally, it uses a "},{"inlineContent":[{"type":"text","text":"sequentially consistent ordering"}],"type":"emphasis"},{"type":"text","text":". For more"},{"type":"text","text":" "},{"type":"text","text":"details on atomic memory models, check the documentation for C11’s"},{"type":"text","text":" "},{"code":"stdatomic.h","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"}],"kind":"symbol","abstract":[{"text":"Atomically compares the value against ","type":"text"},{"code":"expected","type":"codeVoice"},{"text":" and, if they are equal,","type":"text"},{"text":" ","type":"text"},{"text":"replaces the value with ","type":"text"},{"code":"desired","type":"codeVoice"},{"text":".","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/UnsafeEmbeddedAtomic/compareAndExchange(expected:desired:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic\/compareAndExchange(expected:desired:)","kind":"symbol","abstract":[{"text":"Atomically compares the value against ","type":"text"},{"code":"expected","type":"codeVoice"},{"text":" and, if they are equal,","type":"text"},{"text":" ","type":"text"},{"text":"replaces the value with ","type":"text"},{"code":"desired","type":"codeVoice"},{"text":".","type":"text"}],"title":"compareAndExchange(expected:desired:)","url":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/compareandexchange(expected:desired:)"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers":{"kind":"symbol","abstract":[],"type":"topic","role":"collection","title":"NIOConcurrencyHelpers","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","url":"\/documentation\/nioconcurrencyhelpers"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/UnsafeEmbeddedAtomic":{"kind":"symbol","type":"topic","url":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic","title":"UnsafeEmbeddedAtomic","abstract":[{"type":"text","text":"An atomic primitive object."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeEmbeddedAtomic","kind":"identifier"}],"navigatorTitle":[{"text":"UnsafeEmbeddedAtomic","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic"}}}