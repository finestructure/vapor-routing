{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareAndExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":""},{"code":"True","type":"codeVoice"},{"type":"text","text":" if the exchange occurred, or "},{"code":"False","type":"codeVoice"},{"type":"text","text":" if "},{"code":"expected","type":"codeVoice"},{"type":"text","text":" did not"},{"type":"text","text":" "},{"type":"text","text":"match the current value and so no exchange occurred."}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"expected","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value that this object must currently hold for the"},{"type":"text","text":" "},{"type":"text","text":"compare-and-swap to succeed."}]}]},{"name":"desired","content":[{"inlineContent":[{"text":"The new value that this object will hold if the compare","type":"text"},{"text":" ","type":"text"},{"text":"succeeds.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This implementation conforms to C11’s "},{"code":"atomic_compare_exchange_strong","type":"codeVoice"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"means that the compare-and-swap will always succeed if "},{"code":"expected","type":"codeVoice"},{"type":"text","text":" is equal to"},{"type":"text","text":" "},{"type":"text","text":"value. Additionally, it uses a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"sequentially consistent ordering"}]},{"type":"text","text":". For more"},{"type":"text","text":" "},{"type":"text","text":"details on atomic memory models, check the documentation for C11’s"},{"type":"text","text":" "},{"code":"stdatomic.h","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"aside","style":"warning","content":[{"type":"paragraph","inlineContent":[{"text":"The implementation of ","type":"text"},{"code":"exchange","type":"codeVoice"},{"text":" contains a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Compare and Exchange loop","type":"text"}]},{"text":", ie. it may busy wait with","type":"text"},{"text":" ","type":"text"},{"text":"100% CPU load.","type":"text"}]}]}],"kind":"content"}],"metadata":{"modules":[{"name":"NIOConcurrencyHelpers"}],"roleHeading":"Instance Method","externalID":"s:21NIOConcurrencyHelpers9AtomicBoxC18compareAndExchange8expected7desiredSbx_xtF","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"platforms":[],"title":"compareAndExchange(expected:desired:)","role":"symbol"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)"]}],"abstract":[{"text":"Atomically compares the value against ","type":"text"},{"code":"expected","type":"codeVoice"},{"type":"text","text":" and, if they are equal,"},{"type":"text","text":" "},{"type":"text","text":"replaces the value with "},{"type":"codeVoice","code":"desired"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox\/compareAndExchange(expected:desired:)"},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AtomicBox is deprecated without replacement because the original implementation doesn't work."}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox"]]},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/AtomicBox":{"url":"\/documentation\/nioconcurrencyhelpers\/atomicbox","abstract":[{"type":"codeVoice","code":"AtomicBox"},{"text":" is a heap-allocated box which allows lock-free access to an instance of a Swift class.","type":"text"}],"kind":"symbol","title":"AtomicBox","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicBox"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicBox"}]},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/AtomicBox/compareAndExchange(expected:desired:)":{"role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox\/compareAndExchange(expected:desired:)","url":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)","abstract":[{"text":"Atomically compares the value against ","type":"text"},{"code":"expected","type":"codeVoice"},{"text":" and, if they are equal,","type":"text"},{"text":" ","type":"text"},{"text":"replaces the value with ","type":"text"},{"code":"desired","type":"codeVoice"},{"text":".","type":"text"}],"title":"compareAndExchange(expected:desired:)"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers":{"kind":"symbol","abstract":[],"type":"topic","role":"collection","title":"NIOConcurrencyHelpers","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","url":"\/documentation\/nioconcurrencyhelpers"}}}