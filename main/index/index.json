{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/progress\/receivedbytes","title":"var receivedBytes: Int","type":"property"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/progress\/totalbytes","title":"var totalBytes: Int?","type":"property"}],"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/progress","title":"FileDownloadDelegate.Progress","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/init(path:pool:reporthead:reportprogress:)","title":"init(path: String, pool: NIOThreadPool, reportHead: ((HTTPResponseHead) -> Void)?, reportProgress: ((FileDownloadDelegate.Progress) -> Void)?) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/didfinishrequest(task:)","title":"func didFinishRequest(task: HTTPClient.Task<FileDownloadDelegate.Response>) throws -> FileDownloadDelegate.Response","type":"method"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/didreceivebodypart(task:_:)","title":"func didReceiveBodyPart(task: HTTPClient.Task<FileDownloadDelegate.Response>, ByteBuffer) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/didreceiveerror(task:_:)","title":"func didReceiveError(task: HTTPClient.Task<FileDownloadDelegate.Progress>, Error)","type":"method"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/didreceivehead(task:_:)","title":"func didReceiveHead(task: HTTPClient.Task<FileDownloadDelegate.Response>, HTTPResponseHead) -> EventLoopFuture<Void>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/response","title":"FileDownloadDelegate.Response","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/didsendrequest(task:)","title":"func didSendRequest(task: HTTPClient.Task<Self.Response>)","type":"method"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/didsendrequesthead(task:_:)","title":"func didSendRequestHead(task: HTTPClient.Task<Self.Response>, HTTPRequestHead)","type":"method"},{"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/didsendrequestpart(task:_:)","title":"func didSendRequestPart(task: HTTPClient.Task<Self.Response>, IOData)","type":"method"}],"path":"\/documentation\/asynchttpclient\/filedownloaddelegate\/httpclientresponsedelegate-implementations","title":"HTTPClientResponseDelegate Implementations","type":"symbol"}],"path":"\/documentation\/asynchttpclient\/filedownloaddelegate","title":"FileDownloadDelegate","type":"class"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/task\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/task\/futureresult","title":"var futureResult: EventLoopFuture<Response>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/task\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/task\/wait()","title":"func wait() throws -> Response","type":"method"}],"path":"\/documentation\/asynchttpclient\/httpclient\/task","title":"HTTPClient.Task","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/authorization\/headervalue","title":"var headerValue: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/authorization\/basic(credentials:)","title":"static func basic(credentials: String) -> HTTPClient.Authorization","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/authorization\/basic(username:password:)","title":"static func basic(username: String, password: String) -> HTTPClient.Authorization","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/authorization\/bearer(tokens:)","title":"static func bearer(tokens: String) -> HTTPClient.Authorization","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/authorization\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asynchttpclient\/httpclient\/authorization\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/asynchttpclient\/httpclient\/authorization","title":"HTTPClient.Authorization","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/streamwriter\/init(closure:)","title":"init(closure: (IOData) -> EventLoopFuture<Void>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/streamwriter\/write(_:)","title":"func write(IOData) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/asynchttpclient\/httpclient\/body\/streamwriter","title":"HTTPClient.Body.StreamWriter","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/length","title":"var length: Int?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/stream","title":"var stream: (HTTPClient.Body.StreamWriter) -> EventLoopFuture<Void>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/bytebuffer(_:)","title":"static func byteBuffer(ByteBuffer) -> HTTPClient.Body","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/bytes(_:)","title":"static func bytes<Bytes>(Bytes) -> HTTPClient.Body","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/data(_:)","title":"static func data(Data) -> HTTPClient.Body","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/stream(length:_:)","title":"static func stream(length: Int?, (HTTPClient.Body.StreamWriter) -> EventLoopFuture<Void>) -> HTTPClient.Body","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/body\/string(_:)","title":"static func string(String) -> HTTPClient.Body","type":"method"}],"path":"\/documentation\/asynchttpclient\/httpclient\/body","title":"HTTPClient.Body","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.struct\/init(idletimeout:)","title":"init(idleTimeout: TimeAmount)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.struct\/init(idletimeout:concurrenthttp1connectionsperhostsoftlimit:)","title":"init(idleTimeout: TimeAmount, concurrentHTTP1ConnectionsPerHostSoftLimit: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.struct\/concurrenthttp1connectionsperhostsoftlimit","title":"var concurrentHTTP1ConnectionsPerHostSoftLimit: Int","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.struct\/idletimeout","title":"var idleTimeout: TimeAmount","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.struct","title":"HTTPClient.Configuration.ConnectionPool","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/httpversion-swift.struct\/automatic","title":"static let automatic: HTTPClient.Configuration.HTTPVersion","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/httpversion-swift.struct\/http1only","title":"static let http1Only: HTTPClient.Configuration.HTTPVersion","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/httpversion-swift.struct","title":"HTTPClient.Configuration.HTTPVersion","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.struct\/authorization","title":"var authorization: HTTPClient.Authorization?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.struct\/host","title":"var host: String","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.struct\/port","title":"var port: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.struct\/server(host:port:)","title":"static func server(host: String, port: Int) -> HTTPClient.Configuration.Proxy","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.struct\/server(host:port:authorization:)","title":"static func server(host: String, port: Int, authorization: HTTPClient.Authorization?) -> HTTPClient.Configuration.Proxy","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.struct\/socksserver(host:port:)","title":"static func socksServer(host: String, port: Int) -> HTTPClient.Configuration.Proxy","type":"method"}],"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.struct","title":"HTTPClient.Configuration.Proxy","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/redirectconfiguration-swift.struct\/disallow","title":"static let disallow: HTTPClient.Configuration.RedirectConfiguration","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/redirectconfiguration-swift.struct\/follow(max:allowcycles:)","title":"static func follow(max: Int, allowCycles: Bool) -> HTTPClient.Configuration.RedirectConfiguration","type":"method"}],"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/redirectconfiguration-swift.struct","title":"HTTPClient.Configuration.RedirectConfiguration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/timeout-swift.struct\/init(connect:read:)","title":"init(connect: TimeAmount?, read: TimeAmount?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/timeout-swift.struct\/connect","title":"var connect: TimeAmount?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/timeout-swift.struct\/read","title":"var read: TimeAmount?","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/timeout-swift.struct","title":"HTTPClient.Configuration.Timeout","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/init(certificateverification:redirectconfiguration:timeout:connectionpool:proxy:ignoreuncleansslshutdown:decompression:backgroundactivitylogger:)","title":"init(certificateVerification: CertificateVerification, redirectConfiguration: HTTPClient.Configuration.RedirectConfiguration?, timeout: HTTPClient.Configuration.Timeout, connectionPool: TimeAmount, proxy: HTTPClient.Configuration.Proxy?, ignoreUncleanSSLShutdown: Bool, decompression: HTTPClient.Decompression, backgroundActivityLogger: Logger?)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/init(certificateverification:redirectconfiguration:timeout:maximumallowedidletimeinconnectionpool:proxy:ignoreuncleansslshutdown:decompression:)","title":"init(certificateVerification: CertificateVerification, redirectConfiguration: HTTPClient.Configuration.RedirectConfiguration?, timeout: HTTPClient.Configuration.Timeout, maximumAllowedIdleTimeInConnectionPool: TimeAmount, proxy: HTTPClient.Configuration.Proxy?, ignoreUncleanSSLShutdown: Bool, decompression: HTTPClient.Decompression)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/init(certificateverification:redirectconfiguration:timeout:proxy:ignoreuncleansslshutdown:decompression:)","title":"init(certificateVerification: CertificateVerification, redirectConfiguration: HTTPClient.Configuration.RedirectConfiguration?, timeout: HTTPClient.Configuration.Timeout, proxy: HTTPClient.Configuration.Proxy?, ignoreUncleanSSLShutdown: Bool, decompression: HTTPClient.Decompression)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/init(tlsconfiguration:redirectconfiguration:timeout:connectionpool:proxy:ignoreuncleansslshutdown:decompression:)","title":"init(tlsConfiguration: TLSConfiguration?, redirectConfiguration: HTTPClient.Configuration.RedirectConfiguration?, timeout: HTTPClient.Configuration.Timeout, connectionPool: HTTPClient.Configuration.ConnectionPool, proxy: HTTPClient.Configuration.Proxy?, ignoreUncleanSSLShutdown: Bool, decompression: HTTPClient.Decompression)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/init(tlsconfiguration:redirectconfiguration:timeout:proxy:ignoreuncleansslshutdown:decompression:)","title":"init(tlsConfiguration: TLSConfiguration?, redirectConfiguration: HTTPClient.Configuration.RedirectConfiguration?, timeout: HTTPClient.Configuration.Timeout, proxy: HTTPClient.Configuration.Proxy?, ignoreUncleanSSLShutdown: Bool, decompression: HTTPClient.Decompression)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/connectionpool-swift.property","title":"var connectionPool: HTTPClient.Configuration.ConnectionPool","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/decompression","title":"var decompression: HTTPClient.Decompression","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/httpversion-swift.property","title":"var httpVersion: HTTPClient.Configuration.HTTPVersion","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/ignoreuncleansslshutdown","title":"var ignoreUncleanSSLShutdown: Bool","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/proxy-swift.property","title":"var proxy: HTTPClient.Configuration.Proxy?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/redirectconfiguration-swift.property","title":"var redirectConfiguration: HTTPClient.Configuration.RedirectConfiguration","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/timeout-swift.property","title":"var timeout: HTTPClient.Configuration.Timeout","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/configuration\/tlsconfiguration","title":"var tlsConfiguration: Optional<TLSConfiguration>","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclient\/configuration","title":"HTTPClient.Configuration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/init(header:defaultdomain:)","title":"init?(header: String, defaultDomain: String)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/init(name:value:path:domain:expires:maxage:httponly:secure:)","title":"init(name: String, value: String, path: String, domain: String?, expires: Date?, maxAge: Int?, httpOnly: Bool, secure: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/domain","title":"var domain: String?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/expires","title":"var expires: Date?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/httponly","title":"var httpOnly: Bool","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/maxage","title":"var maxAge: Int?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/secure","title":"var secure: Bool","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/cookie\/value","title":"var value: String","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclient\/cookie","title":"HTTPClient.Cookie","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/eventlooppreference\/indifferent","title":"static let indifferent: HTTPClient.EventLoopPreference","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/eventlooppreference\/delegate(on:)","title":"static func delegate(on: EventLoop) -> HTTPClient.EventLoopPreference","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/eventlooppreference\/delegateandchannel(on:)","title":"static func delegateAndChannel(on: EventLoop) -> HTTPClient.EventLoopPreference","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/eventlooppreference\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclient\/eventlooppreference\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/asynchttpclient\/httpclient\/eventlooppreference","title":"HTTPClient.EventLoopPreference","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/init(url:method:headers:body:)-6pzmz","title":"init(url: URL, method: HTTPMethod, headers: HTTPHeaders, body: HTTPClient.Body?) throws","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/init(url:method:headers:body:)-77bzb","title":"init(url: String, method: HTTPMethod, headers: HTTPHeaders, body: HTTPClient.Body?) throws","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/init(url:method:headers:body:tlsconfiguration:)-7av5q","title":"init(url: URL, method: HTTPMethod, headers: HTTPHeaders, body: HTTPClient.Body?, tlsConfiguration: TLSConfiguration?) throws","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/init(url:method:headers:body:tlsconfiguration:)-8ouve","title":"init(url: String, method: HTTPMethod, headers: HTTPHeaders, body: HTTPClient.Body?, tlsConfiguration: TLSConfiguration?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/body","title":"var body: HTTPClient.Body?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/host","title":"var host: String","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/method","title":"let method: HTTPMethod","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/port","title":"var port: Int","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/scheme","title":"var scheme: String","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/tlsconfiguration","title":"var tlsConfiguration: TLSConfiguration?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/url","title":"let url: URL","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/request\/usetls","title":"var useTLS: Bool","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclient\/request","title":"HTTPClient.Request","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/init(host:status:headers:body:)","title":"init(host: String, status: HTTPResponseStatus, headers: HTTPHeaders, body: ByteBuffer?)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/init(host:status:version:headers:body:)","title":"init(host: String, status: HTTPResponseStatus, version: HTTPVersion, headers: HTTPHeaders, body: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/body","title":"var body: ByteBuffer?","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/cookies","title":"var cookies: [HTTPClient.Cookie]","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/host","title":"var host: String","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/status","title":"var status: HTTPResponseStatus","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclient\/response\/version","title":"var version: HTTPVersion","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclient\/response","title":"HTTPClient.Response","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/init(eventloopgroupprovider:configuration:)","title":"convenience init(eventLoopGroupProvider: HTTPClient.EventLoopGroupProvider, configuration: HTTPClient.Configuration)","type":"init"},{"path":"\/documentation\/asynchttpclient\/httpclient\/init(eventloopgroupprovider:configuration:backgroundactivitylogger:)","title":"init(eventLoopGroupProvider: HTTPClient.EventLoopGroupProvider, configuration: HTTPClient.Configuration, backgroundActivityLogger: Logger)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/eventloopgroup","title":"let eventLoopGroup: EventLoopGroup","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/delete(url:deadline:)","title":"func delete(url: String, deadline: NIODeadline?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/delete(url:deadline:logger:)","title":"func delete(url: String, deadline: NIODeadline?, logger: Logger) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(_:securesocketpath:urlpath:body:deadline:logger:)","title":"func execute(HTTPMethod, secureSocketPath: String, urlPath: String, body: HTTPClient.Body?, deadline: NIODeadline?, logger: Logger?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(_:socketpath:urlpath:body:deadline:logger:)","title":"func execute(HTTPMethod, socketPath: String, urlPath: String, body: HTTPClient.Body?, deadline: NIODeadline?, logger: Logger?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(_:url:body:deadline:logger:)","title":"func execute(HTTPMethod, url: String, body: HTTPClient.Body?, deadline: NIODeadline?, logger: Logger?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:deadline:)","title":"func execute(request: HTTPClient.Request, deadline: NIODeadline?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:deadline:logger:)","title":"func execute(request: HTTPClient.Request, deadline: NIODeadline?, logger: Logger) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:delegate:deadline:)","title":"func execute<Delegate>(request: HTTPClient.Request, delegate: Delegate, deadline: NIODeadline?) -> HTTPClient.Task<Delegate.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:delegate:deadline:logger:)","title":"func execute<Delegate>(request: HTTPClient.Request, delegate: Delegate, deadline: NIODeadline?, logger: Logger) -> HTTPClient.Task<Delegate.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:delegate:eventloop:deadline:)","title":"func execute<Delegate>(request: HTTPClient.Request, delegate: Delegate, eventLoop: HTTPClient.EventLoopPreference, deadline: NIODeadline?) -> HTTPClient.Task<Delegate.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:delegate:eventloop:deadline:logger:)","title":"func execute<Delegate>(request: HTTPClient.Request, delegate: Delegate, eventLoop: HTTPClient.EventLoopPreference, deadline: NIODeadline?, logger: Logger?) -> HTTPClient.Task<Delegate.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:eventloop:deadline:)","title":"func execute(request: HTTPClient.Request, eventLoop: HTTPClient.EventLoopPreference, deadline: NIODeadline?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/execute(request:eventloop:deadline:logger:)","title":"func execute(request: HTTPClient.Request, eventLoop: HTTPClient.EventLoopPreference, deadline: NIODeadline?, logger: Logger?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/get(url:deadline:)","title":"func get(url: String, deadline: NIODeadline?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/get(url:deadline:logger:)","title":"func get(url: String, deadline: NIODeadline?, logger: Logger) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/patch(url:body:deadline:)","title":"func patch(url: String, body: HTTPClient.Body?, deadline: NIODeadline?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/patch(url:body:deadline:logger:)","title":"func patch(url: String, body: HTTPClient.Body?, deadline: NIODeadline?, logger: Logger) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/post(url:body:deadline:)","title":"func post(url: String, body: HTTPClient.Body?, deadline: NIODeadline?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/post(url:body:deadline:logger:)","title":"func post(url: String, body: HTTPClient.Body?, deadline: NIODeadline?, logger: Logger) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/put(url:body:deadline:)","title":"func put(url: String, body: HTTPClient.Body?, deadline: NIODeadline?) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/put(url:body:deadline:logger:)","title":"func put(url: String, body: HTTPClient.Body?, deadline: NIODeadline?, logger: Logger) -> EventLoopFuture<HTTPClient.Response>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/shutdown(queue:_:)","title":"func shutdown(queue: DispatchQueue, (Error?) -> Void)","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclient\/syncshutdown()","title":"func syncShutdown() throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/decompression\/disabled","title":"case disabled","type":"case"},{"path":"\/documentation\/asynchttpclient\/httpclient\/decompression\/enabled(limit:)","title":"case enabled(limit: NIOHTTPDecompression.DecompressionLimit)","type":"case"}],"path":"\/documentation\/asynchttpclient\/httpclient\/decompression","title":"HTTPClient.Decompression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclient\/eventloopgroupprovider\/createnew","title":"case createNew","type":"case"},{"path":"\/documentation\/asynchttpclient\/httpclient\/eventloopgroupprovider\/shared(_:)","title":"case shared(EventLoopGroup)","type":"case"}],"path":"\/documentation\/asynchttpclient\/httpclient\/eventloopgroupprovider","title":"HTTPClient.EventLoopGroupProvider","type":"enum"}],"path":"\/documentation\/asynchttpclient\/httpclient","title":"HTTPClient","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/init(chunkhandler:)","title":"init(chunkHandler: (ByteBuffer) -> EventLoopFuture<Void>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didfinishrequest(task:)","title":"func didFinishRequest(task: HTTPClient.Task<Void>) throws","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didreceivebodypart(task:_:)","title":"func didReceiveBodyPart(task: HTTPClient.Task<Void>, ByteBuffer) -> EventLoopFuture<Void>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/response","title":"HTTPClientCopyingDelegate.Response","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didreceiveerror(task:_:)","title":"func didReceiveError(task: HTTPClient.Task<Self.Response>, Error)","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didreceivehead(task:_:)","title":"func didReceiveHead(task: HTTPClient.Task<Self.Response>, HTTPResponseHead) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didsendrequest(task:)","title":"func didSendRequest(task: HTTPClient.Task<Self.Response>)","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didsendrequesthead(task:_:)","title":"func didSendRequestHead(task: HTTPClient.Task<Self.Response>, HTTPRequestHead)","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didsendrequestpart(task:_:)","title":"func didSendRequestPart(task: HTTPClient.Task<Self.Response>, IOData)","type":"method"}],"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/httpclientresponsedelegate-implementations","title":"HTTPClientResponseDelegate Implementations","type":"symbol"}],"path":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate","title":"HTTPClientCopyingDelegate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/init(request:)","title":"init(request: HTTPClient.Request)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/didfinishrequest(task:)","title":"func didFinishRequest(task: HTTPClient.Task<ResponseAccumulator.Response>) throws -> ResponseAccumulator.Response","type":"method"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/didreceivebodypart(task:_:)","title":"func didReceiveBodyPart(task: HTTPClient.Task<ResponseAccumulator.Response>, ByteBuffer) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/didreceiveerror(task:_:)","title":"func didReceiveError(task: HTTPClient.Task<ResponseAccumulator.Response>, Error)","type":"method"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/didreceivehead(task:_:)","title":"func didReceiveHead(task: HTTPClient.Task<ResponseAccumulator.Response>, HTTPResponseHead) -> EventLoopFuture<Void>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/response","title":"ResponseAccumulator.Response","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/didsendrequest(task:)","title":"func didSendRequest(task: HTTPClient.Task<Self.Response>)","type":"method"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/didsendrequesthead(task:_:)","title":"func didSendRequestHead(task: HTTPClient.Task<Self.Response>, HTTPRequestHead)","type":"method"},{"path":"\/documentation\/asynchttpclient\/responseaccumulator\/didsendrequestpart(task:_:)","title":"func didSendRequestPart(task: HTTPClient.Task<Self.Response>, IOData)","type":"method"}],"path":"\/documentation\/asynchttpclient\/responseaccumulator\/httpclientresponsedelegate-implementations","title":"HTTPClientResponseDelegate Implementations","type":"symbol"}],"path":"\/documentation\/asynchttpclient\/responseaccumulator","title":"ResponseAccumulator","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/response","title":"Response","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didfinishrequest(task:)","title":"func didFinishRequest(task: HTTPClient.Task<Self.Response>) throws -> Self.Response","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivebodypart(task:_:)-1fvyq","title":"func didReceiveBodyPart(task: HTTPClient.Task<Self.Response>, ByteBuffer) -> EventLoopFuture<Void>","type":"method"}],"title":"HTTPClientResponseDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivebodypart(task:_:)-4fd4v","title":"func didReceiveBodyPart(task: HTTPClient.Task<Self.Response>, ByteBuffer) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceiveerror(task:_:)-98xyq","title":"func didReceiveError(task: HTTPClient.Task<Self.Response>, Error)","type":"method"}],"title":"HTTPClientResponseDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceiveerror(task:_:)-fhsg","title":"func didReceiveError(task: HTTPClient.Task<Self.Response>, Error)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivehead(task:_:)-61057","title":"func didReceiveHead(task: HTTPClient.Task<Self.Response>, HTTPResponseHead) -> EventLoopFuture<Void>","type":"method"}],"title":"HTTPClientResponseDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivehead(task:_:)-9r4xd","title":"func didReceiveHead(task: HTTPClient.Task<Self.Response>, HTTPResponseHead) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequest(task:)-3vqgm","title":"func didSendRequest(task: HTTPClient.Task<Self.Response>)","type":"method"}],"title":"HTTPClientResponseDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequest(task:)-9od5p","title":"func didSendRequest(task: HTTPClient.Task<Self.Response>)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequesthead(task:_:)-q36n","title":"func didSendRequestHead(task: HTTPClient.Task<Self.Response>, HTTPRequestHead)","type":"method"}],"title":"HTTPClientResponseDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequesthead(task:_:)-6khai","title":"func didSendRequestHead(task: HTTPClient.Task<Self.Response>, HTTPRequestHead)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequestpart(task:_:)-7y8mo","title":"func didSendRequestPart(task: HTTPClient.Task<Self.Response>, IOData)","type":"method"}],"title":"HTTPClientResponseDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequestpart(task:_:)-4qxap","title":"func didSendRequestPart(task: HTTPClient.Task<Self.Response>, IOData)","type":"method"}],"path":"\/documentation\/asynchttpclient\/httpclientresponsedelegate","title":"HTTPClientResponseDelegate","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/description","title":"var description: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/alreadyshutdown","title":"static let alreadyShutdown: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/bodylengthmismatch","title":"static let bodyLengthMismatch: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/cancelled","title":"static let cancelled: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/chunkedspecifiedmultipletimes","title":"static let chunkedSpecifiedMultipleTimes: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/connecttimeout","title":"static let connectTimeout: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/contentlengthmissing","title":"static let contentLengthMissing: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/deadlineexceeded","title":"static let deadlineExceeded: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/emptyhost","title":"static let emptyHost: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/emptyscheme","title":"static let emptyScheme: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/getconnectionfrompooltimeout","title":"static let getConnectionFromPoolTimeout: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/httpendreceivedafterheadwith1xx","title":"static let httpEndReceivedAfterHeadWith1xx: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/httpproxyhandshaketimeout","title":"static let httpProxyHandshakeTimeout: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/identitycodingincorrectlypresent","title":"static let identityCodingIncorrectlyPresent: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/incompatibleheaders","title":"static let incompatibleHeaders: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/invalidproxyresponse","title":"static let invalidProxyResponse: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/invalidurl","title":"static let invalidURL: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/missingsocketpath","title":"static let missingSocketPath: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/proxyauthenticationrequired","title":"static let proxyAuthenticationRequired: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/readtimeout","title":"static let readTimeout: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/redirectcycledetected","title":"static let redirectCycleDetected: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/redirectlimitreached","title":"static let redirectLimitReached: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/remoteconnectionclosed","title":"static let remoteConnectionClosed: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/requeststreamcancelled","title":"static let requestStreamCancelled: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/sockshandshaketimeout","title":"static let socksHandshakeTimeout: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/tlshandshaketimeout","title":"static let tlsHandshakeTimeout: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/tracerequestwithbody","title":"static let traceRequestWithBody: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/uncleanshutdown","title":"static let uncleanShutdown: HTTPClientError","type":"property"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/writeafterrequestsent","title":"static let writeAfterRequestSent: HTTPClientError","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/invalidheaderfieldnames(_:)","title":"static func invalidHeaderFieldNames([String]) -> HTTPClientError","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/serverofferedunsupportedapplicationprotocol(_:)","title":"static func serverOfferedUnsupportedApplicationProtocol(String) -> HTTPClientError","type":"method"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/unsupportedscheme(_:)","title":"static func unsupportedScheme(String) -> HTTPClientError","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asynchttpclient\/httpclienterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynchttpclient\/httpclienterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/asynchttpclient\/httpclienterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/asynchttpclient\/httpclienterror","title":"HTTPClientError","type":"struct"}],"path":"\/documentation\/asynchttpclient","title":"AsyncHTTPClient","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/init(source:maxconnections:requesttimeout:logger:on:)","title":"init(source: Source, maxConnections: Int, requestTimeout: TimeAmount, logger: Logger, on: EventLoop)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/logger","title":"let logger: Logger","type":"property"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/source","title":"let source: Source","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/close()","title":"func close() -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/releaseconnection(_:)","title":"func releaseConnection(Source.Connection)","type":"method"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/releaseconnection(_:logger:)","title":"func releaseConnection(Source.Connection, logger: Logger)","type":"method"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/requestconnection()","title":"func requestConnection() -> EventLoopFuture<Source.Connection>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/requestconnection(logger:)","title":"func requestConnection(logger: Logger) -> EventLoopFuture<Source.Connection>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/withconnection(_:)","title":"func withConnection<Result>((Source.Connection) -> EventLoopFuture<Result>) -> EventLoopFuture<Result>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopconnectionpool\/withconnection(logger:_:)","title":"func withConnection<Result>(logger: Logger, (Source.Connection) -> EventLoopFuture<Result>) -> EventLoopFuture<Result>","type":"method"}],"path":"\/documentation\/asynckit\/eventloopconnectionpool","title":"EventLoopConnectionPool","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/init(eventloop:)","title":"init(eventLoop: EventLoop)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/append(_:runningon:)","title":"func append<Value>(() -> EventLoopFuture<Value>, runningOn: EventLoopFutureQueue.ContinueCondition) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/append(each:_:)-1fw85","title":"func append<S, Value>(each: S, (S.Element) -> EventLoopFuture<Value>) -> EventLoopFuture<[Value]>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/append(each:_:)-3i4m4","title":"func append<S>(each: S, (S.Element) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/append(onprevious:generator:)","title":"func append<Value>(onPrevious: EventLoopFutureQueue.ContinueCondition, generator: () -> EventLoopFuture<Value>) -> EventLoopFuture<Value>","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition\/complete","title":"case complete","type":"case"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition\/failure","title":"case failure","type":"case"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition\/success","title":"case success","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition","title":"EventLoopFutureQueue.ContinueCondition","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/previouserror(_:)","title":"case previousError(Error)","type":"case"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/previoussuccess","title":"case previousSuccess","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror","title":"EventLoopFutureQueue.ContinueError","type":"enum"}],"path":"\/documentation\/asynckit\/eventloopfuturequeue","title":"EventLoopFutureQueue","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/init(source:maxconnectionspereventloop:requesttimeout:logger:on:)","title":"init(source: Source, maxConnectionsPerEventLoop: Int, requestTimeout: TimeAmount, logger: Logger, on: EventLoopGroup)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/eventloopgroup","title":"let eventLoopGroup: EventLoopGroup","type":"property"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/maxconnectionspereventloop","title":"let maxConnectionsPerEventLoop: Int","type":"property"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/source","title":"let source: Source","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/pool(for:)","title":"func pool(for: EventLoop) -> EventLoopConnectionPool<Source>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/releaseconnection(_:logger:)","title":"func releaseConnection(Source.Connection, logger: Logger?)","type":"method"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/requestconnection(logger:on:)","title":"func requestConnection(logger: Logger?, on: EventLoop?) -> EventLoopFuture<Source.Connection>","type":"method"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/shutdown()","title":"func shutdown()","type":"method"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/shutdowngracefully(_:)","title":"func shutdownGracefully((Error?) -> Void)","type":"method"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/syncshutdowngracefully()","title":"func syncShutdownGracefully() throws","type":"method"},{"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/withconnection(logger:on:_:)","title":"func withConnection<Result>(logger: Logger?, on: EventLoop?, (Source.Connection) -> EventLoopFuture<Result>) -> EventLoopFuture<Result>","type":"method"}],"path":"\/documentation\/asynckit\/eventloopgroupconnectionpool","title":"EventLoopGroupConnectionPool","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpoolitem\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/asynckit\/connectionpoolitem\/isclosed","title":"var isClosed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpoolitem\/close()","title":"func close() -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/asynckit\/connectionpoolitem","title":"ConnectionPoolItem","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpoolsource\/connection","title":"Connection","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpoolsource\/makeconnection(logger:on:)","title":"func makeConnection(logger: Logger, on: EventLoop) -> EventLoopFuture<Self.Connection>","type":"method"}],"path":"\/documentation\/asynckit\/connectionpoolsource","title":"ConnectionPoolSource","type":"protocol"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/asynckit\/strictmap(_:_:)","title":"func strictMap<A, Res>(A?, (A) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:)","title":"func strictMap<A, B, Res>(A?, B?, (A, B) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:)","title":"func strictMap<A, B, C, Res>(A?, B?, C?, (A, B, C) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:)","title":"func strictMap<A, B, C, D, Res>(A?, B?, C?, D?, (A, B, C, D) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, Res>(A?, B?, C?, D?, E?, (A, B, C, D, E) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, Res>(A?, B?, C?, D?, E?, F?, (A, B, C, D, E, F) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, Res>(A?, B?, C?, D?, E?, F?, G?, (A, B, C, D, E, F, G) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, Res>(A?, B?, C?, D?, E?, F?, G?, H?, (A, B, C, D, E, F, G, H) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, (A, B, C, D, E, F, G, H, I) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, (A, B, C, D, E, F, G, H, I, J) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, (A, B, C, D, E, F, G, H, I, J, K) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, (A, B, C, D, E, F, G, H, I, J, K, L) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, (A, B, C, D, E, F, G, H, I, J, K, L, M) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, N, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, N?, (A, B, C, D, E, F, G, H, I, J, K, L, M, N) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, N?, O?, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, N?, O?, P?, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, N?, O?, P?, Q?, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, N?, O?, P?, Q?, R?, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, N?, O?, P?, Q?, R?, S?, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) throws -> Res) rethrows -> Res?","type":"func"},{"path":"\/documentation\/asynckit\/strictmap(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)","title":"func strictMap<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Res>(A?, B?, C?, D?, E?, F?, G?, H?, I?, J?, K?, L?, M?, N?, O?, P?, Q?, R?, S?, T?, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) throws -> Res) rethrows -> Res?","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynckit\/&(_:_:)","title":"func & <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/&=(_:_:)","title":"func &= <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/*(_:_:)","title":"func * <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/*=(_:_:)","title":"func *= <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/+(_:_:)-90chm","title":"func + <T>(EventLoopFuture<[T]>, EventLoopFuture<[T]>) -> EventLoopFuture<[T]>","type":"op"},{"path":"\/documentation\/asynckit\/+(_:_:)-9v3sm","title":"func + <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/+=(_:_:)-1ja1r","title":"func += <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/+=(_:_:)-9j6ky","title":"func += <T>(inout EventLoopFuture<[T]>, EventLoopFuture<[T]>)","type":"op"},{"path":"\/documentation\/asynckit\/-(_:_:)-2kpb7","title":"func - <T>(EventLoopFuture<[T]>, EventLoopFuture<[T]>) -> EventLoopFuture<[T]>","type":"op"},{"path":"\/documentation\/asynckit\/-(_:_:)-49hl6","title":"func - <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/-=(_:_:)-1zz2s","title":"func -= <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/-=(_:_:)-3g43g","title":"func -= <T>(inout EventLoopFuture<[T]>, EventLoopFuture<[T]>)","type":"op"},{"path":"\/documentation\/asynckit\/\/(_:_:)","title":"func \/ <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/\/=(_:_:)","title":"func \/= <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/_(_:_:)-2dfps","title":"func | <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/_(_:_:)-2my9p","title":"func < <T, Other>(EventLoopFuture<T>, EventLoopFuture<Other>) -> EventLoopFuture<Bool>","type":"op"},{"path":"\/documentation\/asynckit\/_(_:_:)-31rsu","title":"func ^ <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/_(_:_:)-322of","title":"func > <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<Bool>","type":"op"},{"path":"\/documentation\/asynckit\/_(_:_:)-3946l","title":"func % <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/_(_:_:)-91ylh","title":"func > <T, Other>(EventLoopFuture<T>, EventLoopFuture<Other>) -> EventLoopFuture<Bool>","type":"op"},{"path":"\/documentation\/asynckit\/_=(_:_:)-1a4qv","title":"func <= <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<Bool>","type":"op"},{"path":"\/documentation\/asynckit\/_=(_:_:)-3053j","title":"func |= <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/_=(_:_:)-3722r","title":"func <= <T, Other>(EventLoopFuture<T>, EventLoopFuture<Other>) -> EventLoopFuture<Bool>","type":"op"},{"path":"\/documentation\/asynckit\/_=(_:_:)-5eylq","title":"func %= <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/_=(_:_:)-5xbfd","title":"func ^= <T>(inout EventLoopFuture<T>, EventLoopFuture<T>)","type":"op"},{"path":"\/documentation\/asynckit\/_=(_:_:)-6px3o","title":"func >= <T, Other>(EventLoopFuture<T>, EventLoopFuture<Other>) -> EventLoopFuture<Bool>","type":"op"},{"path":"\/documentation\/asynckit\/_=(_:_:)-801zo","title":"func >= <T>(EventLoopFuture<T>, EventLoopFuture<T>) -> EventLoopFuture<Bool>","type":"op"},{"path":"\/documentation\/asynckit\/__(_:_:)-66ris","title":"func >> <T, RHS>(EventLoopFuture<T>, EventLoopFuture<RHS>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/__(_:_:)-antu","title":"func << <T, RHS>(EventLoopFuture<T>, EventLoopFuture<RHS>) -> EventLoopFuture<T>","type":"op"},{"path":"\/documentation\/asynckit\/__=(_:_:)-3y1th","title":"func >>= <T, RHS>(inout EventLoopFuture<T>, EventLoopFuture<RHS>)","type":"op"},{"path":"\/documentation\/asynckit\/__=(_:_:)-9ipz4","title":"func <<= <T, RHS>(inout EventLoopFuture<T>, EventLoopFuture<RHS>)","type":"op"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpoolerror\/shutdown","title":"case shutdown","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpoolerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asynckit\/connectionpoolerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpoolerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/asynckit\/connectionpoolerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/asynckit\/connectionpoolerror","title":"ConnectionPoolError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpooltimeouterror\/connectionrequesttimeout","title":"case connectionRequestTimeout","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpooltimeouterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asynckit\/connectionpooltimeouterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asynckit\/connectionpooltimeouterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/asynckit\/connectionpooltimeouterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/asynckit\/connectionpooltimeouterror","title":"ConnectionPoolTimeoutError","type":"enum"}],"path":"\/documentation\/asynckit","title":"AsyncKit","type":"module"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/backtrace\/backtrace\/install()","title":"static func install()","type":"method"},{"path":"\/documentation\/backtrace\/backtrace\/install(signals:)","title":"static func install(signals: [CInt])","type":"method"},{"path":"\/documentation\/backtrace\/backtrace\/print()","title":"static func print()","type":"method"}],"path":"\/documentation\/backtrace\/backtrace","title":"Backtrace","type":"enum"}],"path":"\/documentation\/backtrace","title":"Backtrace","type":"module"},{"path":"\/documentation\/coperatingsystem","title":"COperatingSystem","type":"module"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/'..(_:_:)-8selm","title":"static func .. <AppendedValue>(CasePath<Root, Value>, CasePath<Value, AppendedValue>) -> CasePath<Root, AppendedValue>","type":"op"},{"path":"\/documentation\/casepaths\/casepath\/'..(_:_:)-9emru","title":"static func .. <AppendedValue>(CasePath<Root, Value>, (AppendedValue) -> Value) -> CasePath<Root, AppendedValue>","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/init(embed:extract:)","title":"init(embed: (Value) -> Root, extract: (Root) -> Value?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/appending(path:)","title":"func appending<AppendedValue>(path: CasePath<Value, AppendedValue>) -> CasePath<Root, AppendedValue>","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/embed(_:)","title":"func embed(Value) -> Root","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/extract(from:)","title":"func extract(from: Root) -> Value?","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/modify(_:_:)","title":"func modify<Result>(inout Root, (inout Value) throws -> Result) throws -> Result","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/description-swift.type.property","title":"static var description: CasePath<String, Value>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/never","title":"static var never: CasePath<Root, Never>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/rawvalue","title":"static var rawValue: CasePath<Root, Value>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/self","title":"static var `self`: CasePath<Root, Root>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/case(_:)-3nw1d","title":"static func `case`((Value) -> Root) -> CasePath<Root, Value>","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/case(_:)-5s7mr","title":"static func `case`(Root) -> CasePath<Root, Value>","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/constant(_:)","title":"static func constant(Value) -> CasePath<Root, Value>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/data-2dxes","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/data-5lkwe","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/string-624kp","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/string-xf3g","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/substring-352d6","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/substring-8p3zl","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/casepaths\/casepath\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/apply(_:)","title":"func apply(Value) -> Root","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/unapply(_:)","title":"func unapply(Root) throws -> Value","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/case(_:)-42i4c","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/case(_:)-9xk7i","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/casepaths\/casepath\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/casepaths\/casepath\/conversion-implementations","title":"Conversion Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/casepaths\/casepath\/description-swift.property","title":"var description: String","type":"property"}],"path":"\/documentation\/casepaths\/casepath\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/casepaths\/casepath","title":"CasePath","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/casepaths\/extract(_:)-2jy2a","title":"func extract<Root, Value>((Value) -> Root) -> (Root) -> Value?","type":"func"},{"path":"\/documentation\/casepaths\/extract(_:)-5ivuf","title":"func extract<Root, Value>((Value) -> Root?) -> (Root?) -> Value?","type":"func"},{"path":"\/documentation\/casepaths\/extract(case:from:)-82wth","title":"func extract<Root, Value>(case: (Value) -> Root?, from: Root?) -> Value?","type":"func"},{"path":"\/documentation\/casepaths\/extract(case:from:)-89rof","title":"func extract<Root, Value>(case: (Value) -> Root, from: Root) -> Value?","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/casepaths\/'..(_:_:)","title":"func .. <Root, Value, AppendedValue>((Root) -> Value?, (AppendedValue) -> Value) -> (Root) -> AppendedValue?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-1zudw","title":"func \/ <Root>(Root?) -> CasePath<Root?, Void>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-2n5ny","title":"func \/ <Root>(Root.Type) -> CasePath<Root, Root>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-2r5nq","title":"func \/ <Root, Value>((Value) -> Root?) -> CasePath<Root?, Value>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-4nrup","title":"func \/ <Root>(Root) -> CasePath<Root, Void>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-4qhtw","title":"func \/ <Root>(CasePath<Root, Root>) -> CasePath<Root, Root>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-4v1w8","title":"func \/ <Root>(Root) -> (Root) -> Void?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-82yvm","title":"func \/ <Root, Value>((Value) -> Root) -> CasePath<Root, Value>","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-8h7yj","title":"func \/ <Root, Value>((Value) -> Root?) -> (Root?) -> Value?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-9oq0w","title":"func \/ <Root>(Root) -> (Root?) -> Void?","type":"op"},{"path":"\/documentation\/casepaths\/\/(_:)-9tuff","title":"func \/ <Root, Value>((Value) -> Root) -> (Root) -> Value?","type":"op"},{"path":"\/documentation\/casepaths\/~=(_:_:)","title":"func ~= <Root, Value>(CasePath<Root, Value>, Root) -> Bool","type":"op"}],"path":"\/documentation\/casepaths","title":"CasePaths","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/activityindicator\/activity","title":"var activity: A","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/activityindicator\/fail()","title":"func fail()","type":"method"},{"path":"\/documentation\/consolekit\/activityindicator\/start(refreshrate:)","title":"func start(refreshRate: Int)","type":"method"},{"path":"\/documentation\/consolekit\/activityindicator\/succeed()","title":"func succeed()","type":"method"}],"path":"\/documentation\/consolekit\/activityindicator","title":"ActivityIndicator","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/argument\/init(name:help:completion:)","title":"init(name: String, help: String, completion: CompletionAction)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/argument\/completion","title":"let completion: CompletionAction","type":"property"},{"path":"\/documentation\/consolekit\/argument\/help","title":"let help: String","type":"property"},{"path":"\/documentation\/consolekit\/argument\/initialized","title":"var initialized: Bool","type":"property"},{"path":"\/documentation\/consolekit\/argument\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/consolekit\/argument\/projectedvalue","title":"var projectedValue: Argument<Value>","type":"property"},{"path":"\/documentation\/consolekit\/argument\/wrappedvalue","title":"var wrappedValue: Value","type":"property"}],"path":"\/documentation\/consolekit\/argument","title":"Argument","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/flag\/init(name:short:help:)","title":"init(name: String, short: Character?, help: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/flag\/help","title":"let help: String","type":"property"},{"path":"\/documentation\/consolekit\/flag\/initialized","title":"var initialized: Bool","type":"property"},{"path":"\/documentation\/consolekit\/flag\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/consolekit\/flag\/projectedvalue","title":"var projectedValue: Flag","type":"property"},{"path":"\/documentation\/consolekit\/flag\/short","title":"let short: Character?","type":"property"},{"path":"\/documentation\/consolekit\/flag\/wrappedvalue","title":"var wrappedValue: Bool","type":"property"}],"path":"\/documentation\/consolekit\/flag","title":"Flag","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/option\/init(name:short:help:completion:)","title":"init(name: String, short: Character?, help: String, completion: CompletionAction)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/option\/completion","title":"let completion: CompletionAction","type":"property"},{"path":"\/documentation\/consolekit\/option\/help","title":"let help: String","type":"property"},{"path":"\/documentation\/consolekit\/option\/initialized","title":"var initialized: Bool","type":"property"},{"path":"\/documentation\/consolekit\/option\/ispresent","title":"var isPresent: Bool","type":"property"},{"path":"\/documentation\/consolekit\/option\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/consolekit\/option\/projectedvalue","title":"var projectedValue: Option<Value>","type":"property"},{"path":"\/documentation\/consolekit\/option\/short","title":"let short: Character?","type":"property"},{"path":"\/documentation\/consolekit\/option\/wrappedvalue","title":"var wrappedValue: Value?","type":"property"}],"path":"\/documentation\/consolekit\/option","title":"Option","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/terminal\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/terminal\/size","title":"var size: (width: Int, height: Int)","type":"property"},{"path":"\/documentation\/consolekit\/terminal\/userinfo","title":"var userInfo: [AnyHashable : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/terminal\/clear(_:)","title":"func clear(ConsoleClear)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/input(issecure:)","title":"func input(isSecure: Bool) -> String","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/output(_:newline:)","title":"func output(ConsoleText, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/report(error:newline:)","title":"func report(error: String, newLine: Bool)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/terminal\/confirmoverride","title":"var confirmOverride: Bool?","type":"property"},{"path":"\/documentation\/consolekit\/terminal\/stylizedoutputoverride","title":"var stylizedOutputOverride: Bool?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/terminal\/ask(_:issecure:)","title":"func ask(ConsoleText, isSecure: Bool) -> String","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/center(_:padding:)-384sw","title":"func center([String], padding: Character) -> [String]","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/center(_:padding:)-4uaz","title":"func center(String, padding: Character) -> String","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/choose(_:from:)","title":"func choose<T>(ConsoleText, from: [T]) -> T","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/choose(_:from:display:)","title":"func choose<T>(ConsoleText, from: [T], display: (T) -> ConsoleText) -> T","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/clear(lines:)","title":"func clear(lines: Int)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/confirm(_:)","title":"func confirm(ConsoleText) -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/customactivity(frames:success:failure:)","title":"func customActivity(frames: [ConsoleText], success: String, failure: String) -> ActivityIndicator<CustomActivity>","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/customactivity(frames:success:failure:color:)","title":"func customActivity(frames: [String], success: String, failure: String, color: ConsoleColor) -> ActivityIndicator<CustomActivity>","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/didoutputlines(count:)","title":"func didOutputLines(count: Int)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/error(_:newline:)","title":"func error(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/info(_:newline:)","title":"func info(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/input()","title":"func input() -> String","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/loadingbar(title:targetqueue:)","title":"func loadingBar(title: String, targetQueue: DispatchQueue?) -> ActivityIndicator<LoadingBar>","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/output(_:)","title":"func output(ConsoleText)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/output(_:style:newline:)","title":"func output(String, style: ConsoleStyle, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/popephemeral()","title":"func popEphemeral()","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/print(_:newline:)","title":"func print(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/progressbar(title:targetqueue:)","title":"func progressBar(title: String, targetQueue: DispatchQueue?) -> ActivityIndicator<ProgressBar>","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/pushephemeral()","title":"func pushEphemeral()","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/run(_:input:)","title":"func run(AnyCommand, input: CommandInput) throws","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/run(_:with:)","title":"func run(AnyCommand, with: CommandContext) throws","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/success(_:newline:)","title":"func success(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/wait(seconds:)","title":"func wait(seconds: Double)","type":"method"},{"path":"\/documentation\/consolekit\/terminal\/warning(_:newline:)","title":"func warning(String, newLine: Bool)","type":"method"}],"path":"\/documentation\/consolekit\/terminal\/console-implementations","title":"Console Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/terminal","title":"Terminal","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/activitybar\/title","title":"var title: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/activitybar\/renderactivebar(tick:width:)","title":"func renderActiveBar(tick: UInt, width: Int) -> ConsoleText","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/activitybar\/width","title":"static var width: Int","type":"property"}],"path":"\/documentation\/consolekit\/activitybar","title":"ActivityBar","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/activityindicatortype\/newactivity(for:targetqueue:)","title":"func newActivity(for: Console, targetQueue: DispatchQueue?) -> ActivityIndicator<Self>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/consolekit\/activitybar\/outputactivityindicator(to:state:)","title":"func outputActivityIndicator(to: Console, state: ActivityIndicatorState)","type":"method"}],"title":"ActivityBar Implementations","type":"groupMarker"}],"path":"\/documentation\/consolekit\/activityindicatortype\/outputactivityindicator(to:state:)","title":"func outputActivityIndicator(to: Console, state: ActivityIndicatorState)","type":"method"}],"path":"\/documentation\/consolekit\/activityindicatortype","title":"ActivityIndicatorType","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/anycommand\/help","title":"var help: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/consolekit\/anycommand\/outputautocomplete(using:)-18tj","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"}],"title":"AnyCommand Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/consolekit\/command\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"}],"title":"Command Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/consolekit\/commandgroup\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"}],"title":"CommandGroup Implementations","type":"groupMarker"}],"path":"\/documentation\/consolekit\/anycommand\/outputautocomplete(using:)-9hk15","title":"func outputAutoComplete(using: inout CommandContext) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/consolekit\/anycommand\/outputhelp(using:)-698we","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"title":"AnyCommand Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/consolekit\/command\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"title":"Command Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/consolekit\/commandgroup\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext) throws","type":"method"}],"title":"CommandGroup Implementations","type":"groupMarker"}],"path":"\/documentation\/consolekit\/anycommand\/outputhelp(using:)-4s3f3","title":"func outputHelp(using: inout CommandContext) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/consolekit\/anycommand\/rendercompletionfunctions(using:shell:)-1o488","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"}],"title":"AnyCommand Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/consolekit\/command\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"}],"title":"Command Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/consolekit\/commandgroup\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"}],"title":"CommandGroup Implementations","type":"groupMarker"}],"path":"\/documentation\/consolekit\/anycommand\/rendercompletionfunctions(using:shell:)-639vr","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/consolekit\/anycommand\/rendercompletionscript(using:shell:)","title":"func renderCompletionScript(using: CommandContext, shell: Shell) -> String","type":"method"},{"children":[{"children":[{"path":"\/documentation\/consolekit\/command\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"title":"Command Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/consolekit\/commandgroup\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"title":"CommandGroup Implementations","type":"groupMarker"}],"path":"\/documentation\/consolekit\/anycommand\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"path":"\/documentation\/consolekit\/anycommand","title":"AnyCommand","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/consolekit\/command\/signature","title":"Signature","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/command\/run(using:signature:)","title":"func run(using: CommandContext, signature: Self.Signature) throws","type":"method"}],"path":"\/documentation\/consolekit\/command","title":"Command","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commandgroup\/commands","title":"var commands: [String : AnyCommand]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/consolekit\/commandgroup\/defaultcommand-4u6fw","title":"var defaultCommand: AnyCommand?","type":"property"}],"title":"CommandGroup Implementations","type":"groupMarker"}],"path":"\/documentation\/consolekit\/commandgroup\/defaultcommand-9qpuy","title":"var defaultCommand: AnyCommand?","type":"property"}],"path":"\/documentation\/consolekit\/commandgroup","title":"CommandGroup","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commandsignature\/init()","title":"init()","type":"init"},{"path":"\/documentation\/consolekit\/commandsignature\/init(from:)","title":"init(from: inout CommandInput) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commandsignature\/outputhelp(help:using:)","title":"func outputHelp(help: String, using: inout CommandContext)","type":"method"}],"path":"\/documentation\/consolekit\/commandsignature","title":"CommandSignature","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/console\/confirmoverride","title":"var confirmOverride: Bool?","type":"property"},{"path":"\/documentation\/consolekit\/console\/size","title":"var size: (width: Int, height: Int)","type":"property"},{"path":"\/documentation\/consolekit\/console\/stylizedoutputoverride","title":"var stylizedOutputOverride: Bool?","type":"property"},{"path":"\/documentation\/consolekit\/console\/userinfo","title":"var userInfo: [AnyHashable : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/console\/ask(_:issecure:)","title":"func ask(ConsoleText, isSecure: Bool) -> String","type":"method"},{"path":"\/documentation\/consolekit\/console\/center(_:padding:)-49ytm","title":"func center([String], padding: Character) -> [String]","type":"method"},{"path":"\/documentation\/consolekit\/console\/center(_:padding:)-6h748","title":"func center(String, padding: Character) -> String","type":"method"},{"path":"\/documentation\/consolekit\/console\/choose(_:from:)","title":"func choose<T>(ConsoleText, from: [T]) -> T","type":"method"},{"path":"\/documentation\/consolekit\/console\/choose(_:from:display:)","title":"func choose<T>(ConsoleText, from: [T], display: (T) -> ConsoleText) -> T","type":"method"},{"path":"\/documentation\/consolekit\/console\/clear(_:)","title":"func clear(ConsoleClear)","type":"method"},{"path":"\/documentation\/consolekit\/console\/clear(lines:)","title":"func clear(lines: Int)","type":"method"},{"path":"\/documentation\/consolekit\/console\/confirm(_:)","title":"func confirm(ConsoleText) -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/console\/customactivity(frames:success:failure:)","title":"func customActivity(frames: [ConsoleText], success: String, failure: String) -> ActivityIndicator<CustomActivity>","type":"method"},{"path":"\/documentation\/consolekit\/console\/customactivity(frames:success:failure:color:)","title":"func customActivity(frames: [String], success: String, failure: String, color: ConsoleColor) -> ActivityIndicator<CustomActivity>","type":"method"},{"path":"\/documentation\/consolekit\/console\/didoutputlines(count:)","title":"func didOutputLines(count: Int)","type":"method"},{"path":"\/documentation\/consolekit\/console\/error(_:newline:)","title":"func error(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/console\/info(_:newline:)","title":"func info(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/console\/input()","title":"func input() -> String","type":"method"},{"path":"\/documentation\/consolekit\/console\/input(issecure:)","title":"func input(isSecure: Bool) -> String","type":"method"},{"path":"\/documentation\/consolekit\/console\/loadingbar(title:targetqueue:)","title":"func loadingBar(title: String, targetQueue: DispatchQueue?) -> ActivityIndicator<LoadingBar>","type":"method"},{"path":"\/documentation\/consolekit\/console\/output(_:)","title":"func output(ConsoleText)","type":"method"},{"path":"\/documentation\/consolekit\/console\/output(_:newline:)","title":"func output(ConsoleText, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/console\/output(_:style:newline:)","title":"func output(String, style: ConsoleStyle, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/console\/popephemeral()","title":"func popEphemeral()","type":"method"},{"path":"\/documentation\/consolekit\/console\/print(_:newline:)","title":"func print(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/console\/progressbar(title:targetqueue:)","title":"func progressBar(title: String, targetQueue: DispatchQueue?) -> ActivityIndicator<ProgressBar>","type":"method"},{"path":"\/documentation\/consolekit\/console\/pushephemeral()","title":"func pushEphemeral()","type":"method"},{"path":"\/documentation\/consolekit\/console\/report(error:newline:)","title":"func report(error: String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/console\/run(_:input:)","title":"func run(AnyCommand, input: CommandInput) throws","type":"method"},{"path":"\/documentation\/consolekit\/console\/run(_:with:)","title":"func run(AnyCommand, with: CommandContext) throws","type":"method"},{"path":"\/documentation\/consolekit\/console\/success(_:newline:)","title":"func success(String, newLine: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/console\/wait(seconds:)","title":"func wait(seconds: Double)","type":"method"},{"path":"\/documentation\/consolekit\/console\/warning(_:newline:)","title":"func warning(String, newLine: Bool)","type":"method"}],"path":"\/documentation\/consolekit\/console","title":"Console","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commandcontext\/init(console:input:)","title":"init(console: Console, input: CommandInput)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commandcontext\/application","title":"var application: Application","type":"property"},{"path":"\/documentation\/consolekit\/commandcontext\/console","title":"var console: Console","type":"property"},{"path":"\/documentation\/consolekit\/commandcontext\/input","title":"var input: CommandInput","type":"property"},{"path":"\/documentation\/consolekit\/commandcontext\/userinfo","title":"var userInfo: [AnyHashable : Any]","type":"property"}],"path":"\/documentation\/consolekit\/commandcontext","title":"CommandContext","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commandinput\/init(arguments:)","title":"init(arguments: [String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commandinput\/arguments","title":"var arguments: [String]","type":"property"},{"path":"\/documentation\/consolekit\/commandinput\/executable","title":"var executable: String","type":"property"},{"path":"\/documentation\/consolekit\/commandinput\/executablepath","title":"var executablePath: [String]","type":"property"}],"path":"\/documentation\/consolekit\/commandinput","title":"CommandInput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commands\/init(commands:defaultcommand:enableautocomplete:)","title":"init(commands: [String : AnyCommand], defaultCommand: AnyCommand?, enableAutocomplete: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commands\/commands","title":"var commands: [String : AnyCommand]","type":"property"},{"path":"\/documentation\/consolekit\/commands\/defaultcommand","title":"var defaultCommand: AnyCommand?","type":"property"},{"path":"\/documentation\/consolekit\/commands\/enableautocomplete","title":"var enableAutocomplete: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commands\/group(help:)","title":"func group(help: String) -> CommandGroup","type":"method"},{"path":"\/documentation\/consolekit\/commands\/use(_:as:isdefault:)","title":"func use(AnyCommand, as: String, isDefault: Bool)","type":"method"}],"path":"\/documentation\/consolekit\/commands","title":"Commands","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/completionaction\/init(_:)","title":"init([Shell : String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/completionaction\/expressions","title":"let expressions: [Shell : String]","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/consolekit\/completionaction\/subscript(_:)","title":"subscript(Shell) -> String?","type":"subscript"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/completionaction\/default","title":"static var `default`: CompletionAction","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/completionaction\/directories()","title":"static func directories() -> CompletionAction","type":"method"},{"path":"\/documentation\/consolekit\/completionaction\/files(withextensions:)","title":"static func files(withExtensions: [String]) -> CompletionAction","type":"method"},{"path":"\/documentation\/consolekit\/completionaction\/values(_:)","title":"static func values([String]) -> CompletionAction","type":"method"},{"path":"\/documentation\/consolekit\/completionaction\/values(of:)","title":"static func values<C>(of: C.Type) -> CompletionAction","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/completionaction\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (Shell, String)...)","type":"init"}],"path":"\/documentation\/consolekit\/completionaction\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/completionaction","title":"CompletionAction","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoleerror\/identifier","title":"let identifier: String","type":"property"},{"path":"\/documentation\/consolekit\/consoleerror\/reason","title":"let reason: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoleerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/consolekit\/consoleerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/consoleerror","title":"ConsoleError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolelogger\/init(label:console:level:metadata:)","title":"init(label: String, console: Console, level: Logger.Level, metadata: Logger.Metadata)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolelogger\/console","title":"let console: Console","type":"property"},{"path":"\/documentation\/consolekit\/consolelogger\/label","title":"let label: String","type":"property"},{"path":"\/documentation\/consolekit\/consolelogger\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/consolekit\/consolelogger\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolelogger\/log(level:message:metadata:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolelogger\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolelogger\/log(level:message:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/consolekit\/consolelogger\/loghandler-implementations","title":"LogHandler Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/consolelogger","title":"ConsoleLogger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolestyle\/init(color:background:isbold:)","title":"init(color: ConsoleColor?, background: ConsoleColor?, isBold: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolestyle\/background","title":"let background: ConsoleColor?","type":"property"},{"path":"\/documentation\/consolekit\/consolestyle\/color","title":"let color: ConsoleColor?","type":"property"},{"path":"\/documentation\/consolekit\/consolestyle\/isbold","title":"let isBold: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolestyle\/error","title":"static var error: ConsoleStyle","type":"property"},{"path":"\/documentation\/consolekit\/consolestyle\/info","title":"static var info: ConsoleStyle","type":"property"},{"path":"\/documentation\/consolekit\/consolestyle\/plain","title":"static var plain: ConsoleStyle","type":"property"},{"path":"\/documentation\/consolekit\/consolestyle\/success","title":"static var success: ConsoleStyle","type":"property"},{"path":"\/documentation\/consolekit\/consolestyle\/warning","title":"static var warning: ConsoleStyle","type":"property"}],"path":"\/documentation\/consolekit\/consolestyle","title":"ConsoleStyle","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/init(arrayliteral:)","title":"init(arrayLiteral: ConsoleTextFragment...)","type":"init"},{"path":"\/documentation\/consolekit\/consoletext\/init(fragments:)","title":"init(fragments: [ConsoleTextFragment])","type":"init"},{"path":"\/documentation\/consolekit\/consoletext\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/consolekit\/consoletext\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/consolekit\/consoletext\/fragments","title":"var fragments: [ConsoleTextFragment]","type":"property"},{"path":"\/documentation\/consolekit\/consoletext\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/subscript(_:)-3rebi","title":"subscript(Int) -> ConsoleTextFragment","type":"subscript"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/newline","title":"static let newLine: ConsoleText","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/consolekit\/consoletext\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/consolekit\/consoletext\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/consolekit\/consoletext\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/consolekit\/consoletext\/underestimatedcount-5pg90","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/map(_:)-9i4gy","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/subscript(_:)-2dlcl","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/consolekit\/consoletext\/subscript(_:)-3dkh6","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/consolekit\/consoletext\/subscript(_:)-84lbk","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/consolekit\/consoletext\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/consolekit\/consoletext\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/stringinterpolation\/init(literalcapacity:interpolationcount:)","title":"init(literalCapacity: Int, interpolationCount: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/stringinterpolation\/fragments","title":"var fragments: [ConsoleTextFragment]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/stringinterpolation\/appendinterpolation(_:color:background:isbold:)","title":"func appendInterpolation(String, color: ConsoleColor?, background: ConsoleColor?, isBold: Bool)","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/stringinterpolation\/appendinterpolation(_:style:)","title":"func appendInterpolation(String, style: ConsoleStyle)","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/stringinterpolation\/appendliteral(_:)","title":"func appendLiteral(String)","type":"method"}],"path":"\/documentation\/consolekit\/consoletext\/stringinterpolation","title":"ConsoleText.StringInterpolation","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/init(stringinterpolation:)","title":"init(stringInterpolation: ConsoleText.StringInterpolation)","type":"init"}],"path":"\/documentation\/consolekit\/consoletext\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/consolekit\/consoletext\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/consolekit\/consoletext\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/consolekit\/consoletext\/underestimatedcount-669ck","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletext\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/flatmap(_:)-7avu8","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/flatmap(_:)-8o7cc","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/map(_:)-4eqjx","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/consolekit\/consoletext\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/consolekit\/consoletext\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/consoletext","title":"ConsoleText","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletextfragment\/init(string:style:)","title":"init(string: String, style: ConsoleStyle)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoletextfragment\/string","title":"var string: String","type":"property"},{"path":"\/documentation\/consolekit\/consoletextfragment\/style","title":"var style: ConsoleStyle","type":"property"}],"path":"\/documentation\/consolekit\/consoletextfragment","title":"ConsoleTextFragment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/customactivity\/init(frames:success:failure:)","title":"init(frames: [ConsoleText], success: String, failure: String)","type":"init"},{"path":"\/documentation\/consolekit\/customactivity\/init(frames:success:failure:color:)","title":"init(frames: [String], success: String, failure: String, color: ConsoleColor)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/customactivity\/failure","title":"let failure: String","type":"property"},{"path":"\/documentation\/consolekit\/customactivity\/frames","title":"let frames: [ConsoleText]","type":"property"},{"path":"\/documentation\/consolekit\/customactivity\/success","title":"let success: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/customactivity\/outputactivityindicator(to:state:)","title":"func outputActivityIndicator(to: Console, state: ActivityIndicatorState)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/customactivity\/newactivity(for:targetqueue:)","title":"func newActivity(for: Console, targetQueue: DispatchQueue?) -> ActivityIndicator<Self>","type":"method"}],"path":"\/documentation\/consolekit\/customactivity\/activityindicatortype-implementations","title":"ActivityIndicatorType Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/customactivity","title":"CustomActivity","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/loadingbar\/title","title":"var title: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/loadingbar\/renderactivebar(tick:width:)","title":"func renderActiveBar(tick: UInt, width: Int) -> ConsoleText","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/loadingbar\/outputactivityindicator(to:state:)","title":"func outputActivityIndicator(to: Console, state: ActivityIndicatorState)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/loadingbar\/width","title":"static var width: Int","type":"property"}],"path":"\/documentation\/consolekit\/loadingbar\/activitybar-implementations","title":"ActivityBar Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/loadingbar\/newactivity(for:targetqueue:)","title":"func newActivity(for: Console, targetQueue: DispatchQueue?) -> ActivityIndicator<Self>","type":"method"}],"path":"\/documentation\/consolekit\/loadingbar\/activityindicatortype-implementations","title":"ActivityIndicatorType Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/loadingbar","title":"LoadingBar","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/progressbar\/currentprogress","title":"var currentProgress: Double","type":"property"},{"path":"\/documentation\/consolekit\/progressbar\/title","title":"var title: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/progressbar\/renderactivebar(tick:width:)","title":"func renderActiveBar(tick: UInt, width: Int) -> ConsoleText","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/progressbar\/outputactivityindicator(to:state:)","title":"func outputActivityIndicator(to: Console, state: ActivityIndicatorState)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/progressbar\/width","title":"static var width: Int","type":"property"}],"path":"\/documentation\/consolekit\/progressbar\/activitybar-implementations","title":"ActivityBar Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/progressbar\/newactivity(for:targetqueue:)","title":"func newActivity(for: Console, targetQueue: DispatchQueue?) -> ActivityIndicator<Self>","type":"method"}],"path":"\/documentation\/consolekit\/progressbar\/activityindicatortype-implementations","title":"ActivityIndicatorType Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/progressbar","title":"ProgressBar","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/consolekit\/+(_:_:)","title":"func + (ConsoleText, ConsoleText) -> ConsoleText","type":"op"},{"path":"\/documentation\/consolekit\/+=(_:_:)","title":"func += (inout ConsoleText, ConsoleText)","type":"op"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/consolekit\/activityindicatorstate\/active(tick:)","title":"case active(tick: UInt)","type":"case"},{"path":"\/documentation\/consolekit\/activityindicatorstate\/failure","title":"case failure","type":"case"},{"path":"\/documentation\/consolekit\/activityindicatorstate\/ready","title":"case ready","type":"case"},{"path":"\/documentation\/consolekit\/activityindicatorstate\/success","title":"case success","type":"case"}],"path":"\/documentation\/consolekit\/activityindicatorstate","title":"ActivityIndicatorState","type":"enum"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commanderror\/==(_:_:)","title":"static func == (CommandError, CommandError) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commanderror\/invalidargumenttype(_:type:)","title":"case invalidArgumentType(String, type: Any.Type)","type":"case"},{"path":"\/documentation\/consolekit\/commanderror\/invalidoptiontype(_:type:)","title":"case invalidOptionType(String, type: Any.Type)","type":"case"},{"path":"\/documentation\/consolekit\/commanderror\/missingcommand","title":"case missingCommand","type":"case"},{"path":"\/documentation\/consolekit\/commanderror\/missingrequiredargument(_:)","title":"case missingRequiredArgument(String)","type":"case"},{"path":"\/documentation\/consolekit\/commanderror\/unknowncommand(_:available:)","title":"case unknownCommand(String, available: [String])","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commanderror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commanderror\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/consolekit\/commanderror\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commanderror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/consolekit\/commanderror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/commanderror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/consolekit\/commanderror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/commanderror","title":"CommandError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoleclear\/line","title":"case line","type":"case"},{"path":"\/documentation\/consolekit\/consoleclear\/screen","title":"case screen","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consoleclear\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/consolekit\/consoleclear\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/consoleclear","title":"ConsoleClear","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/consolekit\/consolecolor\/black","title":"case black","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/blue","title":"case blue","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightblack","title":"case brightBlack","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightblue","title":"case brightBlue","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightcyan","title":"case brightCyan","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightgreen","title":"case brightGreen","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightmagenta","title":"case brightMagenta","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightred","title":"case brightRed","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightwhite","title":"case brightWhite","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/brightyellow","title":"case brightYellow","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/custom(r:g:b:)","title":"case custom(r: UInt8, g: UInt8, b: UInt8)","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/cyan","title":"case cyan","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/green","title":"case green","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/magenta","title":"case magenta","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/palette(_:)","title":"case palette(UInt8)","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/red","title":"case red","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/white","title":"case white","type":"case"},{"path":"\/documentation\/consolekit\/consolecolor\/yellow","title":"case yellow","type":"case"}],"path":"\/documentation\/consolekit\/consolecolor","title":"ConsoleColor","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/consolekit\/shell\/bash","title":"case bash","type":"case"},{"path":"\/documentation\/consolekit\/shell\/zsh","title":"case zsh","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/consolekit\/shell\/init(_:)","title":"init?(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/shell\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/consolekit\/shell\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/consolekit\/shell\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/consolekit\/shell\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/consolekit\/shell\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/consolekit\/shell\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/consolekit\/shell","title":"Shell","type":"enum"}],"path":"\/documentation\/consolekit","title":"ConsoleKit","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/counter\/init(label:dimensions:)","title":"convenience init(label: String, dimensions: [(String, String)])","type":"init"},{"path":"\/documentation\/coremetrics\/counter\/init(label:dimensions:handler:)","title":"init(label: String, dimensions: [(String, String)], handler: CounterHandler)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/counter\/dimensions","title":"let dimensions: [(String, String)]","type":"property"},{"path":"\/documentation\/coremetrics\/counter\/label","title":"let label: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/counter\/destroy()","title":"func destroy()","type":"method"},{"path":"\/documentation\/coremetrics\/counter\/increment()","title":"func increment()","type":"method"},{"path":"\/documentation\/coremetrics\/counter\/increment(by:)","title":"func increment<DataType>(by: DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/counter\/reset()","title":"func reset()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/counter\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/coremetrics\/counter\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/coremetrics\/counter","title":"Counter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/init(label:dimensions:)","title":"convenience init(label: String, dimensions: [(String, String)])","type":"init"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/init(label:dimensions:handler:)","title":"init(label: String, dimensions: [(String, String)], handler: FloatingPointCounterHandler)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/dimensions","title":"let dimensions: [(String, String)]","type":"property"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/label","title":"let label: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/destroy()","title":"func destroy()","type":"method"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/increment()","title":"func increment()","type":"method"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/increment(by:)","title":"func increment<DataType>(by: DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/reset()","title":"func reset()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/floatingpointcounter\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/coremetrics\/floatingpointcounter\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/coremetrics\/floatingpointcounter","title":"FloatingPointCounter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/gauge\/init(label:dimensions:)","title":"convenience init(label: String, dimensions: [(String, String)])","type":"init"}],"path":"\/documentation\/coremetrics\/gauge","title":"Gauge","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/init(factories:)","title":"init(factories: [MetricsFactory])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/destroycounter(_:)","title":"func destroyCounter(CounterHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/destroyfloatingpointcounter(_:)","title":"func destroyFloatingPointCounter(FloatingPointCounterHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/destroyrecorder(_:)","title":"func destroyRecorder(RecorderHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/destroytimer(_:)","title":"func destroyTimer(TimerHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/makecounter(label:dimensions:)","title":"func makeCounter(label: String, dimensions: [(String, String)]) -> CounterHandler","type":"method"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/makefloatingpointcounter(label:dimensions:)","title":"func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler","type":"method"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/makerecorder(label:dimensions:aggregate:)","title":"func makeRecorder(label: String, dimensions: [(String, String)], aggregate: Bool) -> RecorderHandler","type":"method"},{"path":"\/documentation\/coremetrics\/multiplexmetricshandler\/maketimer(label:dimensions:)","title":"func makeTimer(label: String, dimensions: [(String, String)]) -> TimerHandler","type":"method"}],"path":"\/documentation\/coremetrics\/multiplexmetricshandler","title":"MultiplexMetricsHandler","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/destroycounter(_:)","title":"func destroyCounter(CounterHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/destroyfloatingpointcounter(_:)","title":"func destroyFloatingPointCounter(FloatingPointCounterHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/destroyrecorder(_:)","title":"func destroyRecorder(RecorderHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/destroytimer(_:)","title":"func destroyTimer(TimerHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/increment(by:)-3li5k","title":"func increment(by: Int64)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/increment(by:)-7bah6","title":"func increment(by: Double)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/makecounter(label:dimensions:)","title":"func makeCounter(label: String, dimensions: [(String, String)]) -> CounterHandler","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/makefloatingpointcounter(label:dimensions:)","title":"func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/makerecorder(label:dimensions:aggregate:)","title":"func makeRecorder(label: String, dimensions: [(String, String)], aggregate: Bool) -> RecorderHandler","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/maketimer(label:dimensions:)","title":"func makeTimer(label: String, dimensions: [(String, String)]) -> TimerHandler","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/record(_:)-2jh2w","title":"func record(Double)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/record(_:)-33tjf","title":"func record(Int64)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/recordnanoseconds(_:)","title":"func recordNanoseconds(Int64)","type":"method"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/reset()","title":"func reset()","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/instance","title":"static let instance: NOOPMetricsHandler","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/noopmetricshandler\/preferdisplayunit(_:)","title":"func preferDisplayUnit(TimeUnit)","type":"method"}],"path":"\/documentation\/coremetrics\/noopmetricshandler\/timerhandler-implementations","title":"TimerHandler Implementations","type":"symbol"}],"path":"\/documentation\/coremetrics\/noopmetricshandler","title":"NOOPMetricsHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/recorder\/init(label:dimensions:aggregate:)","title":"convenience init(label: String, dimensions: [(String, String)], aggregate: Bool)","type":"init"},{"path":"\/documentation\/coremetrics\/recorder\/init(label:dimensions:aggregate:handler:)","title":"init(label: String, dimensions: [(String, String)], aggregate: Bool, handler: RecorderHandler)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/recorder\/aggregate","title":"let aggregate: Bool","type":"property"},{"path":"\/documentation\/coremetrics\/recorder\/dimensions","title":"let dimensions: [(String, String)]","type":"property"},{"path":"\/documentation\/coremetrics\/recorder\/label","title":"let label: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/recorder\/destroy()","title":"func destroy()","type":"method"},{"path":"\/documentation\/coremetrics\/recorder\/record(_:)-4v6dk","title":"func record<DataType>(DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/recorder\/record(_:)-8gebr","title":"func record<DataType>(DataType)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/recorder\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/coremetrics\/recorder\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/coremetrics\/recorder","title":"Recorder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timer\/init(label:dimensions:)","title":"convenience init(label: String, dimensions: [(String, String)])","type":"init"},{"path":"\/documentation\/coremetrics\/timer\/init(label:dimensions:handler:)","title":"init(label: String, dimensions: [(String, String)], handler: TimerHandler)","type":"init"},{"path":"\/documentation\/coremetrics\/timer\/init(label:dimensions:preferreddisplayunit:)","title":"convenience init(label: String, dimensions: [(String, String)], preferredDisplayUnit: TimeUnit)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timer\/dimensions","title":"let dimensions: [(String, String)]","type":"property"},{"path":"\/documentation\/coremetrics\/timer\/label","title":"let label: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timer\/destroy()","title":"func destroy()","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/record(_:)-602u2","title":"func record(DispatchTimeInterval)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/record(_:)-7ax6n","title":"func record(TimeInterval)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordinterval(since:end:)","title":"func recordInterval(since: DispatchTime, end: DispatchTime)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordmicroseconds(_:)-35aca","title":"func recordMicroseconds<DataType>(DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordmicroseconds(_:)-3qrc6","title":"func recordMicroseconds<DataType>(DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordmilliseconds(_:)-1eh0n","title":"func recordMilliseconds<DataType>(DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordmilliseconds(_:)-6kuy8","title":"func recordMilliseconds<DataType>(DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordnanoseconds(_:)-232ir","title":"func recordNanoseconds<DataType>(DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordnanoseconds(_:)-59nis","title":"func recordNanoseconds(Int64)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordseconds(_:)-740dd","title":"func recordSeconds<DataType>(DataType)","type":"method"},{"path":"\/documentation\/coremetrics\/timer\/recordseconds(_:)-7vp6b","title":"func recordSeconds<DataType>(DataType)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timer\/measure(label:dimensions:body:)","title":"static func measure<T>(label: String, dimensions: [(String, String)], body: () throws -> T) rethrows -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timer\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/coremetrics\/timer\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/coremetrics\/timer","title":"Timer","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/counterhandler\/increment(by:)","title":"func increment(by: Int64)","type":"method"},{"path":"\/documentation\/coremetrics\/counterhandler\/reset()","title":"func reset()","type":"method"}],"path":"\/documentation\/coremetrics\/counterhandler","title":"CounterHandler","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/floatingpointcounterhandler\/increment(by:)","title":"func increment(by: Double)","type":"method"},{"path":"\/documentation\/coremetrics\/floatingpointcounterhandler\/reset()","title":"func reset()","type":"method"}],"path":"\/documentation\/coremetrics\/floatingpointcounterhandler","title":"FloatingPointCounterHandler","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/metricsfactory\/destroycounter(_:)","title":"func destroyCounter(CounterHandler)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/coremetrics\/metricsfactory\/destroyfloatingpointcounter(_:)-55jsf","title":"func destroyFloatingPointCounter(FloatingPointCounterHandler)","type":"method"}],"title":"MetricsFactory Implementations","type":"groupMarker"}],"path":"\/documentation\/coremetrics\/metricsfactory\/destroyfloatingpointcounter(_:)-8zdha","title":"func destroyFloatingPointCounter(FloatingPointCounterHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/metricsfactory\/destroyrecorder(_:)","title":"func destroyRecorder(RecorderHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/metricsfactory\/destroytimer(_:)","title":"func destroyTimer(TimerHandler)","type":"method"},{"path":"\/documentation\/coremetrics\/metricsfactory\/makecounter(label:dimensions:)","title":"func makeCounter(label: String, dimensions: [(String, String)]) -> CounterHandler","type":"method"},{"children":[{"children":[{"path":"\/documentation\/coremetrics\/metricsfactory\/makefloatingpointcounter(label:dimensions:)-i3cj","title":"func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler","type":"method"}],"title":"MetricsFactory Implementations","type":"groupMarker"}],"path":"\/documentation\/coremetrics\/metricsfactory\/makefloatingpointcounter(label:dimensions:)-2irnb","title":"func makeFloatingPointCounter(label: String, dimensions: [(String, String)]) -> FloatingPointCounterHandler","type":"method"},{"path":"\/documentation\/coremetrics\/metricsfactory\/makerecorder(label:dimensions:aggregate:)","title":"func makeRecorder(label: String, dimensions: [(String, String)], aggregate: Bool) -> RecorderHandler","type":"method"},{"path":"\/documentation\/coremetrics\/metricsfactory\/maketimer(label:dimensions:)","title":"func makeTimer(label: String, dimensions: [(String, String)]) -> TimerHandler","type":"method"}],"path":"\/documentation\/coremetrics\/metricsfactory","title":"MetricsFactory","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/recorderhandler\/record(_:)-8ck98","title":"func record(Double)","type":"method"},{"path":"\/documentation\/coremetrics\/recorderhandler\/record(_:)-8tmoj","title":"func record(Int64)","type":"method"}],"path":"\/documentation\/coremetrics\/recorderhandler","title":"RecorderHandler","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/coremetrics\/timerhandler\/preferdisplayunit(_:)-8st88","title":"func preferDisplayUnit(TimeUnit)","type":"method"}],"title":"TimerHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/coremetrics\/timerhandler\/preferdisplayunit(_:)-1ldza","title":"func preferDisplayUnit(TimeUnit)","type":"method"},{"path":"\/documentation\/coremetrics\/timerhandler\/recordnanoseconds(_:)","title":"func recordNanoseconds(Int64)","type":"method"}],"path":"\/documentation\/coremetrics\/timerhandler","title":"TimerHandler","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timeunit\/scalefromnanoseconds","title":"let scaleFromNanoseconds: UInt64","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timeunit\/days","title":"static let days: TimeUnit","type":"property"},{"path":"\/documentation\/coremetrics\/timeunit\/hours","title":"static let hours: TimeUnit","type":"property"},{"path":"\/documentation\/coremetrics\/timeunit\/microseconds","title":"static let microseconds: TimeUnit","type":"property"},{"path":"\/documentation\/coremetrics\/timeunit\/milliseconds","title":"static let milliseconds: TimeUnit","type":"property"},{"path":"\/documentation\/coremetrics\/timeunit\/minutes","title":"static let minutes: TimeUnit","type":"property"},{"path":"\/documentation\/coremetrics\/timeunit\/nanoseconds","title":"static let nanoseconds: TimeUnit","type":"property"},{"path":"\/documentation\/coremetrics\/timeunit\/seconds","title":"static let seconds: TimeUnit","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/timeunit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/coremetrics\/timeunit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/coremetrics\/timeunit","title":"TimeUnit","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/metricssystem\/factory","title":"static var factory: MetricsFactory","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/coremetrics\/metricssystem\/bootstrap(_:)","title":"static func bootstrap(MetricsFactory)","type":"method"},{"path":"\/documentation\/coremetrics\/metricssystem\/withwriterlock(_:)","title":"static func withWriterLock<T>(() throws -> T) rethrows -> T","type":"method"}],"path":"\/documentation\/coremetrics\/metricssystem","title":"MetricsSystem","type":"enum"}],"path":"\/documentation\/coremetrics","title":"CoreMetrics","type":"module"},{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/digest\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/digest\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/digest\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/digest\/==(_:_:)-4cagj","title":"static func == <D>(Self, D) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/digest\/==(_:_:)-7nm","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/digest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/digest\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"}],"path":"\/documentation\/crypto\/digest\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/digest","title":"Digest","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashfunction\/digest","title":"Digest","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashfunction\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashfunction\/finalize()","title":"func finalize() -> Self.Digest","type":"method"},{"path":"\/documentation\/crypto\/hashfunction\/update(bufferpointer:)","title":"func update(bufferPointer: UnsafeRawBufferPointer)","type":"method"},{"path":"\/documentation\/crypto\/hashfunction\/update(data:)","title":"func update<D>(data: D)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashfunction\/blockbytecount","title":"static var blockByteCount: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashfunction\/hash(data:)","title":"static func hash<D>(data: D) -> Self.Digest","type":"method"}],"path":"\/documentation\/crypto\/hashfunction","title":"HashFunction","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/messageauthenticationcode\/bytecount","title":"var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/messageauthenticationcode\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/messageauthenticationcode\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/messageauthenticationcode\/==(_:_:)-8czw0","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/messageauthenticationcode\/==(_:_:)-9j9wv","title":"static func == <D>(Self, D) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/messageauthenticationcode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/messageauthenticationcode\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"}],"path":"\/documentation\/crypto\/messageauthenticationcode\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/messageauthenticationcode","title":"MessageAuthenticationCode","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:info:outputbytecount:)","title":"static func deriveKey<Info>(inputKeyMaterial: SymmetricKey, info: Info, outputByteCount: Int) -> SymmetricKey","type":"method"},{"path":"\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:outputbytecount:)","title":"static func deriveKey(inputKeyMaterial: SymmetricKey, outputByteCount: Int) -> SymmetricKey","type":"method"},{"path":"\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:salt:info:outputbytecount:)","title":"static func deriveKey<Salt, Info>(inputKeyMaterial: SymmetricKey, salt: Salt, info: Info, outputByteCount: Int) -> SymmetricKey","type":"method"},{"path":"\/documentation\/crypto\/hkdf\/derivekey(inputkeymaterial:salt:outputbytecount:)","title":"static func deriveKey<Salt>(inputKeyMaterial: SymmetricKey, salt: Salt, outputByteCount: Int) -> SymmetricKey","type":"method"},{"path":"\/documentation\/crypto\/hkdf\/expand(pseudorandomkey:info:outputbytecount:)","title":"static func expand<PRK, Info>(pseudoRandomKey: PRK, info: Info?, outputByteCount: Int) -> SymmetricKey","type":"method"},{"path":"\/documentation\/crypto\/hkdf\/extract(inputkeymaterial:salt:)","title":"static func extract<Salt>(inputKeyMaterial: SymmetricKey, salt: Salt?) -> HashedAuthenticationCode<H>","type":"method"}],"path":"\/documentation\/crypto\/hkdf","title":"HKDF","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/hmac\/init(key:)","title":"init(key: SymmetricKey)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/hmac\/finalize()","title":"func finalize() -> HMAC<H>.MAC","type":"method"},{"path":"\/documentation\/crypto\/hmac\/update(data:)","title":"func update<D>(data: D)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/crypto\/hmac\/key","title":"HMAC.Key","type":"typealias"},{"path":"\/documentation\/crypto\/hmac\/mac","title":"HMAC.MAC","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/hmac\/authenticationcode(for:using:)","title":"static func authenticationCode<D>(for: D, using: SymmetricKey) -> HMAC<H>.MAC","type":"method"},{"path":"\/documentation\/crypto\/hmac\/isvalidauthenticationcode(_:authenticating:using:)-3qszd","title":"static func isValidAuthenticationCode(HMAC<H>.MAC, authenticating: UnsafeRawBufferPointer, using: SymmetricKey) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hmac\/isvalidauthenticationcode(_:authenticating:using:)-8flfu","title":"static func isValidAuthenticationCode<C, D>(C, authenticating: D, using: SymmetricKey) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hmac\/isvalidauthenticationcode(_:authenticating:using:)-9d4qq","title":"static func isValidAuthenticationCode<D>(HMAC<H>.MAC, authenticating: D, using: SymmetricKey) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/hmac","title":"HMAC","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/bytecount","title":"var byteCount: Int","type":"property"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/description-9om7g","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/description-5a6m","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/hashedauthenticationcode\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/==(_:_:)-3ztkv","title":"static func == <D>(Self, D) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/==(_:_:)-80q7a","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/hashedauthenticationcode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/flatmap(_:)-4i8cz","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/flatmap(_:)-6fu29","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/hashedauthenticationcode\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/hashedauthenticationcode\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/hashedauthenticationcode","title":"HashedAuthenticationCode","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256\/finalize()","title":"func finalize() -> SHA256.Digest","type":"method"},{"path":"\/documentation\/crypto\/sha256\/update(bufferpointer:)","title":"func update(bufferPointer: UnsafeRawBufferPointer)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256\/digest","title":"SHA256.Digest","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256\/blockbytecount","title":"static var blockByteCount: Int","type":"property"},{"path":"\/documentation\/crypto\/sha256\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256\/update(data:)","title":"func update<D>(data: D)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256\/hash(data:)","title":"static func hash<D>(data: D) -> Self.Digest","type":"method"}],"path":"\/documentation\/crypto\/sha256\/hashfunction-implementations","title":"HashFunction Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/sha256","title":"SHA256","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256digest\/description-4j6ez","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256digest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256digest\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256digest\/description-5ckm0","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/sha256digest\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256digest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/sha256digest\/==(_:_:)-3c0gh","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/sha256digest\/==(_:_:)-5dxlx","title":"static func == <D>(Self, D) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/sha256digest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256digest\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/sha256digest\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha256digest\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/flatmap(_:)-5amm7","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/flatmap(_:)-8mq3","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha256digest\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/sha256digest\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/sha256digest","title":"SHA256Digest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384\/finalize()","title":"func finalize() -> SHA384.Digest","type":"method"},{"path":"\/documentation\/crypto\/sha384\/update(bufferpointer:)","title":"func update(bufferPointer: UnsafeRawBufferPointer)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384\/digest","title":"SHA384.Digest","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384\/blockbytecount","title":"static var blockByteCount: Int","type":"property"},{"path":"\/documentation\/crypto\/sha384\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384\/update(data:)","title":"func update<D>(data: D)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384\/hash(data:)","title":"static func hash<D>(data: D) -> Self.Digest","type":"method"}],"path":"\/documentation\/crypto\/sha384\/hashfunction-implementations","title":"HashFunction Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/sha384","title":"SHA384","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384digest\/description-2eeil","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384digest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384digest\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384digest\/description-8vnkh","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/sha384digest\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384digest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/sha384digest\/==(_:_:)-5bsqd","title":"static func == <D>(Self, D) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/sha384digest\/==(_:_:)-jjgx","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/sha384digest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384digest\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/sha384digest\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha384digest\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/flatmap(_:)-1ssza","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/flatmap(_:)-huin","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha384digest\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/sha384digest\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/sha384digest","title":"SHA384Digest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512\/finalize()","title":"func finalize() -> SHA512.Digest","type":"method"},{"path":"\/documentation\/crypto\/sha512\/update(bufferpointer:)","title":"func update(bufferPointer: UnsafeRawBufferPointer)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512\/digest","title":"SHA512.Digest","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512\/blockbytecount","title":"static var blockByteCount: Int","type":"property"},{"path":"\/documentation\/crypto\/sha512\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512\/update(data:)","title":"func update<D>(data: D)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512\/hash(data:)","title":"static func hash<D>(data: D) -> Self.Digest","type":"method"}],"path":"\/documentation\/crypto\/sha512\/hashfunction-implementations","title":"HashFunction Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/sha512","title":"SHA512","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512digest\/description-1mcr7","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512digest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512digest\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512digest\/description-1d3ks","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/sha512digest\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512digest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/sha512digest\/==(_:_:)-34elm","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/sha512digest\/==(_:_:)-83foe","title":"static func == <D>(Self, D) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/sha512digest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512digest\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/sha512digest\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sha512digest\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/flatmap(_:)-5ovyk","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/flatmap(_:)-9d47f","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/sha512digest\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/sha512digest\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/sha512digest","title":"SHA512Digest","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/sharedsecret\/==(_:_:)-8qep4","title":"static func == <D>(SharedSecret, D) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sharedsecret\/hkdfderivedsymmetrickey(using:salt:sharedinfo:outputbytecount:)","title":"func hkdfDerivedSymmetricKey<H, Salt, SI>(using: H.Type, salt: Salt, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey","type":"method"},{"path":"\/documentation\/crypto\/sharedsecret\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/crypto\/sharedsecret\/x963derivedsymmetrickey(using:sharedinfo:outputbytecount:)","title":"func x963DerivedSymmetricKey<H, SI>(using: H.Type, sharedInfo: SI, outputByteCount: Int) -> SymmetricKey","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/sharedsecret\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/sharedsecret\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/sharedsecret\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/sharedsecret\/==(_:_:)-3cuvc","title":"static func == (SharedSecret, SharedSecret) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/sharedsecret\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/sharedsecret\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/crypto\/sharedsecret\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/sharedsecret","title":"SharedSecret","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/symmetrickey\/init(data:)","title":"init<D>(data: D)","type":"init"},{"path":"\/documentation\/crypto\/symmetrickey\/init(size:)","title":"init(size: SymmetricKeySize)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/symmetrickey\/bitcount","title":"var bitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/symmetrickey\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/symmetrickey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/symmetrickey\/==(_:_:)","title":"static func == (SymmetricKey, SymmetricKey) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/symmetrickey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/symmetrickey","title":"SymmetricKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/symmetrickeysize\/init(bitcount:)","title":"init(bitCount: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/symmetrickeysize\/bitcount","title":"let bitCount: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/symmetrickeysize\/bits128","title":"static var bits128: SymmetricKeySize","type":"property"},{"path":"\/documentation\/crypto\/symmetrickeysize\/bits192","title":"static var bits192: SymmetricKeySize","type":"property"},{"path":"\/documentation\/crypto\/symmetrickeysize\/bits256","title":"static var bits256: SymmetricKeySize","type":"property"}],"path":"\/documentation\/crypto\/symmetrickeysize","title":"SymmetricKeySize","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/gcm\/open(_:using:)","title":"static func open(AES.GCM.SealedBox, using: SymmetricKey) throws -> Data","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/open(_:using:authenticating:)","title":"static func open<AuthenticatedData>(AES.GCM.SealedBox, using: SymmetricKey, authenticating: AuthenticatedData) throws -> Data","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/seal(_:using:nonce:)","title":"static func seal<Plaintext>(Plaintext, using: SymmetricKey, nonce: AES.GCM.Nonce?) throws -> AES.GCM.SealedBox","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/seal(_:using:nonce:authenticating:)","title":"static func seal<Plaintext, AuthenticatedData>(Plaintext, using: SymmetricKey, nonce: AES.GCM.Nonce?, authenticating: AuthenticatedData) throws -> AES.GCM.SealedBox","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/init()","title":"init()","type":"init"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/init(data:)","title":"init<D>(data: D) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/flatmap(_:)-5dglr","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/flatmap(_:)-7a3ao","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/aes\/gcm\/nonce\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/aes\/gcm\/nonce","title":"AES.GCM.Nonce","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/gcm\/sealedbox\/init(combined:)","title":"init<D>(combined: D) throws","type":"init"},{"path":"\/documentation\/crypto\/aes\/gcm\/sealedbox\/init(nonce:ciphertext:tag:)","title":"init<C, T>(nonce: AES.GCM.Nonce, ciphertext: C, tag: T) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/gcm\/sealedbox\/ciphertext","title":"var ciphertext: Data","type":"property"},{"path":"\/documentation\/crypto\/aes\/gcm\/sealedbox\/combined","title":"var combined: Data?","type":"property"},{"path":"\/documentation\/crypto\/aes\/gcm\/sealedbox\/nonce","title":"var nonce: AES.GCM.Nonce","type":"property"},{"path":"\/documentation\/crypto\/aes\/gcm\/sealedbox\/tag","title":"var tag: Data","type":"property"}],"path":"\/documentation\/crypto\/aes\/gcm\/sealedbox","title":"AES.GCM.SealedBox","type":"struct"}],"path":"\/documentation\/crypto\/aes\/gcm\/cipher-implementations","title":"Cipher Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/aes\/gcm","title":"AES.GCM","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/aes\/keywrap\/unwrap(_:using:)","title":"static func unwrap<WrappedKey>(WrappedKey, using: SymmetricKey) throws -> SymmetricKey","type":"method"},{"path":"\/documentation\/crypto\/aes\/keywrap\/wrap(_:using:)","title":"static func wrap(SymmetricKey, using: SymmetricKey) throws -> Data","type":"method"}],"path":"\/documentation\/crypto\/aes\/keywrap","title":"AES.KeyWrap","type":"enum"}],"path":"\/documentation\/crypto\/aes","title":"AES","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/chachapoly\/open(_:using:)","title":"static func open(ChaChaPoly.SealedBox, using: SymmetricKey) throws -> Data","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/open(_:using:authenticating:)","title":"static func open<AuthenticatedData>(ChaChaPoly.SealedBox, using: SymmetricKey, authenticating: AuthenticatedData) throws -> Data","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/seal(_:using:nonce:)","title":"static func seal<Plaintext>(Plaintext, using: SymmetricKey, nonce: ChaChaPoly.Nonce?) throws -> ChaChaPoly.SealedBox","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/seal(_:using:nonce:authenticating:)","title":"static func seal<Plaintext, AuthenticatedData>(Plaintext, using: SymmetricKey, nonce: ChaChaPoly.Nonce?, authenticating: AuthenticatedData) throws -> ChaChaPoly.SealedBox","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/init()","title":"init()","type":"init"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/init(data:)","title":"init<D>(data: D) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/flatmap(_:)-6k0jk","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/flatmap(_:)-7b2ln","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/chachapoly\/nonce\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/chachapoly\/nonce\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/chachapoly\/nonce","title":"ChaChaPoly.Nonce","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/chachapoly\/sealedbox\/init(combined:)","title":"init<D>(combined: D) throws","type":"init"},{"path":"\/documentation\/crypto\/chachapoly\/sealedbox\/init(nonce:ciphertext:tag:)","title":"init<C, T>(nonce: ChaChaPoly.Nonce, ciphertext: C, tag: T) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/chachapoly\/sealedbox\/ciphertext","title":"var ciphertext: Data","type":"property"},{"path":"\/documentation\/crypto\/chachapoly\/sealedbox\/combined","title":"let combined: Data","type":"property"},{"path":"\/documentation\/crypto\/chachapoly\/sealedbox\/nonce","title":"var nonce: ChaChaPoly.Nonce","type":"property"},{"path":"\/documentation\/crypto\/chachapoly\/sealedbox\/tag","title":"var tag: Data","type":"property"}],"path":"\/documentation\/crypto\/chachapoly\/sealedbox","title":"ChaChaPoly.SealedBox","type":"struct"}],"path":"\/documentation\/crypto\/chachapoly\/cipher-implementations","title":"Cipher Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/chachapoly","title":"ChaChaPoly","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/invalidasn1integerencoding","title":"case invalidASN1IntegerEncoding","type":"case"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/invalidasn1object","title":"case invalidASN1Object","type":"case"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/invalidfieldidentifier","title":"case invalidFieldIdentifier","type":"case"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/invalidobjectidentifier","title":"case invalidObjectIdentifier","type":"case"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/invalidpemdocument","title":"case invalidPEMDocument","type":"case"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/truncatedasn1field","title":"case truncatedASN1Field","type":"case"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/unexpectedfieldtype","title":"case unexpectedFieldType","type":"case"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/unsupportedfieldlength","title":"case unsupportedFieldLength","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/cryptokitasn1error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/cryptokitasn1error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/crypto\/cryptokitasn1error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/cryptokitasn1error","title":"CryptoKitASN1Error","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/crypto\/cryptokiterror\/authenticationfailure","title":"case authenticationFailure","type":"case"},{"path":"\/documentation\/crypto\/cryptokiterror\/incorrectkeysize","title":"case incorrectKeySize","type":"case"},{"path":"\/documentation\/crypto\/cryptokiterror\/incorrectparametersize","title":"case incorrectParameterSize","type":"case"},{"path":"\/documentation\/crypto\/cryptokiterror\/underlyingcorecryptoerror(error:)","title":"case underlyingCoreCryptoError(error: Int32)","type":"case"},{"path":"\/documentation\/crypto\/cryptokiterror\/unwrapfailure","title":"case unwrapFailure","type":"case"},{"path":"\/documentation\/crypto\/cryptokiterror\/wrapfailure","title":"case wrapFailure","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/cryptokiterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/crypto\/cryptokiterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/cryptokiterror","title":"CryptoKitError","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/init()","title":"init()","type":"init"},{"path":"\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/publickey","title":"var publicKey: Curve25519.KeyAgreement.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)","title":"func sharedSecretFromKeyAgreement(with: Curve25519.KeyAgreement.PublicKey) throws -> SharedSecret","type":"method"}],"path":"\/documentation\/crypto\/curve25519\/keyagreement\/privatekey","title":"Curve25519.KeyAgreement.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/keyagreement\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"}],"path":"\/documentation\/crypto\/curve25519\/keyagreement\/publickey","title":"Curve25519.KeyAgreement.PublicKey","type":"struct"}],"path":"\/documentation\/crypto\/curve25519\/keyagreement","title":"Curve25519.KeyAgreement","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/signing\/privatekey\/init()","title":"init()","type":"init"},{"path":"\/documentation\/crypto\/curve25519\/signing\/privatekey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/signing\/privatekey\/publickey","title":"var publicKey: Curve25519.Signing.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/curve25519\/signing\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/signing\/privatekey\/signature(for:)","title":"func signature<D>(for: D) throws -> Data","type":"method"}],"path":"\/documentation\/crypto\/curve25519\/signing\/privatekey\/signer-implementations","title":"Signer Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/curve25519\/signing\/privatekey","title":"Curve25519.Signing.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/signing\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/signing\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/curve25519\/signing\/publickey\/isvalidsignature(_:for:)","title":"func isValidSignature<S, D>(S, for: D) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/curve25519\/signing\/publickey\/datavalidator-implementations","title":"DataValidator Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/curve25519\/signing\/publickey","title":"Curve25519.Signing.PublicKey","type":"struct"}],"path":"\/documentation\/crypto\/curve25519\/signing","title":"Curve25519.Signing","type":"enum"}],"path":"\/documentation\/crypto\/curve25519","title":"Curve25519","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5\/finalize()","title":"func finalize() -> Insecure.MD5.Digest","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5\/update(bufferpointer:)","title":"func update(bufferPointer: UnsafeRawBufferPointer)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5\/digest","title":"Insecure.MD5.Digest","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5\/blockbytecount","title":"static var blockByteCount: Int","type":"property"},{"path":"\/documentation\/crypto\/insecure\/md5\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5\/update(data:)","title":"func update<D>(data: D)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5\/hash(data:)","title":"static func hash<D>(data: D) -> Self.Digest","type":"method"}],"path":"\/documentation\/crypto\/insecure\/md5\/hashfunction-implementations","title":"HashFunction Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/insecure\/md5","title":"Insecure.MD5","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/description-618c3","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/description-5hiyd","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/insecure\/md5digest\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/==(_:_:)-624ol","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/==(_:_:)-82cct","title":"static func == <D>(Self, D) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/insecure\/md5digest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/flatmap(_:)-7ajg2","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/flatmap(_:)-83b44","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/md5digest\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/insecure\/md5digest\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/insecure\/md5digest","title":"Insecure.MD5Digest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1\/finalize()","title":"func finalize() -> Insecure.SHA1.Digest","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1\/update(bufferpointer:)","title":"func update(bufferPointer: UnsafeRawBufferPointer)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1\/digest","title":"Insecure.SHA1.Digest","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1\/blockbytecount","title":"static var blockByteCount: Int","type":"property"},{"path":"\/documentation\/crypto\/insecure\/sha1\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1\/update(data:)","title":"func update<D>(data: D)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1\/hash(data:)","title":"static func hash<D>(data: D) -> Self.Digest","type":"method"}],"path":"\/documentation\/crypto\/insecure\/sha1\/hashfunction-implementations","title":"HashFunction Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/insecure\/sha1","title":"Insecure.SHA1","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/description-61wqn","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/bytecount","title":"static var byteCount: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/description-23qdb","title":"var description: String","type":"property"}],"path":"\/documentation\/crypto\/insecure\/sha1digest\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/==(_:_:)-61aa3","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/==(_:_:)-f8lh","title":"static func == <D>(Self, D) -> Bool","type":"op"}],"path":"\/documentation\/crypto\/insecure\/sha1digest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/flatmap(_:)-39wx0","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/flatmap(_:)-6nvm","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/makeiterator()","title":"func makeIterator() -> Array<UInt8>.Iterator","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/crypto\/insecure\/sha1digest\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/crypto\/insecure\/sha1digest\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/insecure\/sha1digest","title":"Insecure.SHA1Digest","type":"struct"}],"path":"\/documentation\/crypto\/insecure","title":"Insecure","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(compactrepresentable:)","title":"init(compactRepresentable: Bool)","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(rawrepresentation:)","title":"init<Bytes>(rawRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/publickey","title":"var publicKey: P256.KeyAgreement.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)","title":"func sharedSecretFromKeyAgreement(with: P256.KeyAgreement.PublicKey) throws -> SharedSecret","type":"method"}],"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey\/diffiehellmankeyagreement-implementations","title":"DiffieHellmanKeyAgreement Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p256\/keyagreement\/privatekey","title":"P256.KeyAgreement.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(compactrepresentation:)","title":"init<Bytes>(compactRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/compactrepresentation","title":"var compactRepresentation: Data?","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey\/x963representation","title":"var x963Representation: Data","type":"property"}],"path":"\/documentation\/crypto\/p256\/keyagreement\/publickey","title":"P256.KeyAgreement.PublicKey","type":"struct"}],"path":"\/documentation\/crypto\/p256\/keyagreement","title":"P256.KeyAgreement","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/init(compactrepresentable:)","title":"init(compactRepresentable: Bool)","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/init(rawrepresentation:)","title":"init<Bytes>(rawRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/publickey","title":"var publicKey: P256.Signing.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/signature(for:)-2rv8k","title":"func signature<D>(for: D) throws -> P256.Signing.ECDSASignature","type":"method"}],"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/digestsigner-implementations","title":"DigestSigner Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/signature(for:)-9t6d9","title":"func signature<D>(for: D) throws -> P256.Signing.ECDSASignature","type":"method"}],"path":"\/documentation\/crypto\/p256\/signing\/privatekey\/signer-implementations","title":"Signer Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p256\/signing\/privatekey","title":"P256.Signing.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/init(compactrepresentation:)","title":"init<Bytes>(compactRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/compactrepresentation","title":"var compactRepresentation: Data?","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/isvalidsignature(_:for:)-23tp3","title":"func isValidSignature<D>(P256.Signing.ECDSASignature, for: D) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/p256\/signing\/publickey\/datavalidator-implementations","title":"DataValidator Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/publickey\/isvalidsignature(_:for:)-5714m","title":"func isValidSignature<D>(P256.Signing.ECDSASignature, for: D) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/p256\/signing\/publickey\/digestvalidator-implementations","title":"DigestValidator Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p256\/signing\/publickey","title":"P256.Signing.PublicKey","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/ecdsasignature\/init(derrepresentation:)","title":"init<D>(derRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p256\/signing\/ecdsasignature\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/ecdsasignature\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p256\/signing\/ecdsasignature\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p256\/signing\/ecdsasignature\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/crypto\/p256\/signing\/ecdsasignature","title":"P256.Signing.ECDSASignature","type":"struct"}],"path":"\/documentation\/crypto\/p256\/signing\/nistsigning-implementations","title":"NISTSigning Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p256\/signing","title":"P256.Signing","type":"enum"}],"path":"\/documentation\/crypto\/p256","title":"P256","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(compactrepresentable:)","title":"init(compactRepresentable: Bool)","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(rawrepresentation:)","title":"init<Bytes>(rawRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/publickey","title":"var publicKey: P384.KeyAgreement.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)","title":"func sharedSecretFromKeyAgreement(with: P384.KeyAgreement.PublicKey) throws -> SharedSecret","type":"method"}],"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey\/diffiehellmankeyagreement-implementations","title":"DiffieHellmanKeyAgreement Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p384\/keyagreement\/privatekey","title":"P384.KeyAgreement.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(compactrepresentation:)","title":"init<Bytes>(compactRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/compactrepresentation","title":"var compactRepresentation: Data?","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey\/x963representation","title":"var x963Representation: Data","type":"property"}],"path":"\/documentation\/crypto\/p384\/keyagreement\/publickey","title":"P384.KeyAgreement.PublicKey","type":"struct"}],"path":"\/documentation\/crypto\/p384\/keyagreement","title":"P384.KeyAgreement","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/init(compactrepresentable:)","title":"init(compactRepresentable: Bool)","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/init(rawrepresentation:)","title":"init<Bytes>(rawRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/publickey","title":"var publicKey: P384.Signing.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/signature(for:)-6pbe7","title":"func signature<D>(for: D) throws -> P384.Signing.ECDSASignature","type":"method"}],"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/digestsigner-implementations","title":"DigestSigner Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/signature(for:)-99c8d","title":"func signature<D>(for: D) throws -> P384.Signing.ECDSASignature","type":"method"}],"path":"\/documentation\/crypto\/p384\/signing\/privatekey\/signer-implementations","title":"Signer Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p384\/signing\/privatekey","title":"P384.Signing.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/init(compactrepresentation:)","title":"init<Bytes>(compactRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/compactrepresentation","title":"var compactRepresentation: Data?","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/isvalidsignature(_:for:)-6cw7h","title":"func isValidSignature<D>(P384.Signing.ECDSASignature, for: D) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/p384\/signing\/publickey\/datavalidator-implementations","title":"DataValidator Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/publickey\/isvalidsignature(_:for:)-7pu5d","title":"func isValidSignature<D>(P384.Signing.ECDSASignature, for: D) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/p384\/signing\/publickey\/digestvalidator-implementations","title":"DigestValidator Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p384\/signing\/publickey","title":"P384.Signing.PublicKey","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/ecdsasignature\/init(derrepresentation:)","title":"init<D>(derRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p384\/signing\/ecdsasignature\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/ecdsasignature\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p384\/signing\/ecdsasignature\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p384\/signing\/ecdsasignature\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/crypto\/p384\/signing\/ecdsasignature","title":"P384.Signing.ECDSASignature","type":"struct"}],"path":"\/documentation\/crypto\/p384\/signing\/nistsigning-implementations","title":"NISTSigning Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p384\/signing","title":"P384.Signing","type":"enum"}],"path":"\/documentation\/crypto\/p384","title":"P384","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(compactrepresentable:)","title":"init(compactRepresentable: Bool)","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(rawrepresentation:)","title":"init<Bytes>(rawRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/publickey","title":"var publicKey: P521.KeyAgreement.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/sharedsecretfromkeyagreement(with:)","title":"func sharedSecretFromKeyAgreement(with: P521.KeyAgreement.PublicKey) throws -> SharedSecret","type":"method"}],"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey\/diffiehellmankeyagreement-implementations","title":"DiffieHellmanKeyAgreement Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p521\/keyagreement\/privatekey","title":"P521.KeyAgreement.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(compactrepresentation:)","title":"init<Bytes>(compactRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/compactrepresentation","title":"var compactRepresentation: Data?","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey\/x963representation","title":"var x963Representation: Data","type":"property"}],"path":"\/documentation\/crypto\/p521\/keyagreement\/publickey","title":"P521.KeyAgreement.PublicKey","type":"struct"}],"path":"\/documentation\/crypto\/p521\/keyagreement","title":"P521.KeyAgreement","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/init(compactrepresentable:)","title":"init(compactRepresentable: Bool)","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/init(rawrepresentation:)","title":"init<Bytes>(rawRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/publickey","title":"var publicKey: P521.Signing.PublicKey","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/signature(for:)-4amzv","title":"func signature<D>(for: D) throws -> P521.Signing.ECDSASignature","type":"method"}],"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/digestsigner-implementations","title":"DigestSigner Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/signature(for:)-29j1g","title":"func signature<D>(for: D) throws -> P521.Signing.ECDSASignature","type":"method"}],"path":"\/documentation\/crypto\/p521\/signing\/privatekey\/signer-implementations","title":"Signer Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p521\/signing\/privatekey","title":"P521.Signing.PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/init(compactrepresentation:)","title":"init<Bytes>(compactRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/init(derrepresentation:)","title":"init<Bytes>(derRepresentation: Bytes) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/init(pemrepresentation:)","title":"init(pemRepresentation: String) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/init(x963representation:)","title":"init<Bytes>(x963Representation: Bytes) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/compactrepresentation","title":"var compactRepresentation: Data?","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/pemrepresentation","title":"var pemRepresentation: String","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/x963representation","title":"var x963Representation: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/isvalidsignature(_:for:)-5yd0o","title":"func isValidSignature<D>(P521.Signing.ECDSASignature, for: D) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/p521\/signing\/publickey\/datavalidator-implementations","title":"DataValidator Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/publickey\/isvalidsignature(_:for:)-4mdm0","title":"func isValidSignature<D>(P521.Signing.ECDSASignature, for: D) -> Bool","type":"method"}],"path":"\/documentation\/crypto\/p521\/signing\/publickey\/digestvalidator-implementations","title":"DigestValidator Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p521\/signing\/publickey","title":"P521.Signing.PublicKey","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/ecdsasignature\/init(derrepresentation:)","title":"init<D>(derRepresentation: D) throws","type":"init"},{"path":"\/documentation\/crypto\/p521\/signing\/ecdsasignature\/init(rawrepresentation:)","title":"init<D>(rawRepresentation: D) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/ecdsasignature\/derrepresentation","title":"var derRepresentation: Data","type":"property"},{"path":"\/documentation\/crypto\/p521\/signing\/ecdsasignature\/rawrepresentation","title":"var rawRepresentation: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/crypto\/p521\/signing\/ecdsasignature\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/crypto\/p521\/signing\/ecdsasignature","title":"P521.Signing.ECDSASignature","type":"struct"}],"path":"\/documentation\/crypto\/p521\/signing\/nistsigning-implementations","title":"NISTSigning Implementations","type":"symbol"}],"path":"\/documentation\/crypto\/p521\/signing","title":"P521.Signing","type":"enum"}],"path":"\/documentation\/crypto\/p521","title":"P521","type":"enum"}],"path":"\/documentation\/crypto","title":"Crypto","type":"module"},{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/loghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/loghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-1xdau","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"}],"title":"LogHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-69pez","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"}],"title":"LogHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/loghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"}],"path":"\/documentation\/logging\/loghandler","title":"LogHandler","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/description","title":"var description: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/stringliteraltype","title":"Logger.Message.StringLiteralType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/message\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/message\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/logging\/logger\/message\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/message\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/logging\/logger\/message","title":"Logger.Message","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/init(label:)","title":"init(label: String)","type":"init"},{"path":"\/documentation\/logging\/logger\/init(label:factory:)","title":"init(label: String, factory: (String) -> LogHandler)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/label","title":"let label: String","type":"property"},{"path":"\/documentation\/logging\/logger\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/critical(_:metadata:file:function:line:)","title":"func critical(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/critical(_:metadata:source:file:function:line:)","title":"func critical(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/debug(_:metadata:file:function:line:)","title":"func debug(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/debug(_:metadata:source:file:function:line:)","title":"func debug(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/error(_:metadata:file:function:line:)","title":"func error(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/error(_:metadata:source:file:function:line:)","title":"func error(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/info(_:metadata:file:function:line:)","title":"func info(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/info(_:metadata:source:file:function:line:)","title":"func info(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/log(level:_:metadata:file:function:line:)","title":"func log(level: Logger.Level, () -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/log(level:_:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, () -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/notice(_:metadata:file:function:line:)","title":"func notice(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/notice(_:metadata:source:file:function:line:)","title":"func notice(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/report(error:file:function:line:)","title":"func report(error: Error, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/trace(_:metadata:file:function:line:)","title":"func trace(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/trace(_:metadata:source:file:function:line:)","title":"func trace(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/warning(_:metadata:file:function:line:)","title":"func warning(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/warning(_:metadata:source:file:function:line:)","title":"func warning(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadata","title":"Logger.Metadata","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/critical","title":"case critical","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/debug","title":"case debug","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/error","title":"case error","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/info","title":"case info","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/notice","title":"case notice","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/trace","title":"case trace","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/warning","title":"case warning","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/logging\/logger\/level\/style","title":"var style: ConsoleStyle","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/detect(from:)","title":"static func detect(from: inout Environment) throws -> Logger.Level","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:)-181cj","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:)-9337t","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/logging\/logger\/level\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:)-181cj","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:)-9337t","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/logging\/logger\/level\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/_(_:_:)-88op7","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/_(_:_:)-8ts75","title":"static func < (Logger.Level, Logger.Level) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/_=(_:_:)-27ncb","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/_=(_:_:)-50v7s","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/level\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/logging\/logger\/level\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/level\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/init(_:)","title":"init?(String)","type":"init"}],"path":"\/documentation\/logging\/logger\/level\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/logging\/logger\/level\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/logging\/logger\/level\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/logging\/logger\/level","title":"Logger.Level","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/array(_:)","title":"case array([Logger.Metadata.Value])","type":"case"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/dictionary(_:)","title":"case dictionary(Logger.Metadata)","type":"case"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/string(_:)","title":"case string(String)","type":"case"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/stringconvertible(_:)","title":"case stringConvertible(CustomStringConvertible)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/==(_:_:)","title":"static func == (Logger.Metadata.Value, Logger.Metadata.Value) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(arrayliteral:)","title":"init(arrayLiteral: Logger.Metadata.Value...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/arrayliteralelement","title":"Logger.MetadataValue.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, Logger.Metadata.Value)...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/key","title":"Logger.MetadataValue.Key","type":"typealias"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/value","title":"Logger.MetadataValue.Value","type":"typealias"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/stringliteraltype","title":"Logger.MetadataValue.StringLiteralType","type":"typealias"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/logging\/logger\/metadatavalue","title":"Logger.MetadataValue","type":"enum"}],"path":"\/documentation\/logging\/logger","title":"Logger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/init(_:)","title":"init([LogHandler])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/multiplexloghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/log(level:message:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: Logger.Metadata.Key) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/log(level:message:metadata:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/logging\/multiplexloghandler\/loghandler-implementations","title":"LogHandler Implementations","type":"symbol"}],"path":"\/documentation\/logging\/multiplexloghandler","title":"MultiplexLogHandler","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/streamloghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/log(level:message:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/standarderror(label:)","title":"static func standardError(label: String) -> StreamLogHandler","type":"method"},{"path":"\/documentation\/logging\/streamloghandler\/standardoutput(label:)","title":"static func standardOutput(label: String) -> StreamLogHandler","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/log(level:message:metadata:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/logging\/streamloghandler\/loghandler-implementations","title":"LogHandler Implementations","type":"symbol"}],"path":"\/documentation\/logging\/streamloghandler","title":"StreamLogHandler","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/log(level:message:metadata:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/log(level:message:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/logging\/swiftlognooploghandler\/loghandler-implementations","title":"LogHandler Implementations","type":"symbol"}],"path":"\/documentation\/logging\/swiftlognooploghandler","title":"SwiftLogNoOpLogHandler","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/loggingsystem\/bootstrap(_:)","title":"static func bootstrap((String) -> LogHandler)","type":"method"},{"path":"\/documentation\/logging\/loggingsystem\/bootstrap(console:level:metadata:)","title":"static func bootstrap(console: Console, level: Logger.Level, metadata: Logger.Metadata)","type":"method"},{"path":"\/documentation\/logging\/loggingsystem\/bootstrap(from:)","title":"static func bootstrap(from: inout Environment) throws","type":"method"},{"path":"\/documentation\/logging\/loggingsystem\/bootstrap(from:_:)","title":"static func bootstrap(from: inout Environment, (Logger.Level) -> (String) -> LogHandler) throws","type":"method"}],"path":"\/documentation\/logging\/loggingsystem","title":"LoggingSystem","type":"enum"}],"path":"\/documentation\/logging","title":"Logging","type":"module"},{"path":"\/documentation\/metrics","title":"Metrics","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartparser\/init(boundary:)","title":"init(boundary: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartparser\/onbody","title":"var onBody: (inout ByteBuffer) -> ()","type":"property"},{"path":"\/documentation\/multipartkit\/multipartparser\/onheader","title":"var onHeader: (String, String) -> ()","type":"property"},{"path":"\/documentation\/multipartkit\/multipartparser\/onpartcomplete","title":"var onPartComplete: () -> ()","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartparser\/execute(_:)-1mbst","title":"func execute(ByteBuffer) throws","type":"method"},{"path":"\/documentation\/multipartkit\/multipartparser\/execute(_:)-1xz27","title":"func execute(String) throws","type":"method"},{"path":"\/documentation\/multipartkit\/multipartparser\/execute(_:)-g3gl","title":"func execute([UInt8]) throws","type":"method"}],"path":"\/documentation\/multipartkit\/multipartparser","title":"MultipartParser","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartserializer\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartserializer\/serialize(parts:boundary:)","title":"func serialize(parts: [MultipartPart], boundary: String) throws -> String","type":"method"},{"path":"\/documentation\/multipartkit\/multipartserializer\/serialize(parts:boundary:into:)","title":"func serialize(parts: [MultipartPart], boundary: String, into: inout ByteBuffer) throws","type":"method"}],"path":"\/documentation\/multipartkit\/multipartserializer","title":"MultipartSerializer","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartpartconvertible\/init(multipart:)","title":"init?(multipart: MultipartPart)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartpartconvertible\/multipart","title":"var multipart: MultipartPart?","type":"property"}],"path":"\/documentation\/multipartkit\/multipartpartconvertible","title":"MultipartPartConvertible","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdatadecoder\/init(nestingdepth:)","title":"init(nestingDepth: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdatadecoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdatadecoder\/decode(_:from:boundary:)-511nl","title":"func decode<D>(D.Type, from: [UInt8], boundary: String) throws -> D","type":"method"},{"path":"\/documentation\/multipartkit\/formdatadecoder\/decode(_:from:boundary:)-647am","title":"func decode<D>(D.Type, from: ByteBuffer, boundary: String) throws -> D","type":"method"},{"path":"\/documentation\/multipartkit\/formdatadecoder\/decode(_:from:boundary:)-6utyz","title":"func decode<D>(D.Type, from: String, boundary: String) throws -> D","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdatadecoder\/decode(_:from:headers:)","title":"func decode<D>(D.Type, from: ByteBuffer, headers: HTTPHeaders) throws -> D","type":"method"}],"path":"\/documentation\/multipartkit\/formdatadecoder\/contentdecoder-implementations","title":"ContentDecoder Implementations","type":"symbol"}],"path":"\/documentation\/multipartkit\/formdatadecoder","title":"FormDataDecoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdataencoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdataencoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdataencoder\/encode(_:boundary:)","title":"func encode<E>(E, boundary: String) throws -> String","type":"method"},{"path":"\/documentation\/multipartkit\/formdataencoder\/encode(_:boundary:into:)","title":"func encode<E>(E, boundary: String, into: inout ByteBuffer) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/formdataencoder\/encode(_:to:headers:)","title":"func encode<E>(E, to: inout ByteBuffer, headers: inout HTTPHeaders) throws","type":"method"}],"path":"\/documentation\/multipartkit\/formdataencoder\/contentencoder-implementations","title":"ContentEncoder Implementations","type":"symbol"}],"path":"\/documentation\/multipartkit\/formdataencoder","title":"FormDataEncoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartpart\/init(headers:body:)-2fvpi","title":"init(headers: HTTPHeaders, body: ByteBuffer)","type":"init"},{"path":"\/documentation\/multipartkit\/multipartpart\/init(headers:body:)-6xjnx","title":"init(headers: HTTPHeaders, body: String)","type":"init"},{"path":"\/documentation\/multipartkit\/multipartpart\/init(headers:body:)-82mwe","title":"init<Data>(headers: HTTPHeaders, body: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartpart\/body","title":"var body: ByteBuffer","type":"property"},{"path":"\/documentation\/multipartkit\/multipartpart\/contentdisposition","title":"var contentDisposition: HTTPHeaders.ContentDisposition?","type":"property"},{"path":"\/documentation\/multipartkit\/multipartpart\/contenttype","title":"var contentType: String?","type":"property"},{"path":"\/documentation\/multipartkit\/multipartpart\/filename","title":"var filename: String?","type":"property"},{"path":"\/documentation\/multipartkit\/multipartpart\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/multipartkit\/multipartpart\/name","title":"var name: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartpart\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/multipartkit\/multipartpart\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartpart\/init(multipart:)","title":"init?(multipart: MultipartPart)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multipartpart\/multipart","title":"var multipart: MultipartPart?","type":"property"}],"path":"\/documentation\/multipartkit\/multipartpart\/multipartpartconvertible-implementations","title":"MultipartPartConvertible Implementations","type":"symbol"}],"path":"\/documentation\/multipartkit\/multipartpart","title":"MultipartPart","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multiparterror\/convertiblepart(_:_:)","title":"case convertiblePart(Any.Type, MultipartPart)","type":"case"},{"path":"\/documentation\/multipartkit\/multiparterror\/convertibletype(_:)","title":"case convertibleType(Any.Type)","type":"case"},{"path":"\/documentation\/multipartkit\/multiparterror\/invalidformat","title":"case invalidFormat","type":"case"},{"path":"\/documentation\/multipartkit\/multiparterror\/missingfilename","title":"case missingFilename","type":"case"},{"path":"\/documentation\/multipartkit\/multiparterror\/missingpart(_:)","title":"case missingPart(String)","type":"case"},{"path":"\/documentation\/multipartkit\/multiparterror\/nesting","title":"case nesting","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multiparterror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/multipartkit\/multiparterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/multipartkit\/multiparterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/multipartkit\/multiparterror","title":"MultipartError","type":"enum"}],"path":"\/documentation\/multipartkit","title":"MultipartKit","type":"module"},{"path":"\/documentation\/nio","title":"NIO","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomic\/init(value:)","title":"init(value: T)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomic\/add(_:)","title":"func add(T) -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomic\/compareandexchange(expected:desired:)","title":"func compareAndExchange(expected: T, desired: T) -> Bool","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomic\/exchange(with:)","title":"func exchange(with: T) -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomic\/load()","title":"func load() -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomic\/store(_:)","title":"func store(T)","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomic\/sub(_:)","title":"func sub(T) -> T","type":"method"}],"path":"\/documentation\/nioconcurrencyhelpers\/atomic","title":"Atomic","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/init(value:)","title":"init(value: T)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)","title":"func compareAndExchange(expected: T, desired: T) -> Bool","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/exchange(with:)","title":"func exchange(with: T) -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/load()","title":"func load() -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/store(_:)","title":"func store(T)","type":"method"}],"path":"\/documentation\/nioconcurrencyhelpers\/atomicbox","title":"AtomicBox","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock\/init(value:)","title":"init(value: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock\/value","title":"var value: T","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock\/lock()","title":"func lock()","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock\/lock(whenvalue:)","title":"func lock(whenValue: T)","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock\/lock(whenvalue:timeoutseconds:)","title":"func lock(whenValue: T, timeoutSeconds: Double) -> Bool","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock\/unlock()","title":"func unlock()","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock\/unlock(withvalue:)","title":"func unlock(withValue: T)","type":"method"}],"path":"\/documentation\/nioconcurrencyhelpers\/conditionlock","title":"ConditionLock","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/lock\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/lock\/lock()","title":"func lock()","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/lock\/unlock()","title":"func unlock()","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/lock\/withlock(_:)","title":"func withLock<T>(() throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/lock\/withlockvoid(_:)","title":"func withLockVoid(() throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/nioconcurrencyhelpers\/lock","title":"Lock","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic\/add(_:)","title":"func add(T) -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic\/compareandexchange(expected:desired:)","title":"func compareAndExchange(expected: T, desired: T) -> Bool","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic\/exchange(with:)","title":"func exchange(with: T) -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic\/load()","title":"func load() -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic\/store(_:)","title":"func store(T)","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic\/sub(_:)","title":"func sub(T) -> T","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic\/makeatomic(value:)","title":"static func makeAtomic(value: T) -> NIOAtomic<T>","type":"method"}],"path":"\/documentation\/nioconcurrencyhelpers\/nioatomic","title":"NIOAtomic","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_add","title":"static var atomic_add: (OpaquePointer, Self) -> Self","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_compare_and_exchange","title":"static var atomic_compare_and_exchange: (OpaquePointer, Self, Self) -> Bool","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_create","title":"static var atomic_create: (Self) -> OpaquePointer","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_destroy","title":"static var atomic_destroy: (OpaquePointer) -> Void","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_exchange","title":"static var atomic_exchange: (OpaquePointer, Self) -> Self","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_load","title":"static var atomic_load: (OpaquePointer) -> Self","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_store","title":"static var atomic_store: (OpaquePointer, Self) -> Void","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive\/atomic_sub","title":"static var atomic_sub: (OpaquePointer, Self) -> Self","type":"property"}],"path":"\/documentation\/nioconcurrencyhelpers\/atomicprimitive","title":"AtomicPrimitive","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/atomicwrapper","title":"AtomicWrapper","type":"associatedtype"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_add","title":"static var nio_atomic_add: (UnsafeMutablePointer<Self.AtomicWrapper>, Self) -> Self","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_compare_and_exchange","title":"static var nio_atomic_compare_and_exchange: (UnsafeMutablePointer<Self.AtomicWrapper>, Self, Self) -> Bool","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_create_with_existing_storage","title":"static var nio_atomic_create_with_existing_storage: (UnsafeMutablePointer<Self.AtomicWrapper>, Self) -> Void","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_exchange","title":"static var nio_atomic_exchange: (UnsafeMutablePointer<Self.AtomicWrapper>, Self) -> Self","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_load","title":"static var nio_atomic_load: (UnsafeMutablePointer<Self.AtomicWrapper>) -> Self","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_store","title":"static var nio_atomic_store: (UnsafeMutablePointer<Self.AtomicWrapper>, Self) -> Void","type":"property"},{"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive\/nio_atomic_sub","title":"static var nio_atomic_sub: (UnsafeMutablePointer<Self.AtomicWrapper>, Self) -> Self","type":"property"}],"path":"\/documentation\/nioconcurrencyhelpers\/nioatomicprimitive","title":"NIOAtomicPrimitive","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/init(value:)","title":"init(value: T)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/add(_:)","title":"func add(T) -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/compareandexchange(expected:desired:)","title":"func compareAndExchange(expected: T, desired: T) -> Bool","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/destroy()","title":"func destroy()","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/exchange(with:)","title":"func exchange(with: T) -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/load()","title":"func load() -> T","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/store(_:)","title":"func store(T)","type":"method"},{"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/sub(_:)","title":"func sub(T) -> T","type":"method"}],"path":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic","title":"UnsafeEmbeddedAtomic","type":"struct"}],"path":"\/documentation\/nioconcurrencyhelpers","title":"NIOConcurrencyHelpers","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/init(backoffprovider:)","title":"init(backoffProvider: (IOError) -> TimeAmount?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/read(context:)","title":"func read(context: ChannelHandlerContext)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/inboundin","title":"AcceptBackoffHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/outboundin","title":"AcceptBackoffHandler.OutboundIn","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/defaultbackoffprovider(error:)","title":"static func defaultBackoffProvider(error: IOError) -> TimeAmount?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niocore\/acceptbackoffhandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niocore\/acceptbackoffhandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niocore\/acceptbackoffhandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/acceptbackoffhandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niocore\/acceptbackoffhandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/acceptbackoffhandler","title":"AcceptBackoffHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/backpressurehandler\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/backpressurehandler\/channelwritabilitychanged(context:)","title":"func channelWritabilityChanged(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/backpressurehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/backpressurehandler\/read(context:)","title":"func read(context: ChannelHandlerContext)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/backpressurehandler\/inboundin","title":"BackPressureHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niocore\/backpressurehandler\/inboundout","title":"BackPressureHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niocore\/backpressurehandler\/outboundin","title":"BackPressureHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niocore\/backpressurehandler\/outboundout","title":"BackPressureHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/backpressurehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niocore\/backpressurehandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/backpressurehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niocore\/backpressurehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niocore\/backpressurehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/backpressurehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niocore\/backpressurehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/backpressurehandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niocore\/backpressurehandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/backpressurehandler","title":"BackPressureHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/init(_:)","title":"convenience init(Decoder)","type":"init"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/init(_:maximumbuffersize:)","title":"init(Decoder, maximumBufferSize: Int?)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/inboundin","title":"ByteToMessageHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/inboundout","title":"ByteToMessageHandler.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niocore\/bytetomessagehandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niocore\/bytetomessagehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/outboundin","title":"ByteToMessageHandler.OutboundIn","type":"typealias"}],"path":"\/documentation\/niocore\/bytetomessagehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niocore\/bytetomessagehandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/userinboundeventtriggered(context:event:)","title":"func userInboundEventTriggered(context: ChannelHandlerContext, event: Any)","type":"method"}],"path":"\/documentation\/niocore\/bytetomessagehandler\/_channelinboundhandler-implementations","title":"_ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagehandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niocore\/bytetomessagehandler\/_channeloutboundhandler-implementations","title":"_ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/bytetomessagehandler","title":"ByteToMessageHandler","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelhandlercontext\/removaltoken","title":"ChannelHandlerContext.RemovalToken","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelhandlercontext\/channel","title":"var channel: Channel","type":"property"},{"path":"\/documentation\/niocore\/channelhandlercontext\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/niocore\/channelhandlercontext\/handler","title":"var handler: ChannelHandler","type":"property"},{"path":"\/documentation\/niocore\/channelhandlercontext\/localaddress","title":"var localAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/niocore\/channelhandlercontext\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/niocore\/channelhandlercontext\/pipeline","title":"let pipeline: ChannelPipeline","type":"property"},{"path":"\/documentation\/niocore\/channelhandlercontext\/remoteaddress","title":"var remoteAddress: SocketAddress?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelhandlercontext\/bind(to:promise:)","title":"func bind(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/close(mode:promise:)","title":"func close(mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/connect(to:promise:)","title":"func connect(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/firechannelactive()","title":"func fireChannelActive()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/firechannelinactive()","title":"func fireChannelInactive()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/firechannelread(_:)","title":"func fireChannelRead(NIOAny)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/firechannelreadcomplete()","title":"func fireChannelReadComplete()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/firechannelregistered()","title":"func fireChannelRegistered()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/firechannelunregistered()","title":"func fireChannelUnregistered()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/firechannelwritabilitychanged()","title":"func fireChannelWritabilityChanged()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/fireerrorcaught(_:)","title":"func fireErrorCaught(Error)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/fireuserinboundeventtriggered(_:)","title":"func fireUserInboundEventTriggered(Any)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/flush()","title":"func flush()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/leavepipeline(removaltoken:)","title":"func leavePipeline(removalToken: ChannelHandlerContext.RemovalToken)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/read()","title":"func read()","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/register(promise:)","title":"func register(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/triggeruseroutboundevent(_:promise:)","title":"func triggerUserOutboundEvent(Any, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/write(_:promise:)","title":"func write(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/writeandflush(_:promise:)","title":"func writeAndFlush(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelhandlercontext\/bind(to:file:line:)","title":"func bind(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/close(mode:file:line:)","title":"func close(mode: CloseMode, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/connect(to:file:line:)","title":"func connect(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/register(file:line:)","title":"func register(file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/triggeruseroutboundevent(_:file:line:)","title":"func triggerUserOutboundEvent(Any, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/write(_:file:line:)","title":"func write(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelhandlercontext\/writeandflush(_:file:line:)","title":"func writeAndFlush(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/niocore\/channelhandlercontext\/channeloutboundinvoker-implementations","title":"ChannelOutboundInvoker Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channelhandlercontext","title":"ChannelHandlerContext","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/addhttpclienthandlers(position:leftoverbytesstrategy:withclientupgrade:)","title":"func addHTTPClientHandlers(position: ChannelPipeline.Position, leftOverBytesStrategy: RemoveAfterUpgradeStrategy, withClientUpgrade: NIOHTTPClientUpgradeConfiguration?) throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/addhandler(_:name:position:)","title":"func addHandler(ChannelHandler, name: String?, position: ChannelPipeline.Position) throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/addhandlers(_:position:)-9uue2","title":"func addHandlers([ChannelHandler], position: ChannelPipeline.Position) throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/addhandlers(_:position:)-xb52","title":"func addHandlers(ChannelHandler..., position: ChannelPipeline.Position) throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/bind(to:promise:)","title":"func bind(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/close(mode:promise:)","title":"func close(mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/configurehttpserverpipeline(position:withpipeliningassistance:withserverupgrade:witherrorhandling:)","title":"func configureHTTPServerPipeline(position: ChannelPipeline.Position, withPipeliningAssistance: Bool, withServerUpgrade: NIOHTTPServerUpgradeConfiguration?, withErrorHandling: Bool) throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/connect(to:promise:)","title":"func connect(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/context(handler:)","title":"func context(handler: ChannelHandler) throws -> ChannelHandlerContext","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/context(handlertype:)","title":"func context<Handler>(handlerType: Handler.Type) throws -> ChannelHandlerContext","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/context(name:)","title":"func context(name: String) throws -> ChannelHandlerContext","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/firechannelactive()","title":"func fireChannelActive()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/firechannelinactive()","title":"func fireChannelInactive()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/firechannelread(_:)","title":"func fireChannelRead(NIOAny)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/firechannelreadcomplete()","title":"func fireChannelReadComplete()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/firechannelregistered()","title":"func fireChannelRegistered()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/firechannelunregistered()","title":"func fireChannelUnregistered()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/firechannelwritabilitychanged()","title":"func fireChannelWritabilityChanged()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/fireerrorcaught(_:)","title":"func fireErrorCaught(Error)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/fireuserinboundeventtriggered(_:)","title":"func fireUserInboundEventTriggered(Any)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/flush()","title":"func flush()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/handler(type:)","title":"func handler<Handler>(type: Handler.Type) throws -> Handler","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/niossl_tlsversion()","title":"func nioSSL_tlsVersion() throws -> TLSVersion?","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/read()","title":"func read()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/register(promise:)","title":"func register(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/triggeruseroutboundevent(_:promise:)","title":"func triggerUserOutboundEvent(Any, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/write(_:promise:)","title":"func write(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations\/writeandflush(_:promise:)","title":"func writeAndFlush(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niocore\/channelpipeline\/synchronousoperations","title":"ChannelPipeline.SynchronousOperations","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/init(channel:)","title":"init(channel: Channel)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/niocore\/channelpipeline\/syncoperations","title":"var syncOperations: ChannelPipeline.SynchronousOperations","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/addhttpclienthandlers(position:leftoverbytesstrategy:)","title":"func addHTTPClientHandlers(position: ChannelPipeline.Position, leftOverBytesStrategy: RemoveAfterUpgradeStrategy) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/addhttpclienthandlers(position:leftoverbytesstrategy:withclientupgrade:)","title":"func addHTTPClientHandlers(position: ChannelPipeline.Position, leftOverBytesStrategy: RemoveAfterUpgradeStrategy, withClientUpgrade: NIOHTTPClientUpgradeConfiguration?) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/addhandler(_:name:position:)-352i2","title":"func addHandler(ChannelHandler, name: String?, position: ChannelPipeline.Position) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/addhandler(_:name:position:)-7wa0e","title":"func addHandler(ChannelHandler, name: String?, position: ChannelPipeline.Position) async throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/addhandlers(_:position:)-2fmmt","title":"func addHandlers([ChannelHandler], position: ChannelPipeline.Position) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/addhandlers(_:position:)-2s3d9","title":"func addHandlers([ChannelHandler], position: ChannelPipeline.Position) async throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/addhandlers(_:position:)-6qm2j","title":"func addHandlers(ChannelHandler..., position: ChannelPipeline.Position) async throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/addhandlers(_:position:)-9cxep","title":"func addHandlers(ChannelHandler..., position: ChannelPipeline.Position) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/bind(to:promise:)","title":"func bind(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/close(mode:promise:)","title":"func close(mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/configurehttp2secureupgrade(h2pipelineconfigurator:http1pipelineconfigurator:)","title":"func configureHTTP2SecureUpgrade(h2PipelineConfigurator: (ChannelPipeline) -> EventLoopFuture<Void>, http1PipelineConfigurator: (ChannelPipeline) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/configurehttpserverpipeline(position:withpipeliningassistance:withserverupgrade:witherrorhandling:)","title":"func configureHTTPServerPipeline(position: ChannelPipeline.Position, withPipeliningAssistance: Bool, withServerUpgrade: NIOHTTPServerUpgradeConfiguration?, withErrorHandling: Bool) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/connect(to:promise:)","title":"func connect(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/context(handler:)-2u7u9","title":"func context(handler: ChannelHandler) async throws -> ChannelHandlerContext","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/context(handler:)-9ow8y","title":"func context(handler: ChannelHandler) -> EventLoopFuture<ChannelHandlerContext>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/context(handlertype:)-2zwp1","title":"func context<Handler>(handlerType: Handler.Type) async throws -> ChannelHandlerContext","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/context(handlertype:)-7xmo","title":"func context<Handler>(handlerType: Handler.Type) -> EventLoopFuture<ChannelHandlerContext>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/context(name:)-3lr76","title":"func context(name: String) async throws -> ChannelHandlerContext","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/context(name:)-5v7xj","title":"func context(name: String) -> EventLoopFuture<ChannelHandlerContext>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/firechannelactive()","title":"func fireChannelActive()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/firechannelinactive()","title":"func fireChannelInactive()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/firechannelread(_:)","title":"func fireChannelRead(NIOAny)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/firechannelreadcomplete()","title":"func fireChannelReadComplete()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/firechannelregistered()","title":"func fireChannelRegistered()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/firechannelunregistered()","title":"func fireChannelUnregistered()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/firechannelwritabilitychanged()","title":"func fireChannelWritabilityChanged()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/fireerrorcaught(_:)","title":"func fireErrorCaught(Error)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/fireuserinboundeventtriggered(_:)","title":"func fireUserInboundEventTriggered(Any)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/flush()","title":"func flush()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/handler(type:)","title":"func handler<Handler>(type: Handler.Type) -> EventLoopFuture<Handler>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/read()","title":"func read()","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/register(promise:)","title":"func register(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(_:)-4alhd","title":"func removeHandler(RemovableChannelHandler) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(_:)-8mrfs","title":"func removeHandler(RemovableChannelHandler) async throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(_:promise:)","title":"func removeHandler(RemovableChannelHandler, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(context:)-2dhfw","title":"func removeHandler(context: ChannelHandlerContext) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(context:)-9c4qg","title":"func removeHandler(context: ChannelHandlerContext) async throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(context:promise:)","title":"func removeHandler(context: ChannelHandlerContext, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(name:)-1v5di","title":"func removeHandler(name: String) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(name:)-3n54r","title":"func removeHandler(name: String) async throws","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/removehandler(name:promise:)","title":"func removeHandler(name: String, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/triggeruseroutboundevent(_:promise:)","title":"func triggerUserOutboundEvent(Any, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/write(_:promise:)","title":"func write(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/writeandflush(_:promise:)","title":"func writeAndFlush(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/position\/after(_:)","title":"case after(ChannelHandler)","type":"case"},{"path":"\/documentation\/niocore\/channelpipeline\/position\/before(_:)","title":"case before(ChannelHandler)","type":"case"},{"path":"\/documentation\/niocore\/channelpipeline\/position\/first","title":"case first","type":"case"},{"path":"\/documentation\/niocore\/channelpipeline\/position\/last","title":"case last","type":"case"}],"path":"\/documentation\/niocore\/channelpipeline\/position","title":"ChannelPipeline.Position","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/bind(to:file:line:)","title":"func bind(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/close(mode:file:line:)","title":"func close(mode: CloseMode, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/connect(to:file:line:)","title":"func connect(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/register(file:line:)","title":"func register(file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/triggeruseroutboundevent(_:file:line:)","title":"func triggerUserOutboundEvent(Any, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/write(_:file:line:)","title":"func write(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channelpipeline\/writeandflush(_:file:line:)","title":"func writeAndFlush(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/niocore\/channelpipeline\/channeloutboundinvoker-implementations","title":"ChannelOutboundInvoker Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipeline\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niocore\/channelpipeline\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channelpipeline","title":"ChannelPipeline","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopfuture\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopfuture\/always(_:)","title":"func always((Result<Value, Error>) -> Void) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/and(_:)","title":"func and<OtherValue>(EventLoopFuture<OtherValue>) -> EventLoopFuture<(Value, OtherValue)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/and(_:file:line:)","title":"func and<OtherValue>(EventLoopFuture<OtherValue>, file: StaticString, line: UInt) -> EventLoopFuture<(Value, OtherValue)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/and(value:)","title":"func and<OtherValue>(value: OtherValue) -> EventLoopFuture<(Value, OtherValue)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/and(value:file:line:)","title":"func and<OtherValue>(value: OtherValue, file: StaticString, line: UInt) -> EventLoopFuture<(Value, OtherValue)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/cascade(to:)","title":"func cascade(to: EventLoopPromise<Value>?)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/cascadefailure(to:)","title":"func cascadeFailure<NewValue>(to: EventLoopPromise<NewValue>?)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/cascadesuccess(to:)","title":"func cascadeSuccess(to: EventLoopPromise<Value>?)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmap(_:)","title":"func flatMap<NewValue>((Value) -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmap(file:line:_:)","title":"func flatMap<NewValue>(file: StaticString, line: UInt, (Value) -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapalways(file:line:_:)","title":"func flatMapAlways<NewValue>(file: StaticString, line: UInt, (Result<Value, Error>) -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapblocking(onto:_:)","title":"func flatMapBlocking<NewValue>(onto: DispatchQueue, (Value) throws -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapeach(on:_:)-8yhpe","title":"func flatMapEach<Result>(on: EventLoop, (Value.Element) -> EventLoopFuture<Result>) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapeach(on:_:)-9yail","title":"func flatMapEach(on: EventLoop, (Value.Element) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapeachcompact(on:_:)","title":"func flatMapEachCompact<Result>(on: EventLoop, (Value.Element) -> EventLoopFuture<Result?>) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapeachcompactthrowing(_:)","title":"func flatMapEachCompactThrowing<Result>((Value.Element) throws -> Result?) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapeachthrowing(_:)","title":"func flatMapEachThrowing<Result>((Value.Element) throws -> Result) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmaperror(_:)","title":"func flatMapError((Error) -> EventLoopFuture<Value>) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmaperror(file:line:_:)","title":"func flatMapError(file: StaticString, line: UInt, (Error) -> EventLoopFuture<Value>) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmaperrorthrowing(_:)","title":"func flatMapErrorThrowing((Error) throws -> Value) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmaperrorthrowing(file:line:_:)","title":"func flatMapErrorThrowing(file: StaticString, line: UInt, (Error) throws -> Value) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmaperrorwitheventloop(_:)","title":"func flatMapErrorWithEventLoop((Error, EventLoop) -> EventLoopFuture<Value>) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapresult(_:)","title":"func flatMapResult<NewValue, SomeError>((Value) -> Result<NewValue, SomeError>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapresult(file:line:_:)","title":"func flatMapResult<NewValue, SomeError>(file: StaticString, line: UInt, (Value) -> Result<NewValue, SomeError>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapthrowing(_:)","title":"func flatMapThrowing<NewValue>((Value) throws -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapthrowing(file:line:_:)","title":"func flatMapThrowing<NewValue>(file: StaticString, line: UInt, (Value) throws -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/flatmapwitheventloop(_:)","title":"func flatMapWithEventLoop<NewValue>((Value, EventLoop) -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/fold(_:with:)","title":"func fold<OtherValue>([EventLoopFuture<OtherValue>], with: (Value, OtherValue) -> EventLoopFuture<Value>) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/foldwitheventloop(_:with:)","title":"func foldWithEventLoop<OtherValue>([EventLoopFuture<OtherValue>], with: (Value, OtherValue, EventLoop) -> EventLoopFuture<Value>) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/get()","title":"func get() async throws -> Value","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/guard(_:else:)","title":"func `guard`(((Value) -> Bool), else: () -> Error) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/hop(to:)","title":"func hop(to: EventLoop) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/map(_:)","title":"func map<NewValue>((Value) -> (NewValue)) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/map(file:line:_:)","title":"func map<NewValue>(file: StaticString, line: UInt, (Value) -> (NewValue)) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/mapeach(_:)-3wa2g","title":"func mapEach<Result>(KeyPath<Value.Element, Result>) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/mapeach(_:)-9cwjy","title":"func mapEach<Result>((Value.Element) -> Result) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/mapeachcompact(_:)-2vkmo","title":"func mapEachCompact<Result>(KeyPath<Value.Element, Result?>) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/mapeachcompact(_:)-4sfs3","title":"func mapEachCompact<Result>((Value.Element) -> Result?) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/mapeachflat(_:)-783z2","title":"func mapEachFlat<ResultSegment>((Value.Element) -> ResultSegment) -> EventLoopFuture<[ResultSegment.Element]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/mapeachflat(_:)-9kgfr","title":"func mapEachFlat<ResultSegment>(KeyPath<Value.Element, ResultSegment>) -> EventLoopFuture<[ResultSegment.Element]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonempty(orerror:)","title":"func nonempty<E>(orError: () -> E) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmap(_:)","title":"func nonemptyFlatMap<NewValue>((Value) -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmap(or:_:)","title":"func nonemptyFlatMap<NewValue>(or: () -> NewValue, (Value) -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmap(orflat:_:)","title":"func nonemptyFlatMap<NewValue>(orFlat: () -> EventLoopFuture<NewValue>, (Value) -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(_:)","title":"func nonemptyFlatMapThrowing<NewValue>((Value) throws -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(or:_:)","title":"func nonemptyFlatMapThrowing<NewValue>(or: () -> NewValue, (Value) throws -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonemptymap(_:)","title":"func nonemptyMap<NewValue>((Value) -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/nonemptymap(or:_:)","title":"func nonemptyMap<NewValue>(or: () -> NewValue, (Value) -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/optionalflatmap(_:)-1c1gn","title":"func optionalFlatMap<Wrapped, Result>((Wrapped) -> EventLoopFuture<Result?>) -> EventLoopFuture<Result?>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/optionalflatmap(_:)-1lhnd","title":"func optionalFlatMap<Wrapped, Result>((Wrapped) -> EventLoopFuture<Result>) -> EventLoopFuture<Result?>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/optionalflatmapthrowing(_:)","title":"func optionalFlatMapThrowing<Wrapped, Result>((Wrapped) throws -> Result?) -> EventLoopFuture<Result?>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/optionalmap(_:)","title":"func optionalMap<Wrapped, Result>((Wrapped) -> Result?) -> EventLoopFuture<Result?>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/recover(_:)","title":"func recover((Error) -> Value) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/recover(file:line:_:)","title":"func recover(file: StaticString, line: UInt, (Error) -> Value) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/sequencedflatmapeach(_:)-29ak2","title":"func sequencedFlatMapEach((Value.Element) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/sequencedflatmapeach(_:)-6d82b","title":"func sequencedFlatMapEach<Result>((Value.Element) -> EventLoopFuture<Result>) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/sequencedflatmapeachcompact(_:)","title":"func sequencedFlatMapEachCompact<Result>((Value.Element) -> EventLoopFuture<Result?>) -> EventLoopFuture<[Result]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/transform(to:)-3k9qv","title":"func transform<T>(to: () -> T) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/transform(to:)-7agus","title":"func transform<T>(to: EventLoopFuture<T>) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/tryflatmap(file:line:_:)","title":"func tryFlatMap<NewValue>(file: StaticString, line: UInt, (Value) throws -> EventLoopFuture<NewValue>) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/unwrap(or:)","title":"func unwrap(or: () -> Error) -> EventLoopFuture<Value.WrappedType>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/unwrap(orelse:)","title":"func unwrap<NewValue>(orElse: () -> NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/unwrap(orerror:)","title":"func unwrap<NewValue>(orError: Error) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/unwrap(orreplace:)","title":"func unwrap<NewValue>(orReplace: NewValue) -> EventLoopFuture<NewValue>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/wait(file:line:)","title":"func wait(file: StaticString, line: UInt) throws -> Value","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whencomplete(_:)","title":"func whenComplete((Result<Value, Error>) -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whencompleteblocking(onto:_:)","title":"func whenCompleteBlocking(onto: DispatchQueue, (Result<Value, Error>) -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whenfailure(_:)","title":"func whenFailure((Error) -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whenfailureblocking(onto:_:)","title":"func whenFailureBlocking(onto: DispatchQueue, (Error) -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whensuccess(_:)","title":"func whenSuccess((Value) -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whensuccessblocking(onto:_:)","title":"func whenSuccessBlocking(onto: DispatchQueue, (Value) -> Void)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopfuture\/andallcomplete(_:on:)","title":"static func andAllComplete([EventLoopFuture<Value>], on: EventLoop) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/andallcomplete(_:promise:)","title":"static func andAllComplete([EventLoopFuture<Value>], promise: EventLoopPromise<Void>)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/andallsucceed(_:on:)","title":"static func andAllSucceed([EventLoopFuture<Value>], on: EventLoop) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/andallsucceed(_:promise:)","title":"static func andAllSucceed([EventLoopFuture<Value>], promise: EventLoopPromise<Void>)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/reduce(_:_:on:_:)","title":"static func reduce<InputValue>(Value, [EventLoopFuture<InputValue>], on: EventLoop, (Value, InputValue) -> Value) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/reduce(into:_:on:_:)","title":"static func reduce<InputValue>(into: Value, [EventLoopFuture<InputValue>], on: EventLoop, (inout Value, InputValue) -> Void) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whenallcomplete(_:on:)","title":"static func whenAllComplete([EventLoopFuture<Value>], on: EventLoop) -> EventLoopFuture<[Result<Value, Error>]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whenallcomplete(_:promise:)","title":"static func whenAllComplete([EventLoopFuture<Value>], promise: EventLoopPromise<[Result<Value, Error>]>)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whenallsucceed(_:on:)","title":"static func whenAllSucceed([EventLoopFuture<Value>], on: EventLoop) -> EventLoopFuture<[Value]>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whenallsucceed(_:promise:)","title":"static func whenAllSucceed([EventLoopFuture<Value>], promise: EventLoopPromise<[Value]>)","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, EventLoopFuture<N>, EventLoopFuture<O>, EventLoopFuture<P>, EventLoopFuture<Q>, EventLoopFuture<R>, EventLoopFuture<S>, EventLoopFuture<T>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, EventLoopFuture<N>, EventLoopFuture<O>, EventLoopFuture<P>, EventLoopFuture<Q>, EventLoopFuture<R>, EventLoopFuture<S>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, EventLoopFuture<N>, EventLoopFuture<O>, EventLoopFuture<P>, EventLoopFuture<Q>, EventLoopFuture<R>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, EventLoopFuture<N>, EventLoopFuture<O>, EventLoopFuture<P>, EventLoopFuture<Q>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, EventLoopFuture<N>, EventLoopFuture<O>, EventLoopFuture<P>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, EventLoopFuture<N>, EventLoopFuture<O>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, EventLoopFuture<N>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M, N)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L, M>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, EventLoopFuture<M>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L, M)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K, L>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, EventLoopFuture<L>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K, L)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J, K>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, EventLoopFuture<K>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J, K)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I, J>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, EventLoopFuture<J>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I, J)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H, I>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, EventLoopFuture<I>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H, I)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G, H>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, EventLoopFuture<H>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G, H)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F, G>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, EventLoopFuture<G>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F, G)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E, F>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, EventLoopFuture<F>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E, F)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D, E>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, EventLoopFuture<E>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D, E)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C, D>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, EventLoopFuture<D>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C, D)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:_:file:line:)","title":"static func whenTheySucceed<A, B, C>(EventLoopFuture<A>, EventLoopFuture<B>, EventLoopFuture<C>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B, C)>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/whentheysucceed(_:_:file:line:)","title":"static func whenTheySucceed<A, B>(EventLoopFuture<A>, EventLoopFuture<B>, file: StaticString, line: UInt) -> EventLoopFuture<(A, B)>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopfuture\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/eventloopfuture\/==(_:_:)","title":"static func == (EventLoopFuture<Value>, EventLoopFuture<Value>) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/eventloopfuture\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopfuture\/encoderesponse(for:)","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"path":"\/documentation\/niocore\/eventloopfuture\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/niocore\/eventloopfuture\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/eventloopfuture","title":"EventLoopFuture","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/init(readtimeout:writetimeout:alltimeout:)","title":"init(readTimeout: TimeAmount?, writeTimeout: TimeAmount?, allTimeout: TimeAmount?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/alltimeout","title":"let allTimeout: TimeAmount?","type":"property"},{"path":"\/documentation\/niocore\/idlestatehandler\/readtimeout","title":"let readTimeout: TimeAmount?","type":"property"},{"path":"\/documentation\/niocore\/idlestatehandler\/writetimeout","title":"let writeTimeout: TimeAmount?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/idlestatehandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niocore\/idlestatehandler\/channelreadcomplete(context:)","title":"func channelReadComplete(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/idlestatehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/idlestatehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/idlestatehandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/inboundin","title":"IdleStateHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niocore\/idlestatehandler\/inboundout","title":"IdleStateHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niocore\/idlestatehandler\/outboundin","title":"IdleStateHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niocore\/idlestatehandler\/outboundout","title":"IdleStateHandler.OutboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/idlestateevent\/all","title":"case all","type":"case"},{"path":"\/documentation\/niocore\/idlestatehandler\/idlestateevent\/read","title":"case read","type":"case"},{"path":"\/documentation\/niocore\/idlestatehandler\/idlestateevent\/write","title":"case write","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/idlestateevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/idlestatehandler\/idlestateevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/idlestatehandler\/idlestateevent","title":"IdleStateHandler.IdleStateEvent","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niocore\/idlestatehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niocore\/idlestatehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niocore\/idlestatehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/idlestatehandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niocore\/idlestatehandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/idlestatehandler","title":"IdleStateHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/messagetobytehandler\/init(_:)","title":"init(Encoder)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/messagetobytehandler\/outboundin","title":"MessageToByteHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niocore\/messagetobytehandler\/outboundout","title":"MessageToByteHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/messagetobytehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/messagetobytehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niocore\/messagetobytehandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/messagetobytehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niocore\/messagetobytehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/messagetobytehandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niocore\/messagetobytehandler\/_channeloutboundhandler-implementations","title":"_ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/messagetobytehandler","title":"MessageToByteHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niocloseonerrorhandler\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niocloseonerrorhandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/niocloseonerrorhandler\/inboundin","title":"NIOCloseOnErrorHandler.InboundIn","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niocloseonerrorhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niocore\/niocloseonerrorhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niocore\/niocloseonerrorhandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niocloseonerrorhandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niocore\/niocloseonerrorhandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niocore\/niocloseonerrorhandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niocloseonerrorhandler","title":"NIOCloseOnErrorHandler","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/flags\/default","title":"static let `default`: NIOFileHandle.Flags","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/flags\/allowfilecreation(posixmode:)","title":"static func allowFileCreation(posixMode: mode_t) -> NIOFileHandle.Flags","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/flags\/posix(flags:mode:)","title":"static func posix(flags: CInt, mode: mode_t) -> NIOFileHandle.Flags","type":"method"}],"path":"\/documentation\/niocore\/niofilehandle\/flags","title":"NIOFileHandle.Flags","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/init(rawvalue:)","title":"init(rawValue: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/rawvalue","title":"let rawValue: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/read","title":"static let read: NIOFileHandle.Mode","type":"property"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/write","title":"static let write: NIOFileHandle.Mode","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niofilehandle\/mode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/niocore\/niofilehandle\/mode\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/mode\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/niocore\/niofilehandle\/mode\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niofilehandle\/mode","title":"NIOFileHandle.Mode","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/init(descriptor:)","title":"init(descriptor: CInt)","type":"init"},{"path":"\/documentation\/niocore\/niofilehandle\/init(path:)","title":"convenience init(path: String) throws","type":"init"},{"path":"\/documentation\/niocore\/niofilehandle\/init(path:mode:flags:)","title":"convenience init(path: String, mode: NIOFileHandle.Mode, flags: NIOFileHandle.Flags) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/isopen","title":"var isOpen: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/duplicate()","title":"func duplicate() throws -> NIOFileHandle","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/takedescriptorownership()","title":"func takeDescriptorOwnership() throws -> CInt","type":"method"},{"path":"\/documentation\/niocore\/niofilehandle\/withunsafefiledescriptor(_:)","title":"func withUnsafeFileDescriptor<T>((CInt) throws -> T) throws -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niofilehandle\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/niofilehandle\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niofilehandle","title":"NIOFileHandle","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkinterface\/address","title":"let address: SocketAddress","type":"property"},{"path":"\/documentation\/niocore\/nionetworkinterface\/broadcastaddress","title":"let broadcastAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/niocore\/nionetworkinterface\/interfaceindex","title":"let interfaceIndex: Int","type":"property"},{"path":"\/documentation\/niocore\/nionetworkinterface\/multicastsupported","title":"let multicastSupported: Bool","type":"property"},{"path":"\/documentation\/niocore\/nionetworkinterface\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/niocore\/nionetworkinterface\/netmask","title":"let netmask: SocketAddress?","type":"property"},{"path":"\/documentation\/niocore\/nionetworkinterface\/pointtopointdestinationaddress","title":"let pointToPointDestinationAddress: SocketAddress?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkinterface\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niocore\/nionetworkinterface\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkinterface\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/nionetworkinterface\/==(_:_:)","title":"static func == (NIONetworkInterface, NIONetworkInterface) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/nionetworkinterface\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/nionetworkinterface","title":"NIONetworkInterface","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/init(_:maximumbuffersize:)","title":"init(Decoder, maximumBufferSize: Int?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/finishprocessing(seeneof:_:)","title":"func finishProcessing(seenEOF: Bool, (Decoder.InboundOut) throws -> Void) throws","type":"method"},{"path":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/process(buffer:_:)","title":"func process(buffer: ByteBuffer, (Decoder.InboundOut) throws -> Void) throws","type":"method"}],"path":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","title":"NIOSingleStepByteToMessageProcessor","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/repeatedtask\/cancel(promise:)","title":"func cancel(promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niocore\/repeatedtask","title":"RepeatedTask","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagedecoder\/inboundout","title":"InboundOut","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"}],"title":"NIOSingleStepByteToMessageDecoder Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/bytetomessagedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/bytetomessagedecoder\/decodelast(context:buffer:seeneof:)-4ozbu","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"}],"title":"ByteToMessageDecoder Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"}],"title":"NIOSingleStepByteToMessageDecoder Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/bytetomessagedecoder\/decodelast(context:buffer:seeneof:)-1tkzf","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/bytetomessagedecoder\/decoderadded(context:)-2nnu4","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"}],"title":"ByteToMessageDecoder Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/bytetomessagedecoder\/decoderadded(context:)-7trzq","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/bytetomessagedecoder\/decoderremoved(context:)-6sqy9","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"}],"title":"ByteToMessageDecoder Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/bytetomessagedecoder\/decoderremoved(context:)-sa8l","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/bytetomessagedecoder\/shouldreclaimbytes(buffer:)-4kttq","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"}],"title":"ByteToMessageDecoder Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/bytetomessagedecoder\/shouldreclaimbytes(buffer:)-5fn2u","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytetomessagedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niocore\/bytetomessagedecoder","title":"ByteToMessageDecoder","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channel\/allocator","title":"var allocator: ByteBufferAllocator","type":"property"},{"path":"\/documentation\/niocore\/channel\/closefuture","title":"var closeFuture: EventLoopFuture<Void>","type":"property"},{"path":"\/documentation\/niocore\/channel\/isactive","title":"var isActive: Bool","type":"property"},{"path":"\/documentation\/niocore\/channel\/iswritable","title":"var isWritable: Bool","type":"property"},{"path":"\/documentation\/niocore\/channel\/localaddress","title":"var localAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/niocore\/channel\/parent","title":"var parent: Channel?","type":"property"},{"path":"\/documentation\/niocore\/channel\/pipeline","title":"var pipeline: ChannelPipeline","type":"property"},{"path":"\/documentation\/niocore\/channel\/remoteaddress","title":"var remoteAddress: SocketAddress?","type":"property"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/syncoptions-67jbi","title":"var syncOptions: NIOSynchronousChannelOptions?","type":"property"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channel\/syncoptions-17fda","title":"var syncOptions: NIOSynchronousChannelOptions?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channel\/configurecommonhttpserverpipeline(h2connectionchannelconfigurator:_:)","title":"func configureCommonHTTPServerPipeline(h2ConnectionChannelConfigurator: ((Channel) -> EventLoopFuture<Void>)?, (Channel) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channel\/configurecommonhttpserverpipeline(h2connectionchannelconfigurator:targetwindowsize:_:)","title":"func configureCommonHTTPServerPipeline(h2ConnectionChannelConfigurator: ((Channel) -> EventLoopFuture<Void>)?, targetWindowSize: Int, (Channel) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channel\/configurehttp2pipeline(mode:initiallocalsettings:position:inboundstreamstateinitializer:)","title":"func configureHTTP2Pipeline(mode: NIOHTTP2Handler.ParserMode, initialLocalSettings: [HTTP2Setting], position: ChannelPipeline.Position, inboundStreamStateInitializer: ((Channel, HTTP2StreamID) -> EventLoopFuture<Void>)?) -> EventLoopFuture<HTTP2StreamMultiplexer>","type":"method"},{"path":"\/documentation\/niocore\/channel\/configurehttp2pipeline(mode:initiallocalsettings:position:targetwindowsize:inboundstreaminitializer:)","title":"func configureHTTP2Pipeline(mode: NIOHTTP2Handler.ParserMode, initialLocalSettings: [HTTP2Setting], position: ChannelPipeline.Position, targetWindowSize: Int, inboundStreamInitializer: ((Channel) -> EventLoopFuture<Void>)?) -> EventLoopFuture<HTTP2StreamMultiplexer>","type":"method"},{"path":"\/documentation\/niocore\/channel\/configurehttp2pipeline(mode:initiallocalsettings:position:targetwindowsize:inboundstreamstateinitializer:)","title":"func configureHTTP2Pipeline(mode: NIOHTTP2Handler.ParserMode, initialLocalSettings: [HTTP2Setting], position: ChannelPipeline.Position, targetWindowSize: Int, inboundStreamStateInitializer: ((Channel, HTTP2StreamID) -> EventLoopFuture<Void>)?) -> EventLoopFuture<HTTP2StreamMultiplexer>","type":"method"},{"path":"\/documentation\/niocore\/channel\/configurehttp2secureupgrade(h2channelconfigurator:http1channelconfigurator:)","title":"func configureHTTP2SecureUpgrade(h2ChannelConfigurator: (Channel) -> EventLoopFuture<Void>, http1ChannelConfigurator: (Channel) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/getoption(_:)-2ygw9","title":"func getOption<Option>(Option) async throws -> Option.Value","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channel\/getoption(_:)-5gug6","title":"func getOption<Option>(Option) -> EventLoopFuture<Option.Value>","type":"method"},{"path":"\/documentation\/niocore\/channel\/niossl_tlsversion()","title":"func nioSSL_tlsVersion() -> EventLoopFuture<TLSVersion?>","type":"method"},{"path":"\/documentation\/niocore\/channel\/registeralreadyconfigured0(promise:)","title":"func registerAlreadyConfigured0(promise: EventLoopPromise<Void>?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/setoption(_:value:)-5jjyy","title":"func setOption<Option>(Option, value: Option.Value) async throws","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channel\/setoption(_:value:)-2fzo9","title":"func setOption<Option>(Option, value: Option.Value) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channel\/write(_:)","title":"func write<T>(T) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channel\/writeandflush(_:)-6zx58","title":"func writeAndFlush<T>(T) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channel\/writeandflush(_:)-9jslm","title":"func writeAndFlush<T>(T) async throws","type":"method"}],"path":"\/documentation\/niocore\/channel","title":"Channel","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelcore\/bind0(to:promise:)","title":"func bind0(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/channelread0(_:)","title":"func channelRead0(NIOAny)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/close0(error:mode:promise:)","title":"func close0(error: Error, mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/connect0(to:promise:)","title":"func connect0(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/errorcaught0(error:)","title":"func errorCaught0(error: Error)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/flush0()","title":"func flush0()","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/localaddress0()","title":"func localAddress0() throws -> SocketAddress","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/read0()","title":"func read0()","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/register0(promise:)","title":"func register0(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/registeralreadyconfigured0(promise:)","title":"func registerAlreadyConfigured0(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/remoteaddress0()","title":"func remoteAddress0() throws -> SocketAddress","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/removehandlers(channel:)","title":"func removeHandlers(channel: Channel)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/removehandlers(pipeline:)","title":"func removeHandlers(pipeline: ChannelPipeline)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/triggeruseroutboundevent0(_:promise:)","title":"func triggerUserOutboundEvent0(Any, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)","title":"func tryUnwrapData<T>(NIOAny, as: T.Type) -> T?","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/unwrapdata(_:as:)","title":"func unwrapData<T>(NIOAny, as: T.Type) -> T","type":"method"},{"path":"\/documentation\/niocore\/channelcore\/write0(_:promise:)","title":"func write0(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niocore\/channelcore","title":"ChannelCore","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channelhandler\/handleradded(context:)-1hjf9","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"}],"title":"ChannelHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channelhandler\/handleradded(context:)-5e6wf","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channelhandler\/handlerremoved(context:)-73g5i","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"title":"ChannelHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channelhandler\/handlerremoved(context:)-7h69k","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niocore\/channelhandler","title":"ChannelHandler","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelinboundhandler\/inboundin","title":"InboundIn","type":"associatedtype"},{"path":"\/documentation\/niocore\/channelinboundhandler\/inboundout","title":"InboundOut","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channelinboundhandler\/unwrapinboundin(_:)-ur5h","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"}],"title":"ChannelInboundHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channelinboundhandler\/unwrapinboundin(_:)-7giwp","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channelinboundhandler\/wrapinboundout(_:)-5nokh","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"title":"ChannelInboundHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channelinboundhandler\/wrapinboundout(_:)-51n3v","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niocore\/channelinboundhandler","title":"ChannelInboundHandler","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/firechannelactive()","title":"func fireChannelActive()","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/firechannelinactive()","title":"func fireChannelInactive()","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/firechannelread(_:)","title":"func fireChannelRead(NIOAny)","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/firechannelreadcomplete()","title":"func fireChannelReadComplete()","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/firechannelregistered()","title":"func fireChannelRegistered()","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/firechannelunregistered()","title":"func fireChannelUnregistered()","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/firechannelwritabilitychanged()","title":"func fireChannelWritabilityChanged()","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/fireerrorcaught(_:)","title":"func fireErrorCaught(Error)","type":"method"},{"path":"\/documentation\/niocore\/channelinboundinvoker\/fireuserinboundeventtriggered(_:)","title":"func fireUserInboundEventTriggered(Any)","type":"method"}],"path":"\/documentation\/niocore\/channelinboundinvoker","title":"ChannelInboundInvoker","type":"protocol"},{"path":"\/documentation\/niocore\/channelinvoker","title":"ChannelInvoker","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloption\/value","title":"Value","type":"associatedtype"}],"path":"\/documentation\/niocore\/channeloption","title":"ChannelOption","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloutboundhandler\/outboundin","title":"OutboundIn","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channeloutboundhandler\/unwrapoutboundin(_:)-5k1ss","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"title":"ChannelOutboundHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundhandler\/unwrapoutboundin(_:)-7u2n","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niocore\/channeloutboundhandler","title":"ChannelOutboundHandler","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/bind(to:file:line:)-1vmdv","title":"func bind(to: SocketAddress, file: StaticString, line: UInt) async throws","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/bind(to:file:line:)-8dzuj","title":"func bind(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/bind(to:promise:)","title":"func bind(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/bind(to:promise:)","title":"func bind(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/close(mode:file:line:)-7hlgf","title":"func close(mode: CloseMode, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/close(mode:file:line:)-db80","title":"func close(mode: CloseMode, file: StaticString, line: UInt) async throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/close(mode:promise:)","title":"func close(mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/close(mode:promise:)","title":"func close(mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/connect(to:file:line:)-7fcj0","title":"func connect(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/connect(to:file:line:)-7wcds","title":"func connect(to: SocketAddress, file: StaticString, line: UInt) async throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/connect(to:promise:)","title":"func connect(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/connect(to:promise:)","title":"func connect(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/flush()","title":"func flush()","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/flush()","title":"func flush()","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/read()","title":"func read()","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/read()","title":"func read()","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/register(file:line:)-2ekw5","title":"func register(file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/register(file:line:)-4tkmi","title":"func register(file: StaticString, line: UInt) async throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/register(promise:)","title":"func register(promise: EventLoopPromise<Void>?)","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/register(promise:)","title":"func register(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/triggeruseroutboundevent(_:file:line:)-13y21","title":"func triggerUserOutboundEvent(Any, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/triggeruseroutboundevent(_:file:line:)-5c6ri","title":"func triggerUserOutboundEvent(Any, file: StaticString, line: UInt) async throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/triggeruseroutboundevent(_:promise:)","title":"func triggerUserOutboundEvent(Any, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/triggeruseroutboundevent(_:promise:)","title":"func triggerUserOutboundEvent(Any, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/write(_:file:line:)","title":"func write(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/write(_:promise:)-410dm","title":"func write(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channel\/write(_:promise:)-7mviy","title":"func write<T>(T, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/write(_:promise:)","title":"func write(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/writeandflush(_:file:line:)-4o0d3","title":"func writeAndFlush(NIOAny, file: StaticString, line: UInt) async throws","type":"method"},{"path":"\/documentation\/niocore\/channeloutboundinvoker\/writeandflush(_:file:line:)-90bdy","title":"func writeAndFlush(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/channel\/writeandflush(_:promise:)-8bzzw","title":"func writeAndFlush<T>(T, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/channel\/writeandflush(_:promise:)-ne5p","title":"func writeAndFlush(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"Channel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/channeloutboundinvoker\/writeandflush(_:promise:)","title":"func writeAndFlush(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niocore\/channeloutboundinvoker","title":"ChannelOutboundInvoker","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloop\/ineventloop","title":"var inEventLoop: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloop\/assertineventloop(file:line:)","title":"func assertInEventLoop(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/assertnotineventloop(file:line:)","title":"func assertNotInEventLoop(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/execute(_:)","title":"func execute(() -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/flatscheduletask(deadline:file:line:_:)","title":"func flatScheduleTask<T>(deadline: NIODeadline, file: StaticString, line: UInt, () throws -> EventLoopFuture<T>) -> Scheduled<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/flatscheduletask(in:file:line:_:)","title":"func flatScheduleTask<T>(in: TimeAmount, file: StaticString, line: UInt, () throws -> EventLoopFuture<T>) -> Scheduled<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/flatsubmit(_:)","title":"func flatSubmit<T>(() -> EventLoopFuture<T>) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/flatten(_:)-6gsl5","title":"func flatten<T>([EventLoopFuture<T>]) -> EventLoopFuture<[T]>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/flatten(_:)-7tski","title":"func flatten([EventLoopFuture<Void>]) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/makecompletedfuture(_:)","title":"func makeCompletedFuture<Success>(Result<Success, Error>) -> EventLoopFuture<Success>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/makefailedfuture(_:)","title":"func makeFailedFuture<T>(Error) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/makefailedfuture(_:file:line:)","title":"func makeFailedFuture<T>(Error, file: StaticString, line: UInt) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/makepromise(of:file:line:)","title":"func makePromise<T>(of: T.Type, file: StaticString, line: UInt) -> EventLoopPromise<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/makesucceededfuture(_:)","title":"func makeSucceededFuture<Success>(Success) -> EventLoopFuture<Success>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/makesucceededfuture(_:file:line:)","title":"func makeSucceededFuture<Success>(Success, file: StaticString, line: UInt) -> EventLoopFuture<Success>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/eventloop\/makesucceededvoidfuture()-1r0v4","title":"func makeSucceededVoidFuture() -> EventLoopFuture<Void>","type":"method"}],"title":"EventLoop Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/eventloop\/makesucceededvoidfuture()-4okco","title":"func makeSucceededVoidFuture() -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/performwithtask(_:)","title":"func performWithTask<Value>(() async throws -> Value) -> EventLoopFuture<Value>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/eventloop\/preconditionineventloop(file:line:)-2fxvb","title":"func preconditionInEventLoop(file: StaticString, line: UInt)","type":"method"}],"title":"EventLoop Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/eventloop\/preconditionineventloop(file:line:)-7ukrq","title":"func preconditionInEventLoop(file: StaticString, line: UInt)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/eventloop\/preconditionnotineventloop(file:line:)-7e155","title":"func preconditionNotInEventLoop(file: StaticString, line: UInt)","type":"method"}],"title":"EventLoop Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/eventloop\/preconditionnotineventloop(file:line:)-4nrf2","title":"func preconditionNotInEventLoop(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/schedulerepeatedasynctask(initialdelay:delay:notifying:_:)","title":"func scheduleRepeatedAsyncTask(initialDelay: TimeAmount, delay: TimeAmount, notifying: EventLoopPromise<Void>?, (RepeatedTask) -> EventLoopFuture<Void>) -> RepeatedTask","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/schedulerepeatedtask(initialdelay:delay:notifying:_:)","title":"func scheduleRepeatedTask(initialDelay: TimeAmount, delay: TimeAmount, notifying: EventLoopPromise<Void>?, (RepeatedTask) throws -> Void) -> RepeatedTask","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/scheduletask(deadline:_:)","title":"func scheduleTask<T>(deadline: NIODeadline, () throws -> T) -> Scheduled<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloop\/scheduletask(in:_:)","title":"func scheduleTask<T>(in: TimeAmount, () throws -> T) -> Scheduled<T>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/eventloop\/submit(_:)-7zap1","title":"func submit<T>(() throws -> T) -> EventLoopFuture<T>","type":"method"}],"title":"EventLoop Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/eventloop\/submit(_:)-44luu","title":"func submit<T>(() throws -> T) -> EventLoopFuture<T>","type":"method"}],"path":"\/documentation\/niocore\/eventloop","title":"EventLoop","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopgroup\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/niocore\/eventloop\/any()","title":"func any() -> EventLoop","type":"method"}],"title":"EventLoop Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/niocore\/eventloopgroup\/any()-7m1zy","title":"func any() -> EventLoop","type":"method"}],"title":"EventLoopGroup Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/eventloopgroup\/any()-2lpuq","title":"func any() -> EventLoop","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/future()","title":"func future() -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/future(_:)","title":"func future<T>(T) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/future(error:)","title":"func future<T>(error: Error) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/future(result:)","title":"func future<T>(result: Result<T, Error>) -> EventLoopFuture<T>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/eventloop\/makeiterator()","title":"func makeIterator() -> EventLoopIterator","type":"method"}],"title":"EventLoop Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/eventloopgroup\/makeiterator()","title":"func makeIterator() -> EventLoopIterator","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/eventloop\/next()","title":"func next() -> EventLoop","type":"method"}],"title":"EventLoop Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/eventloopgroup\/next()","title":"func next() -> EventLoop","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/performwithtask(_:)","title":"func performWithTask<Value>(() async throws -> Value) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/shutdowngracefully()","title":"func shutdownGracefully() async throws","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/shutdowngracefully(_:)","title":"func shutdownGracefully((Error?) -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/shutdowngracefully(queue:_:)","title":"func shutdownGracefully(queue: DispatchQueue, (Error?) -> Void)","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/syncshutdowngracefully()","title":"func syncShutdownGracefully() throws","type":"method"},{"path":"\/documentation\/niocore\/eventloopgroup\/tryfuture(_:)","title":"func tryFuture<T>(() throws -> T) -> EventLoopFuture<T>","type":"method"}],"path":"\/documentation\/niocore\/eventloopgroup","title":"EventLoopGroup","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/filedescriptor\/isopen","title":"var isOpen: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/filedescriptor\/close()","title":"func close() throws","type":"method"},{"path":"\/documentation\/niocore\/filedescriptor\/withunsafefiledescriptor(_:)","title":"func withUnsafeFileDescriptor<T>((CInt) throws -> T) throws -> T","type":"method"}],"path":"\/documentation\/niocore\/filedescriptor","title":"FileDescriptor","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/messagetobyteencoder\/outboundin","title":"OutboundIn","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/messagetobyteencoder\/encode(data:out:)","title":"func encode(data: Self.OutboundIn, out: inout ByteBuffer) throws","type":"method"}],"path":"\/documentation\/niocore\/messagetobyteencoder","title":"MessageToByteEncoder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:)","title":"func joinGroup(SocketAddress) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:device:)","title":"func joinGroup(SocketAddress, device: NIONetworkDevice?) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:device:promise:)-3nenl","title":"func joinGroup(SocketAddress, device: NIONetworkDevice?, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"MulticastChannel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:device:promise:)-7eq7m","title":"func joinGroup(SocketAddress, device: NIONetworkDevice?, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:interface:)","title":"func joinGroup(SocketAddress, interface: NIONetworkInterface?) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:interface:promise:)","title":"func joinGroup(SocketAddress, interface: NIONetworkInterface?, promise: EventLoopPromise<Void>?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:promise:)-453qc","title":"func joinGroup(SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"MulticastChannel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/multicastchannel\/joingroup(_:promise:)-3tm6b","title":"func joinGroup(SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:)","title":"func leaveGroup(SocketAddress) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:device:)","title":"func leaveGroup(SocketAddress, device: NIONetworkDevice?) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:device:promise:)-7c9hg","title":"func leaveGroup(SocketAddress, device: NIONetworkDevice?, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"MulticastChannel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:device:promise:)-8llxp","title":"func leaveGroup(SocketAddress, device: NIONetworkDevice?, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:interface:)","title":"func leaveGroup(SocketAddress, interface: NIONetworkInterface?) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:interface:promise:)","title":"func leaveGroup(SocketAddress, interface: NIONetworkInterface?, promise: EventLoopPromise<Void>?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:promise:)-g1w2","title":"func leaveGroup(SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"}],"title":"MulticastChannel Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/multicastchannel\/leavegroup(_:promise:)-1sv44","title":"func leaveGroup(SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niocore\/multicastchannel","title":"MulticastChannel","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/channelinitializer(_:)","title":"func channelInitializer((Channel) -> EventLoopFuture<Void>) -> Self","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/channeloption(_:value:)","title":"func channelOption<Option>(Option, value: Option.Value) -> Self","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/connect(host:port:)","title":"func connect(host: String, port: Int) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/connect(to:)","title":"func connect(to: SocketAddress) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/connect(unixdomainsocketpath:)","title":"func connect(unixDomainSocketPath: String) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/connecttimeout(_:)","title":"func connectTimeout(TimeAmount) -> Self","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/protocolhandlers(_:)","title":"func protocolHandlers(() -> [ChannelHandler]) -> Self","type":"method"}],"path":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","title":"NIOClientTCPBootstrapProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioclienttlsprovider\/bootstrap","title":"Bootstrap","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioclienttlsprovider\/enabletls(_:)","title":"func enableTLS(Self.Bootstrap) -> Self.Bootstrap","type":"method"}],"path":"\/documentation\/niocore\/nioclienttlsprovider","title":"NIOClientTLSProvider","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder\/inboundout","title":"InboundOut","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder\/decode(buffer:)","title":"func decode(buffer: inout ByteBuffer) throws -> Self.InboundOut?","type":"method"},{"path":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder\/decodelast(buffer:seeneof:)","title":"func decodeLast(buffer: inout ByteBuffer, seenEOF: Bool) throws -> Self.InboundOut?","type":"method"}],"path":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","title":"NIOSingleStepByteToMessageDecoder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niosynchronouschanneloptions\/getoption(_:)","title":"func getOption<Option>(Option) throws -> Option.Value","type":"method"},{"path":"\/documentation\/niocore\/niosynchronouschanneloptions\/setoption(_:value:)","title":"func setOption<Option>(Option, value: Option.Value) throws","type":"method"}],"path":"\/documentation\/niocore\/niosynchronouschanneloptions","title":"NIOSynchronousChannelOptions","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/recvbytebufferallocator\/buffer(allocator:)","title":"func buffer(allocator: ByteBufferAllocator) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/recvbytebufferallocator\/record(actualreadbytes:)","title":"func record(actualReadBytes: Int) -> Bool","type":"method"}],"path":"\/documentation\/niocore\/recvbytebufferallocator","title":"RecvByteBufferAllocator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/niocore\/removablechannelhandler\/removehandler(context:removaltoken:)-1sb9p","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"title":"RemovableChannelHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/niocore\/removablechannelhandler\/removehandler(context:removaltoken:)-2jaoc","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niocore\/removablechannelhandler","title":"RemovableChannelHandler","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketoptionprovider\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketoptionprovider\/getipmulticastif()","title":"func getIPMulticastIF() -> EventLoopFuture<in_addr>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/getipmulticastloop()","title":"func getIPMulticastLoop() -> EventLoopFuture<CUnsignedChar>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/getipmulticastttl()","title":"func getIPMulticastTTL() -> EventLoopFuture<CUnsignedChar>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/getipv6multicasthops()","title":"func getIPv6MulticastHops() -> EventLoopFuture<CInt>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/getipv6multicastif()","title":"func getIPv6MulticastIF() -> EventLoopFuture<CUnsignedInt>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/getipv6multicastloop()","title":"func getIPv6MulticastLoop() -> EventLoopFuture<CUnsignedInt>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/getsolinger()","title":"func getSoLinger() -> EventLoopFuture<linger>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/gettcpinfo()","title":"func getTCPInfo() -> EventLoopFuture<tcp_info>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/setipmulticastif(_:)","title":"func setIPMulticastIF(in_addr) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/setipmulticastloop(_:)","title":"func setIPMulticastLoop(CUnsignedChar) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/setipmulticastttl(_:)","title":"func setIPMulticastTTL(CUnsignedChar) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/setipv6multicasthops(_:)","title":"func setIPv6MulticastHops(CInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/setipv6multicastif(_:)","title":"func setIPv6MulticastIF(CUnsignedInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/setipv6multicastloop(_:)","title":"func setIPv6MulticastLoop(CUnsignedInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/setsolinger(_:)","title":"func setSoLinger(linger) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/unsafegetsocketoption(level:name:)-5hoyn","title":"func unsafeGetSocketOption<Value>(level: NIOBSDSocket.OptionLevel, name: NIOBSDSocket.Option) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/unsafegetsocketoption(level:name:)-7vfst","title":"func unsafeGetSocketOption<Value>(level: SocketOptionLevel, name: SocketOptionName) -> EventLoopFuture<Value>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/unsafesetsocketoption(level:name:value:)-72342","title":"func unsafeSetSocketOption<Value>(level: NIOBSDSocket.OptionLevel, name: NIOBSDSocket.Option, value: Value) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/niocore\/socketoptionprovider\/unsafesetsocketoption(level:name:value:)-9rbq9","title":"func unsafeSetSocketOption<Value>(level: SocketOptionLevel, name: SocketOptionName, value: Value) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/niocore\/socketoptionprovider","title":"SocketOptionProvider","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/niocore\/writeobservingbytetomessagedecoder\/outboundin","title":"OutboundIn","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/writeobservingbytetomessagedecoder\/write(data:)","title":"func write(data: Self.OutboundIn)","type":"method"}],"path":"\/documentation\/niocore\/writeobservingbytetomessagedecoder","title":"WriteObservingByteToMessageDecoder","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator\/init()","title":"init()","type":"init"},{"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator\/init(minimum:initial:maximum:)","title":"init(minimum: Int, initial: Int, maximum: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator\/initial","title":"let initial: Int","type":"property"},{"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator\/maximum","title":"let maximum: Int","type":"property"},{"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator\/minimum","title":"let minimum: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator\/buffer(allocator:)","title":"func buffer(allocator: ByteBufferAllocator) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator\/record(actualreadbytes:)","title":"func record(actualReadBytes: Int) -> Bool","type":"method"}],"path":"\/documentation\/niocore\/adaptiverecvbytebufferallocator","title":"AdaptiveRecvByteBufferAllocator","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.struct\/init(ecnstate:)","title":"init(ecnState: NIOExplicitCongestionNotificationState)","type":"init"},{"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.struct\/init(ecnstate:packetinfo:)","title":"init(ecnState: NIOExplicitCongestionNotificationState, packetInfo: NIOPacketInfo?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.struct\/ecnstate","title":"var ecnState: NIOExplicitCongestionNotificationState","type":"property"},{"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.struct\/packetinfo","title":"var packetInfo: NIOPacketInfo?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.struct","title":"AddressedEnvelope.Metadata","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/addressedenvelope\/init(remoteaddress:data:)","title":"init(remoteAddress: SocketAddress, data: DataType)","type":"init"},{"path":"\/documentation\/niocore\/addressedenvelope\/init(remoteaddress:data:metadata:)","title":"init(remoteAddress: SocketAddress, data: DataType, metadata: AddressedEnvelope<DataType>.Metadata?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/addressedenvelope\/data","title":"var data: DataType","type":"property"},{"path":"\/documentation\/niocore\/addressedenvelope\/metadata-swift.property","title":"var metadata: AddressedEnvelope<DataType>.Metadata?","type":"property"},{"path":"\/documentation\/niocore\/addressedenvelope\/remoteaddress","title":"var remoteAddress: SocketAddress","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/addressedenvelope\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/addressedenvelope\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/addressedenvelope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/addressedenvelope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/addressedenvelope","title":"AddressedEnvelope","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/copybyteserror\/negativelength","title":"static let negativeLength: ByteBuffer.CopyBytesError","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/copybyteserror\/unreadablesourcebytes","title":"static let unreadableSourceBytes: ByteBuffer.CopyBytesError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/copybyteserror\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niocore\/bytebuffer\/copybyteserror\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/copybyteserror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/bytebuffer\/copybyteserror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/bytebuffer\/copybyteserror","title":"ByteBuffer.CopyBytesError","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/lengthprefixerror\/messagecouldnotbereadsuccessfully","title":"static let messageCouldNotBeReadSuccessfully: ByteBuffer.LengthPrefixError","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/lengthprefixerror\/messagelengthdoesnotfitexactlyintorequiredintegerformat","title":"static let messageLengthDoesNotFitExactlyIntoRequiredIntegerFormat: ByteBuffer.LengthPrefixError","type":"property"}],"path":"\/documentation\/niocore\/bytebuffer\/lengthprefixerror","title":"ByteBuffer.LengthPrefixError","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/init()","title":"init()","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(_:)","title":"init(ByteBufferView)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(buffer:)","title":"init(buffer: ByteBuffer)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(bytes:)","title":"init<Bytes>(bytes: Bytes)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(data:)","title":"init(data: Data)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(dispatchdata:)","title":"init(dispatchData: DispatchData)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(integer:endianness:as:)","title":"init<I>(integer: I, endianness: Endianness, as: I.Type)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(repeating:count:)","title":"init(repeating: UInt8, count: Int)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(staticstring:)","title":"init(staticString: StaticString)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(string:)","title":"init(string: String)","type":"init"},{"path":"\/documentation\/niocore\/bytebuffer\/init(substring:)","title":"init(substring: Substring)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/capacity","title":"var capacity: Int","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/readablebytes","title":"var readableBytes: Int","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/readablebytesview","title":"var readableBytesView: ByteBufferView","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/readerindex","title":"var readerIndex: Int","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/storagecapacity","title":"var storageCapacity: Int","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/writablebytes","title":"var writableBytes: Int","type":"property"},{"path":"\/documentation\/niocore\/bytebuffer\/writerindex","title":"var writerIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/clear(minimumcapacity:)-12w71","title":"func clear(minimumCapacity: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/clear(minimumcapacity:)-7qskn","title":"func clear(minimumCapacity: UInt32)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/copybytes(at:to:length:)","title":"func copyBytes(at: Int, to: Int, length: Int) throws -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/discardreadbytes()","title":"func discardReadBytes() -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getbytes(at:length:)","title":"func getBytes(at: Int, length: Int) -> [UInt8]?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getdata(at:length:)","title":"func getData(at: Int, length: Int) -> Data?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getdata(at:length:bytetransferstrategy:)","title":"func getData(at: Int, length: Int, byteTransferStrategy: ByteBuffer.ByteTransferStrategy) -> Data?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getdispatchdata(at:length:)","title":"func getDispatchData(at: Int, length: Int) -> DispatchData?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getinteger(at:endianness:as:)","title":"func getInteger<T>(at: Int, endianness: Endianness, as: T.Type) -> T?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getjsondecodable(_:decoder:at:length:)","title":"func getJSONDecodable<T>(T.Type, decoder: JSONDecoder, at: Int, length: Int) throws -> T?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getlengthprefixedslice(at:endianness:as:)","title":"func getLengthPrefixedSlice<Integer>(at: Int, endianness: Endianness, as: Integer.Type) -> ByteBuffer?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getnullterminatedstring(at:)","title":"func getNullTerminatedString(at: Int) -> String?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getslice(at:length:)","title":"func getSlice(at: Int, length: Int) -> ByteBuffer?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getstring(at:length:)","title":"func getString(at: Int, length: Int) -> String?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getstring(at:length:encoding:)","title":"func getString(at: Int, length: Int, encoding: String.Encoding) -> String?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/getwebsocketerrorcode(at:)","title":"func getWebSocketErrorCode(at: Int) -> WebSocketErrorCode?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/modifyifuniquelyowned(_:)","title":"func modifyIfUniquelyOwned<T>((inout ByteBuffer) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/movereaderindex(forwardby:)","title":"func moveReaderIndex(forwardBy: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/movereaderindex(to:)","title":"func moveReaderIndex(to: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/movewriterindex(forwardby:)","title":"func moveWriterIndex(forwardBy: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/movewriterindex(to:)","title":"func moveWriterIndex(to: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readbytes(length:)","title":"func readBytes(length: Int) -> [UInt8]?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readdata(length:)","title":"func readData(length: Int) -> Data?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readdata(length:bytetransferstrategy:)","title":"func readData(length: Int, byteTransferStrategy: ByteBuffer.ByteTransferStrategy) -> Data?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readdispatchdata(length:)","title":"func readDispatchData(length: Int) -> DispatchData?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readinteger(endianness:as:)","title":"func readInteger<T>(endianness: Endianness, as: T.Type) -> T?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readjsondecodable(_:decoder:length:)","title":"func readJSONDecodable<T>(T.Type, decoder: JSONDecoder, length: Int) throws -> T?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readlengthprefixed(endianness:as:readmessage:)","title":"func readLengthPrefixed<Integer, Result>(endianness: Endianness, as: Integer.Type, readMessage: (ByteBuffer) throws -> Result?) throws -> Result?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readlengthprefixedslice(endianness:as:)","title":"func readLengthPrefixedSlice<Integer>(endianness: Endianness, as: Integer.Type) -> ByteBuffer?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-1izy","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-1q0u","title":"func readMultipleIntegers<T1, T2>(endianness: Endianness, as: (T1, T2).Type) -> (T1, T2)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-204a2","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7).Type) -> (T1, T2, T3, T4, T5, T6, T7)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-22d2u","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-2cq1","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-3fqg1","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6).Type) -> (T1, T2, T3, T4, T5, T6)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-4tqpl","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-4y28m","title":"func readMultipleIntegers<T1, T2, T3>(endianness: Endianness, as: (T1, T2, T3).Type) -> (T1, T2, T3)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-5rym8","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-5wxbj","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-6y09a","title":"func readMultipleIntegers<T1, T2, T3, T4>(endianness: Endianness, as: (T1, T2, T3, T4).Type) -> (T1, T2, T3, T4)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-7byhv","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-7qifv","title":"func readMultipleIntegers<T1, T2, T3, T4, T5>(endianness: Endianness, as: (T1, T2, T3, T4, T5).Type) -> (T1, T2, T3, T4, T5)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readmultipleintegers(endianness:as:)-8e24t","title":"func readMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).Type) -> (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readnullterminatedstring()","title":"func readNullTerminatedString() -> String?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readslice(length:)","title":"func readSlice(length: Int) -> ByteBuffer?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readstring(length:)","title":"func readString(length: Int) -> String?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readstring(length:encoding:)","title":"func readString(length: Int, encoding: String.Encoding) -> String?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readwebsocketerrorcode()","title":"func readWebSocketErrorCode() -> WebSocketErrorCode?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readwithunsafemutablereadablebytes(_:)-1s0m3","title":"func readWithUnsafeMutableReadableBytes((UnsafeMutableRawBufferPointer) throws -> Int) rethrows -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readwithunsafemutablereadablebytes(_:)-8y5uo","title":"func readWithUnsafeMutableReadableBytes<T>((UnsafeMutableRawBufferPointer) throws -> (Int, T)) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readwithunsafereadablebytes(_:)-6t4by","title":"func readWithUnsafeReadableBytes((UnsafeRawBufferPointer) throws -> Int) rethrows -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/readwithunsafereadablebytes(_:)-tdwc","title":"func readWithUnsafeReadableBytes<T>((UnsafeRawBufferPointer) throws -> (Int, T)) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/reservecapacity(minimumwritablebytes:)","title":"func reserveCapacity(minimumWritableBytes: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/set(buffer:at:)","title":"func set(buffer: ByteBuffer, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setbuffer(_:at:)","title":"func setBuffer(ByteBuffer, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setbytes(_:at:)-2hw8t","title":"func setBytes(UnsafeRawBufferPointer, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setbytes(_:at:)-5jzet","title":"func setBytes<Bytes>(Bytes, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setcontiguousbytes(_:at:)","title":"func setContiguousBytes<Bytes>(Bytes, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setdata(_:at:)","title":"func setData<D>(D, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setdispatchdata(_:at:)","title":"func setDispatchData(DispatchData, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setinteger(_:at:endianness:as:)","title":"func setInteger<T>(T, at: Int, endianness: Endianness, as: T.Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setjsonencodable(_:encoder:at:)","title":"func setJSONEncodable<T>(T, encoder: JSONEncoder, at: Int) throws -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setnullterminatedstring(_:at:)","title":"func setNullTerminatedString(String, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setrepeatingbyte(_:count:at:)","title":"func setRepeatingByte(UInt8, count: Int, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setstaticstring(_:at:)","title":"func setStaticString(StaticString, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setstring(_:at:)","title":"func setString(String, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setstring(_:encoding:at:)","title":"func setString(String, encoding: String.Encoding, at: Int) throws -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/setsubstring(_:at:)","title":"func setSubstring(Substring, at: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/slice()","title":"func slice() -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/viewbytes(at:length:)","title":"func viewBytes(at: Int, length: Int) -> ByteBufferView?","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/websocketmask(_:indexoffset:)","title":"func webSocketMask(WebSocketMaskingKey, indexOffset: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/websocketunmask(_:indexoffset:)","title":"func webSocketUnmask(WebSocketMaskingKey, indexOffset: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/withunsafemutablereadablebytes(_:)","title":"func withUnsafeMutableReadableBytes<T>((UnsafeMutableRawBufferPointer) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/withunsafemutablewritablebytes(_:)","title":"func withUnsafeMutableWritableBytes<T>((UnsafeMutableRawBufferPointer) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/withunsafereadablebytes(_:)","title":"func withUnsafeReadableBytes<T>((UnsafeRawBufferPointer) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/withunsafereadablebyteswithstoragemanagement(_:)","title":"func withUnsafeReadableBytesWithStorageManagement<T>((UnsafeRawBufferPointer, Unmanaged<AnyObject>) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/withveryunsafebytes(_:)","title":"func withVeryUnsafeBytes<T>((UnsafeRawBufferPointer) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/withveryunsafebyteswithstoragemanagement(_:)","title":"func withVeryUnsafeBytesWithStorageManagement<T>((UnsafeRawBufferPointer, Unmanaged<AnyObject>) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/withveryunsafemutablebytes(_:)","title":"func withVeryUnsafeMutableBytes<T>((UnsafeMutableRawBufferPointer) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/write(http2errorcode:)","title":"func write(http2ErrorCode: HTTP2ErrorCode) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/write(websocketerrorcode:)","title":"func write(webSocketErrorCode: WebSocketErrorCode)","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writebuffer(_:)","title":"func writeBuffer(inout ByteBuffer) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writebytes(_:)-7pul2","title":"func writeBytes(UnsafeRawBufferPointer) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writebytes(_:)-f5w","title":"func writeBytes<Bytes>(Bytes) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writecontiguousbytes(_:)","title":"func writeContiguousBytes<Bytes>(Bytes) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writedata(_:)","title":"func writeData<D>(D) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writedispatchdata(_:)","title":"func writeDispatchData(DispatchData) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writeimmutablebuffer(_:)","title":"func writeImmutableBuffer(ByteBuffer) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writeinteger(_:endianness:as:)","title":"func writeInteger<T>(T, endianness: Endianness, as: T.Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writejsonencodable(_:encoder:)","title":"func writeJSONEncodable<T>(T, encoder: JSONEncoder) throws -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writelengthprefixed(endianness:as:writemessage:)","title":"func writeLengthPrefixed<Integer>(endianness: Endianness, as: Integer.Type, writeMessage: (inout ByteBuffer) throws -> Int) throws -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1, T2, T3, T4, T5, T6, T7, T8, T9, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8, T9).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7, T8>(T1, T2, T3, T4, T5, T6, T7, T8, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7, T8).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6, T7>(T1, T2, T3, T4, T5, T6, T7, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6, T7).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6, endianness: Endianness, as: (T1, T2, T3, T4, T5, T6).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5, endianness: Endianness, as: (T1, T2, T3, T4, T5).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3, T4>(T1, T2, T3, T4, endianness: Endianness, as: (T1, T2, T3, T4).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2, T3>(T1, T2, T3, endianness: Endianness, as: (T1, T2, T3).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writemultipleintegers(_:_:endianness:as:)","title":"func writeMultipleIntegers<T1, T2>(T1, T2, endianness: Endianness, as: (T1, T2).Type) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writenullterminatedstring(_:)","title":"func writeNullTerminatedString(String) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writerepeatingbyte(_:count:)","title":"func writeRepeatingByte(UInt8, count: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writestaticstring(_:)","title":"func writeStaticString(StaticString) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writestring(_:)","title":"func writeString(String) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writestring(_:encoding:)","title":"func writeString(String, encoding: String.Encoding) throws -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writesubstring(_:)","title":"func writeSubstring(Substring) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writewithunsafemutablebytes(_:)","title":"func writeWithUnsafeMutableBytes((UnsafeMutableRawBufferPointer) throws -> Int) rethrows -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebuffer\/writewithunsafemutablebytes(minimumwritablebytes:_:)","title":"func writeWithUnsafeMutableBytes(minimumWritableBytes: Int, (UnsafeMutableRawBufferPointer) throws -> Int) rethrows -> Int","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/bytetransferstrategy\/automatic","title":"case automatic","type":"case"},{"path":"\/documentation\/niocore\/bytebuffer\/bytetransferstrategy\/copy","title":"case copy","type":"case"},{"path":"\/documentation\/niocore\/bytebuffer\/bytetransferstrategy\/nocopy","title":"case noCopy","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/bytetransferstrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/bytebuffer\/bytetransferstrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/bytebuffer\/bytetransferstrategy","title":"ByteBuffer.ByteTransferStrategy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/bytebuffer\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/bytebuffer\/==(_:_:)","title":"static func == (ByteBuffer, ByteBuffer) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/bytebuffer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebuffer\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/bytebuffer\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferallocator\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(buffer:)","title":"func buffer(buffer: ByteBuffer) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(bytes:)","title":"func buffer<Bytes>(bytes: Bytes) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(capacity:)","title":"func buffer(capacity: Int) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(data:)","title":"func buffer(data: Data) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(dispatchdata:)","title":"func buffer(dispatchData: DispatchData) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(integer:endianness:as:)","title":"func buffer<I>(integer: I, endianness: Endianness, as: I.Type) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(repeating:count:)","title":"func buffer(repeating: UInt8, count: Int) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(staticstring:)","title":"func buffer(staticString: StaticString) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(string:)","title":"func buffer(string: String) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/bytebufferallocator\/buffer(substring:)","title":"func buffer(substring: Substring) -> ByteBuffer","type":"method"}],"path":"\/documentation\/niocore\/bytebufferallocator","title":"ByteBufferAllocator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/init(_:)-91cjq","title":"init(ByteBuffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/count-2xlsc","title":"var count: Int","type":"property"},{"path":"\/documentation\/niocore\/bytebufferview\/endindex","title":"var endIndex: ByteBufferView.Index","type":"property"},{"path":"\/documentation\/niocore\/bytebufferview\/startindex","title":"var startIndex: ByteBufferView.Index","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/index(after:)","title":"func index(after: ByteBufferView.Index) -> ByteBufferView.Index","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/withcontiguousstorageifavailable(_:)-5wyk9","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<UInt8>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/withunsafebytes(_:)","title":"func withUnsafeBytes<R>((UnsafeRawBufferPointer) throws -> R) rethrows -> R","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/subscript(_:)-2vo6k","title":"subscript(ByteBufferView.Index) -> UInt8","type":"subscript"},{"path":"\/documentation\/niocore\/bytebufferview\/subscript(_:)-6ignb","title":"subscript(Range<ByteBufferView.Index>) -> ByteBufferView","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/element","title":"ByteBufferView.Element","type":"typealias"},{"path":"\/documentation\/niocore\/bytebufferview\/index","title":"ByteBufferView.Index","type":"typealias"},{"path":"\/documentation\/niocore\/bytebufferview\/subsequence","title":"ByteBufferView.SubSequence","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/poplast()-7pcld","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removelast()-8ps70","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removelast(_:)-8aogs","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/niocore\/bytebufferview\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/count-96adg","title":"var count: Int","type":"property"},{"path":"\/documentation\/niocore\/bytebufferview\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/niocore\/bytebufferview\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niocore\/bytebufferview\/underestimatedcount-6kyff","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/map(_:)-1au8n","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/popfirst()","title":"func popFirst() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removefirst()-6nnu","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removefirst(_:)-5gshk","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/subscript(_:)-13xm2","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/bytebufferview\/subscript(_:)-9ksx0","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/niocore\/bytebufferview\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/regions-swift.property","title":"var regions: CollectionOfOne<ByteBufferView>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/copybytes(to:)","title":"func copyBytes(to: UnsafeMutableRawBufferPointer) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/copybytes(to:count:)","title":"func copyBytes(to: UnsafeMutableRawBufferPointer, count: Int) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/copybytes(to:from:)-3w1ha","title":"func copyBytes<DestinationType, R>(to: UnsafeMutableBufferPointer<DestinationType>, from: R) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/copybytes(to:from:)-4ss2b","title":"func copyBytes<DestinationType, R>(to: UnsafeMutableBufferPointer<DestinationType>, from: R)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/copybytes(to:from:)-6km2","title":"func copyBytes<R>(to: UnsafeMutableRawBufferPointer, from: R) -> Int","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/firstrange(of:)","title":"func firstRange<D>(of: D) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/firstrange(of:in:)","title":"func firstRange<D, R>(of: D, in: R) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/lastrange(of:)","title":"func lastRange<D>(of: D) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/lastrange(of:in:)","title":"func lastRange<D, R>(of: D, in: R) -> Range<Self.Index>?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/regions-swift.typealias","title":"ByteBufferView.Regions","type":"typealias"}],"path":"\/documentation\/niocore\/bytebufferview\/dataprotocol-implementations","title":"DataProtocol Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/bytebufferview\/==(_:_:)","title":"static func == (ByteBufferView, ByteBufferView) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/bytebufferview\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/init(arrayliteral:)","title":"init(arrayLiteral: ByteBufferView.Element...)","type":"init"}],"path":"\/documentation\/niocore\/bytebufferview\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/bytebufferview\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/partition(by:)-2921a","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/partition(by:)-6hqcl","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/subscript(_:)-3sghi","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/niocore\/bytebufferview\/subscript(_:)-4gaur","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/bytebufferview\/subscript(_:)-5hbv0","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/niocore\/bytebufferview\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/resetbytes(in:)","title":"func resetBytes<R>(in: R)","type":"method"}],"path":"\/documentation\/niocore\/bytebufferview\/mutabledataprotocol-implementations","title":"MutableDataProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/niocore\/bytebufferview\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/+(_:_:)-3ib4f","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/niocore\/bytebufferview\/+(_:_:)-6ny2j","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/niocore\/bytebufferview\/+(_:_:)-70dl4","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/niocore\/bytebufferview\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/init()","title":"init()","type":"init"},{"path":"\/documentation\/niocore\/bytebufferview\/init(_:)-4hy6g","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/niocore\/bytebufferview\/init(repeating:count:)","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/append(_:)","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/poplast()-1rguw","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/poplast()-2x6f3","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/remove(at:)","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removeall(where:)-3y4ak","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removeall(where:)-90rz5","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removefirst()-1s74i","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removefirst()-4pmzn","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removefirst(_:)-2tcf1","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removefirst(_:)-3ftm3","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removelast()-68ao5","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removelast()-91jgn","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removelast(_:)-4w6u0","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removelast(_:)-9pskb","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removesubrange(_:)-1xzir","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/removesubrange(_:)-7ygyy","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/replacesubrange(_:with:)-787hg","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/replacesubrange(_:with:)-9z5mk","title":"func replaceSubrange<C>(Range<ByteBufferView.Index>, with: C)","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"}],"path":"\/documentation\/niocore\/bytebufferview\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niocore\/bytebufferview\/underestimatedcount-9jhc1","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytebufferview\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/flatmap(_:)-4qn0i","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/flatmap(_:)-5z6ld","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/map(_:)-8z8u4","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/bytebufferview\/withcontiguousstorageifavailable(_:)-l3vf","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/niocore\/bytebufferview\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/bytebufferview","title":"ByteBufferView","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/storage\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/storage\/append(key:value:)","title":"func append<Option>(key: Option, value: Option.Value)","type":"method"},{"path":"\/documentation\/niocore\/channeloptions\/storage\/applyallchanneloptions(to:)","title":"func applyAllChannelOptions(to: Channel) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/niocore\/channeloptions\/storage","title":"ChannelOptions.Storage","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoption\/allowlocalendpointreuse","title":"static let allowLocalEndpointReuse: ChannelOptions.TCPConvenienceOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoption\/allowremotehalfclosure","title":"static let allowRemoteHalfClosure: ChannelOptions.TCPConvenienceOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoption\/disableautoread","title":"static let disableAutoRead: ChannelOptions.TCPConvenienceOption","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoption","title":"ChannelOptions.TCPConvenienceOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoptions\/init(arrayliteral:)","title":"init(arrayLiteral: ChannelOptions.TCPConvenienceOption...)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoptions\/consumeallowlocalendpointreuse()","title":"func consumeAllowLocalEndpointReuse() -> ChannelOptions.Types.ConvenienceOptionValue<Void>","type":"method"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoptions\/consumeallowremotehalfclosure()","title":"func consumeAllowRemoteHalfClosure() -> ChannelOptions.Types.ConvenienceOptionValue<Void>","type":"method"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoptions\/consumedisableautoread()","title":"func consumeDisableAutoRead() -> ChannelOptions.Types.ConvenienceOptionValue<Void>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/tcpconvenienceoptions","title":"ChannelOptions.TCPConvenienceOptions","type":"struct"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/allocator","title":"static let allocator: ChannelOptions.Types.AllocatorOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/allowremotehalfclosure","title":"static let allowRemoteHalfClosure: ChannelOptions.Types.AllowRemoteHalfClosureOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/autoread","title":"static let autoRead: ChannelOptions.Types.AutoReadOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/backlog","title":"static let backlog: ChannelOptions.Types.BacklogOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/connecttimeout","title":"static let connectTimeout: ChannelOptions.Types.ConnectTimeoutOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/datagramvectorreadmessagecount","title":"static let datagramVectorReadMessageCount: ChannelOptions.Types.DatagramVectorReadMessageCountOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/explicitcongestionnotification","title":"static let explicitCongestionNotification: ChannelOptions.Types.ExplicitCongestionNotificationsOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/maxmessagesperread","title":"static let maxMessagesPerRead: ChannelOptions.Types.MaxMessagesPerReadOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/receivepacketinfo","title":"static let receivePacketInfo: ChannelOptions.Types.ReceivePacketInfo","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/recvallocator","title":"static let recvAllocator: ChannelOptions.Types.RecvAllocatorOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/socket","title":"static let socket: (SocketOptionLevel, SocketOptionName) -> ChannelOptions.Types.SocketOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/socketoption","title":"static let socketOption: (NIOBSDSocket.Option) -> ChannelOptions.Types.SocketOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/tcpoption","title":"static let tcpOption: (NIOBSDSocket.Option) -> ChannelOptions.Types.SocketOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/writebufferwatermark","title":"static let writeBufferWaterMark: ChannelOptions.Types.WriteBufferWaterMarkOption","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/writespin","title":"static let writeSpin: ChannelOptions.Types.WriteSpinOption","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/allocatoroption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/allocatoroption\/value","title":"ChannelOptions.Types.AllocatorOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/allocatoroption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/allocatoroption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/allocatoroption","title":"ChannelOptions.Types.AllocatorOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/allowremotehalfclosureoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/allowremotehalfclosureoption\/value","title":"ChannelOptions.Types.AllowRemoteHalfClosureOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/allowremotehalfclosureoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/allowremotehalfclosureoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/allowremotehalfclosureoption","title":"ChannelOptions.Types.AllowRemoteHalfClosureOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/autoreadoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/autoreadoption\/value","title":"ChannelOptions.Types.AutoReadOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/autoreadoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/autoreadoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/autoreadoption","title":"ChannelOptions.Types.AutoReadOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/backlogoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/backlogoption\/value","title":"ChannelOptions.Types.BacklogOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/backlogoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/backlogoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/backlogoption","title":"ChannelOptions.Types.BacklogOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/connecttimeoutoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/connecttimeoutoption\/value","title":"ChannelOptions.Types.ConnectTimeoutOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/connecttimeoutoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/connecttimeoutoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/connecttimeoutoption","title":"ChannelOptions.Types.ConnectTimeoutOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/datagramvectorreadmessagecountoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/datagramvectorreadmessagecountoption\/value","title":"ChannelOptions.Types.DatagramVectorReadMessageCountOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/datagramvectorreadmessagecountoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/datagramvectorreadmessagecountoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/datagramvectorreadmessagecountoption","title":"ChannelOptions.Types.DatagramVectorReadMessageCountOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/explicitcongestionnotificationsoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/explicitcongestionnotificationsoption\/value","title":"ChannelOptions.Types.ExplicitCongestionNotificationsOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/explicitcongestionnotificationsoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/explicitcongestionnotificationsoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/explicitcongestionnotificationsoption","title":"ChannelOptions.Types.ExplicitCongestionNotificationsOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/maxmessagesperreadoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/maxmessagesperreadoption\/value","title":"ChannelOptions.Types.MaxMessagesPerReadOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/maxmessagesperreadoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/maxmessagesperreadoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/maxmessagesperreadoption","title":"ChannelOptions.Types.MaxMessagesPerReadOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/receivepacketinfo\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/receivepacketinfo\/value","title":"ChannelOptions.Types.ReceivePacketInfo.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/receivepacketinfo\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/receivepacketinfo\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/receivepacketinfo","title":"ChannelOptions.Types.ReceivePacketInfo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/recvallocatoroption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/recvallocatoroption\/value","title":"ChannelOptions.Types.RecvAllocatorOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/recvallocatoroption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/recvallocatoroption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/recvallocatoroption","title":"ChannelOptions.Types.RecvAllocatorOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/init(level:name:)-1te78","title":"init(level: SocketOptionLevel, name: SocketOptionName)","type":"init"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/init(level:name:)-8vqxi","title":"init(level: NIOBSDSocket.OptionLevel, name: NIOBSDSocket.Option)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/level","title":"var level: SocketOptionLevel","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/name","title":"var name: SocketOptionName","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/optionlevel","title":"var optionLevel: NIOBSDSocket.OptionLevel","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/optionname","title":"var optionName: NIOBSDSocket.Option","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/value","title":"ChannelOptions.Types.SocketOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/socketoption","title":"ChannelOptions.Types.SocketOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermark\/init(low:high:)","title":"init(low: Int, high: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermark\/high","title":"let high: Int","type":"property"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermark\/low","title":"let low: Int","type":"property"}],"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermark","title":"ChannelOptions.Types.WriteBufferWaterMark","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermarkoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermarkoption\/value","title":"ChannelOptions.Types.WriteBufferWaterMarkOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermarkoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermarkoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/writebufferwatermarkoption","title":"ChannelOptions.Types.WriteBufferWaterMarkOption","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writespinoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writespinoption\/value","title":"ChannelOptions.Types.WriteSpinOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/writespinoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channeloptions\/types\/writespinoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channeloptions\/types\/writespinoption","title":"ChannelOptions.Types.WriteSpinOption","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/convenienceoptionvalue\/notset","title":"case notSet","type":"case"},{"path":"\/documentation\/niocore\/channeloptions\/types\/convenienceoptionvalue\/set(_:)","title":"case set(ValueType)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/channeloptions\/types\/convenienceoptionvalue\/isset","title":"var isSet: Bool","type":"property"}],"path":"\/documentation\/niocore\/channeloptions\/types\/convenienceoptionvalue","title":"ChannelOptions.Types.ConvenienceOptionValue","type":"enum"}],"path":"\/documentation\/niocore\/channeloptions\/types","title":"ChannelOptions.Types","type":"enum"}],"path":"\/documentation\/niocore\/channeloptions","title":"ChannelOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelshouldquiesceevent\/init()","title":"init()","type":"init"}],"path":"\/documentation\/niocore\/channelshouldquiesceevent","title":"ChannelShouldQuiesceEvent","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/==(_:_:)","title":"static func == (CircularBuffer<Element>.Index, CircularBuffer<Element>.Index) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/_(_:_:)-2nulk","title":"static func < (CircularBuffer<Element>.Index, CircularBuffer<Element>.Index) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'...(_:)-3nci6","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'...(_:)-5ibau","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niocore\/circularbuffer\/index\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'...(_:)-3nci6","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'...(_:)-5ibau","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niocore\/circularbuffer\/index\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/_(_:_:)-1f64u","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/_=(_:_:)-4fidq","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/_=(_:_:)-7r139","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/circularbuffer\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/circularbuffer\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/circularbuffer\/index","title":"CircularBuffer.Index","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)","title":"init(initialCapacity: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/capacity","title":"var capacity: Int","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/first-9k8tu","title":"var first: Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/modify(_:_:)","title":"func modify<Result>(CircularBuffer<Element>.Index, (inout Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/popfirst()-6bl9t","title":"func popFirst() -> Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/poplast()-3y32h","title":"func popLast() -> Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/prepend(_:)","title":"func prepend(Element)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast()-62nbb","title":"func removeLast() -> Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast(_:)-1pry7","title":"func removeLast(Int)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(offset:)","title":"subscript(offset _: Int) -> Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/rangetype","title":"CircularBuffer.RangeType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/index(before:)","title":"func index(before: CircularBuffer<Element>.Index) -> CircularBuffer<Element>.Index","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/joined(separator:)-9j9xf","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/poplast()-ewtu","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast()-36zrn","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast(_:)-5jslo","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/niocore\/circularbuffer\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/count-3g7z0","title":"var count: Int","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/count-7w826","title":"var count: Int","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/endindex","title":"var endIndex: CircularBuffer<Element>.Index","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/first-2x3ak","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/indices-swift.property","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/isempty-5jtlg","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/isempty-6l9h4","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/startindex","title":"var startIndex: CircularBuffer<Element>.Index","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/underestimatedcount-2qmbx","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/distance(from:to:)","title":"func distance(from: CircularBuffer<Element>.Index, to: CircularBuffer<Element>.Index) -> Int","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/index(_:offsetby:)","title":"func index(CircularBuffer<Element>.Index, offsetBy: Int) -> CircularBuffer<Element>.Index","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/index(after:)","title":"func index(after: CircularBuffer<Element>.Index) -> CircularBuffer<Element>.Index","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/map(_:)-7g3f6","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/popfirst()-20n9","title":"func popFirst() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst()-73mfi","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst(_:)-2kby9","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/split(separator:maxsplits:omittingemptysubsequences:)-3xfi","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(_:)-38ziw","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(_:)-5tn48","title":"subscript(Range<CircularBuffer<Element>.Index>) -> CircularBuffer<Element>.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(_:)-6n46h","title":"subscript(CircularBuffer<Element>.Index) -> Element","type":"subscript"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(_:)-6oqnv","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/indices-swift.typealias","title":"CircularBuffer.Indices","type":"typealias"},{"path":"\/documentation\/niocore\/circularbuffer\/subsequence","title":"CircularBuffer.SubSequence","type":"typealias"}],"path":"\/documentation\/niocore\/circularbuffer\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/circularbuffer\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/==(_:_:)","title":"static func == (CircularBuffer<Element>, CircularBuffer<Element>) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/circularbuffer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/niocore\/circularbuffer\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/circularbuffer\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/partition(by:)-61jvr","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/partition(by:)-sedc","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(_:)-2x0c8","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(_:)-8zb2u","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/circularbuffer\/subscript(_:)-91yal","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/niocore\/circularbuffer\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/niocore\/circularbuffer\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/+(_:_:)-3lboc","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/+(_:_:)-9n5ry","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/+(_:_:)-9qrxq","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/niocore\/circularbuffer\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/init()","title":"init()","type":"init"},{"path":"\/documentation\/niocore\/circularbuffer\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/niocore\/circularbuffer\/init(repeating:count:)","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/append(_:)-3fqm0","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/append(_:)-9zj6s","title":"func append(Element)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/poplast()-7g6je","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/poplast()-8qdgj","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/remove(at:)-20msu","title":"func remove(at: CircularBuffer<Element>.Index) -> Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/remove(at:)-36yqb","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removeall(keepingcapacity:)-3kxvf","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removeall(keepingcapacity:)-3sv6h","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removeall(where:)-1hdr7","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removeall(where:)-4852","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst()-38zcl","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst()-4cz3","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst()-dg48","title":"func removeFirst() -> Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst(_:)-2ibs0","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst(_:)-6oiah","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removefirst(_:)-9g2zt","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast()-2w5jp","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast()-3sw0u","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast(_:)-3881y","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removelast(_:)-9mx5q","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removesubrange(_:)-1myw2","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removesubrange(_:)-47bq0","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/removesubrange(_:)-9m3gy","title":"func removeSubrange(Range<CircularBuffer<Element>.Index>)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/replacesubrange(_:with:)-296at","title":"func replaceSubrange<C>(Range<CircularBuffer<Element>.Index>, with: C)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/replacesubrange(_:with:)-990fo","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/reservecapacity(_:)-5exiy","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/reservecapacity(_:)-9baxb","title":"func reserveCapacity(Int)","type":"method"}],"path":"\/documentation\/niocore\/circularbuffer\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niocore\/circularbuffer\/underestimatedcount-7tmvv","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/flatmap(_:)-50hcw","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/flatmap(_:)-5ayw1","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/joined(separator:)-2bml3","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/joined(separator:)-3bbqo","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/map(_:)-3ktfl","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/split(separator:maxsplits:omittingemptysubsequences:)-2f9w0","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/circularbuffer\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/circularbuffer\/element","title":"CircularBuffer.Element","type":"typealias"}],"path":"\/documentation\/niocore\/circularbuffer\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/circularbuffer","title":"CircularBuffer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopiterator\/init(_:)","title":"init([EventLoop])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopiterator\/next()","title":"func next() -> EventLoop?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopiterator\/element","title":"EventLoopIterator.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopiterator\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niocore\/eventloopiterator\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventloopiterator\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/flatmap(_:)-2t6ud","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/flatmap(_:)-7uxy4","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/eventloopiterator\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/niocore\/eventloopiterator\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/eventloopiterator","title":"EventLoopIterator","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventlooppromise\/futureresult","title":"let futureResult: EventLoopFuture<Value>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventlooppromise\/completewith(_:)-5vl8x","title":"func completeWith(Result<Value, Error>)","type":"method"},{"path":"\/documentation\/niocore\/eventlooppromise\/completewith(_:)-8ocjd","title":"func completeWith(EventLoopFuture<Value>)","type":"method"},{"path":"\/documentation\/niocore\/eventlooppromise\/completewithtask(_:)","title":"func completeWithTask(() async throws -> Value) -> Task<Void, Never>","type":"method"},{"path":"\/documentation\/niocore\/eventlooppromise\/fail(_:)","title":"func fail(Error)","type":"method"},{"path":"\/documentation\/niocore\/eventlooppromise\/succeed(_:)","title":"func succeed(Value)","type":"method"}],"path":"\/documentation\/niocore\/eventlooppromise","title":"EventLoopPromise","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/fileregion\/init(filehandle:)","title":"init(fileHandle: NIOFileHandle) throws","type":"init"},{"path":"\/documentation\/niocore\/fileregion\/init(filehandle:readerindex:endindex:)","title":"init(fileHandle: NIOFileHandle, readerIndex: Int, endIndex: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/fileregion\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/niocore\/fileregion\/filehandle","title":"let fileHandle: NIOFileHandle","type":"property"},{"path":"\/documentation\/niocore\/fileregion\/readablebytes","title":"var readableBytes: Int","type":"property"},{"path":"\/documentation\/niocore\/fileregion\/readerindex","title":"var readerIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/fileregion\/movereaderindex(forwardby:)","title":"func moveReaderIndex(forwardBy: Int)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/fileregion\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/fileregion\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/fileregion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/fileregion\/==(_:_:)","title":"static func == (FileRegion, FileRegion) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/fileregion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/fileregion","title":"FileRegion","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator\/init(capacity:)","title":"init(capacity: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator\/capacity","title":"let capacity: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator\/buffer(allocator:)","title":"func buffer(allocator: ByteBufferAllocator) -> ByteBuffer","type":"method"},{"path":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator\/record(actualreadbytes:)","title":"func record(actualReadBytes: Int) -> Bool","type":"method"}],"path":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator","title":"FixedSizeRecvByteBufferAllocator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/ioerror\/init(errnocode:function:)","title":"init(errnoCode: CInt, function: StaticString)","type":"init"},{"path":"\/documentation\/niocore\/ioerror\/init(errnocode:reason:)","title":"init(errnoCode: CInt, reason: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/ioerror\/errnocode","title":"var errnoCode: CInt","type":"property"},{"path":"\/documentation\/niocore\/ioerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"path":"\/documentation\/niocore\/ioerror\/reason","title":"var reason: IOError.FailureDescription","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/ioerror\/failuredescription\/function(_:)","title":"case function(StaticString)","type":"case"},{"path":"\/documentation\/niocore\/ioerror\/failuredescription\/reason(_:)","title":"case reason(String)","type":"case"}],"path":"\/documentation\/niocore\/ioerror\/failuredescription","title":"IOError.FailureDescription","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/ioerror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/ioerror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/ioerror","title":"IOError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/init(initialcapacity:)","title":"init(initialCapacity: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/count-2wvea","title":"var count: Int","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/first-2iyw1","title":"var first: Element?","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/hasmark","title":"var hasMark: Bool","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/isempty-7ixa5","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/markedelement","title":"var markedElement: Element?","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/markedelementindex","title":"var markedElementIndex: MarkedCircularBuffer<Element>.Index?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/append(_:)","title":"func append(Element)","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/ismarked(index:)","title":"func isMarked(index: MarkedCircularBuffer<Element>.Index) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/mark()","title":"func mark()","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/popfirst()","title":"func popFirst() -> Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/removefirst()","title":"func removeFirst() -> Element","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/rangetype","title":"MarkedCircularBuffer.RangeType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/index(before:)","title":"func index(before: MarkedCircularBuffer<Element>.Index) -> MarkedCircularBuffer<Element>.Index","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/joined(separator:)-6ryxy","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/niocore\/markedcircularbuffer\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/count-87kb9","title":"var count: Int","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/endindex","title":"var endIndex: MarkedCircularBuffer<Element>.Index","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/first-5403k","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/isempty-7dpnt","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/startindex","title":"var startIndex: MarkedCircularBuffer<Element>.Index","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/underestimatedcount-2jex","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/distance(from:to:)","title":"func distance(from: MarkedCircularBuffer<Element>.Index, to: MarkedCircularBuffer<Element>.Index) -> Int","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/index(_:offsetby:)","title":"func index(MarkedCircularBuffer<Element>.Index, offsetBy: Int) -> MarkedCircularBuffer<Element>.Index","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/index(after:)","title":"func index(after: MarkedCircularBuffer<Element>.Index) -> MarkedCircularBuffer<Element>.Index","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/map(_:)-4vx2d","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/split(separator:maxsplits:omittingemptysubsequences:)-1nlzf","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subscript(_:)-4eymd","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subscript(_:)-6ieph","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/index","title":"MarkedCircularBuffer.Index","type":"typealias"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subsequence","title":"MarkedCircularBuffer.SubSequence","type":"typealias"}],"path":"\/documentation\/niocore\/markedcircularbuffer\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/partition(by:)-8ji34","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/partition(by:)-9k07q","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subscript(_:)-24m37","title":"subscript(MarkedCircularBuffer<Element>.Index) -> Element","type":"subscript"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subscript(_:)-8pxfr","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subscript(_:)-9dnoa","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subscript(_:)-g9ec","title":"subscript(Range<MarkedCircularBuffer<Element>.Index>) -> MarkedCircularBuffer<Element>.SubSequence","type":"subscript"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/subscript(_:)-um2r","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/niocore\/markedcircularbuffer\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/niocore\/markedcircularbuffer\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/underestimatedcount-2wr3w","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/flatmap(_:)-4adez","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/flatmap(_:)-6au6z","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/joined(separator:)-1866s","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/joined(separator:)-2a9lm","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/map(_:)-35umf","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/split(separator:maxsplits:omittingemptysubsequences:)-4xvj9","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niocore\/markedcircularbuffer\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/niocore\/markedcircularbuffer\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/markedcircularbuffer","title":"MarkedCircularBuffer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioany\/init(_:)","title":"init<T>(T)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioany\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/nioany\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/nioany","title":"NIOAny","type":"struct"},{"path":"\/documentation\/niocore\/nioattemptedtoremovehandlermultipletimeserror","title":"NIOAttemptedToRemoveHandlerMultipleTimesError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/init(_:tls:)","title":"init<Bootstrap, TLS>(Bootstrap, tls: TLS)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/underlyingbootstrap","title":"let underlyingBootstrap: NIOClientTCPBootstrapProtocol","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelconvenienceoptions(_:)","title":"func channelConvenienceOptions(ChannelOptions.TCPConvenienceOptions) -> NIOClientTCPBootstrap","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelinitializer(_:)","title":"func channelInitializer((Channel) -> EventLoopFuture<Void>) -> NIOClientTCPBootstrap","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/channeloption(_:value:)","title":"func channelOption<Option>(Option, value: Option.Value) -> NIOClientTCPBootstrap","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(host:port:)","title":"func connect(host: String, port: Int) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(to:)","title":"func connect(to: SocketAddress) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(unixdomainsocketpath:)","title":"func connect(unixDomainSocketPath: String) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/connecttimeout(_:)","title":"func connectTimeout(TimeAmount) -> NIOClientTCPBootstrap","type":"method"},{"path":"\/documentation\/niocore\/nioclienttcpbootstrap\/enabletls()","title":"func enableTLS() -> NIOClientTCPBootstrap","type":"method"}],"path":"\/documentation\/niocore\/nioclienttcpbootstrap","title":"NIOClientTCPBootstrap","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/+(_:_:)","title":"static func + (NIODeadline, TimeAmount) -> NIODeadline","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/-(_:_:)-11iu0","title":"static func - (NIODeadline, NIODeadline) -> TimeAmount","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/-(_:_:)-16p77","title":"static func - (NIODeadline, TimeAmount) -> NIODeadline","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/uptimenanoseconds","title":"var uptimeNanoseconds: UInt64","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/value","title":"NIODeadline.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/distantfuture","title":"static let distantFuture: NIODeadline","type":"property"},{"path":"\/documentation\/niocore\/niodeadline\/distantpast","title":"static let distantPast: NIODeadline","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/now()","title":"static func now() -> NIODeadline","type":"method"},{"path":"\/documentation\/niocore\/niodeadline\/uptimenanoseconds(_:)","title":"static func uptimeNanoseconds(UInt64) -> NIODeadline","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/'...(_:)-8nrl8","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'...(_:)-g0rh","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niocore\/niodeadline\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/'...(_:)-8nrl8","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'...(_:)-g0rh","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niocore\/niodeadline\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/_(_:_:)-5shed","title":"static func > (NIODeadline, NIODeadline) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/_(_:_:)-8l4ot","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/_(_:_:)-9ba2m","title":"static func < (NIODeadline, NIODeadline) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/_=(_:_:)-2q783","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/niodeadline\/_=(_:_:)-9gysw","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niodeadline\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/niodeadline\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niodeadline\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niodeadline\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niodeadline","title":"NIODeadline","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioinsecurenotls\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioinsecurenotls\/enabletls(_:)","title":"func enableTLS(Bootstrap) -> Bootstrap","type":"method"}],"path":"\/documentation\/niocore\/nioinsecurenotls","title":"NIOInsecureNoTLS","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niomulticastnotimplementederror\/init()","title":"init()","type":"init"}],"path":"\/documentation\/niocore\/niomulticastnotimplementederror","title":"NIOMulticastNotImplementedError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niomulticastnotsupportederror\/init(device:)","title":"init(device: NIONetworkDevice)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niomulticastnotsupportederror\/device","title":"var device: NIONetworkDevice","type":"property"}],"path":"\/documentation\/niocore\/niomulticastnotsupportederror","title":"NIOMulticastNotSupportedError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkdevice\/init(_:)","title":"init(NIONetworkInterface)","type":"init"},{"path":"\/documentation\/niocore\/nionetworkdevice\/init(name:address:netmask:broadcastaddress:pointtopointdestinationaddress:multicastsupported:interfaceindex:)","title":"init(name: String, address: SocketAddress?, netmask: SocketAddress?, broadcastAddress: SocketAddress?, pointToPointDestinationAddress: SocketAddress, multicastSupported: Bool, interfaceIndex: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkdevice\/address","title":"var address: SocketAddress?","type":"property"},{"path":"\/documentation\/niocore\/nionetworkdevice\/broadcastaddress","title":"var broadcastAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/niocore\/nionetworkdevice\/interfaceindex","title":"var interfaceIndex: Int","type":"property"},{"path":"\/documentation\/niocore\/nionetworkdevice\/multicastsupported","title":"var multicastSupported: Bool","type":"property"},{"path":"\/documentation\/niocore\/nionetworkdevice\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/niocore\/nionetworkdevice\/netmask","title":"var netmask: SocketAddress?","type":"property"},{"path":"\/documentation\/niocore\/nionetworkdevice\/pointtopointdestinationaddress","title":"var pointToPointDestinationAddress: SocketAddress?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkdevice\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niocore\/nionetworkdevice\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkdevice\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/nionetworkdevice\/==(_:_:)","title":"static func == (NIONetworkDevice, NIONetworkDevice) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/nionetworkdevice\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/nionetworkdevice\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/nionetworkdevice\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/nionetworkdevice","title":"NIONetworkDevice","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niopacketinfo\/init(destinationaddress:interfaceindex:)","title":"init(destinationAddress: SocketAddress, interfaceIndex: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niopacketinfo\/destinationaddress","title":"var destinationAddress: SocketAddress","type":"property"},{"path":"\/documentation\/niocore\/niopacketinfo\/interfaceindex","title":"var interfaceIndex: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niopacketinfo\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niopacketinfo\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niopacketinfo","title":"NIOPacketInfo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/scheduled\/init(promise:cancellationtask:)","title":"init(promise: EventLoopPromise<T>, cancellationTask: () -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/scheduled\/futureresult","title":"var futureResult: EventLoopFuture<T>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/scheduled\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/niocore\/scheduled","title":"Scheduled","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/*(_:_:)-4nonq","title":"static func * <T>(T, TimeAmount) -> TimeAmount","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/*(_:_:)-9j9mr","title":"static func * <T>(TimeAmount, T) -> TimeAmount","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/nanoseconds","title":"let nanoseconds: Int64","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/value","title":"TimeAmount.Value","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/hours(_:)","title":"static func hours(Int64) -> TimeAmount","type":"method"},{"path":"\/documentation\/niocore\/timeamount\/microseconds(_:)","title":"static func microseconds(Int64) -> TimeAmount","type":"method"},{"path":"\/documentation\/niocore\/timeamount\/milliseconds(_:)","title":"static func milliseconds(Int64) -> TimeAmount","type":"method"},{"path":"\/documentation\/niocore\/timeamount\/minutes(_:)","title":"static func minutes(Int64) -> TimeAmount","type":"method"},{"path":"\/documentation\/niocore\/timeamount\/nanoseconds(_:)","title":"static func nanoseconds(Int64) -> TimeAmount","type":"method"},{"path":"\/documentation\/niocore\/timeamount\/seconds(_:)","title":"static func seconds(Int64) -> TimeAmount","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/'...(_:)-5tulq","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'...(_:)-6f318","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niocore\/timeamount\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/'...(_:)-5tulq","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'...(_:)-6f318","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niocore\/timeamount\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/+(_:_:)","title":"static func + (TimeAmount, TimeAmount) -> TimeAmount","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/+=(_:_:)-7zpx6","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/+=(_:_:)-8bhbr","title":"static func += (inout TimeAmount, TimeAmount)","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/-(_:_:)","title":"static func - (TimeAmount, TimeAmount) -> TimeAmount","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/-=(_:_:)-7f1sd","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/-=(_:_:)-90olx","title":"static func -= (inout TimeAmount, TimeAmount)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/zero","title":"static var zero: TimeAmount","type":"property"}],"path":"\/documentation\/niocore\/timeamount\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/_(_:_:)-898ix","title":"static func < (TimeAmount, TimeAmount) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/_(_:_:)-8gb8u","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/_=(_:_:)-4tl1c","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/timeamount\/_=(_:_:)-4x7du","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/timeamount\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/timeamount\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/timeamount\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/timeamount","title":"TimeAmount","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/allocatoroption","title":"AllocatorOption","type":"typealias"},{"path":"\/documentation\/niocore\/allowremotehalfclosureoption","title":"AllowRemoteHalfClosureOption","type":"typealias"},{"path":"\/documentation\/niocore\/autoreadoption","title":"AutoReadOption","type":"typealias"},{"path":"\/documentation\/niocore\/backlogoption","title":"BacklogOption","type":"typealias"},{"path":"\/documentation\/niocore\/channelduplexhandler","title":"ChannelDuplexHandler","type":"typealias"},{"path":"\/documentation\/niocore\/connecttimeoutoption","title":"ConnectTimeoutOption","type":"typealias"},{"path":"\/documentation\/niocore\/datagramvectorreadmessagecountoption","title":"DatagramVectorReadMessageCountOption","type":"typealias"},{"path":"\/documentation\/niocore\/maxmessagesperreadoption","title":"MaxMessagesPerReadOption","type":"typealias"},{"path":"\/documentation\/niocore\/niosendable","title":"NIOSendable","type":"typealias"},{"path":"\/documentation\/niocore\/recvallocatoroption","title":"RecvAllocatorOption","type":"typealias"},{"path":"\/documentation\/niocore\/socketoption","title":"SocketOption","type":"typealias"},{"path":"\/documentation\/niocore\/socketoptionlevel","title":"SocketOptionLevel","type":"typealias"},{"path":"\/documentation\/niocore\/socketoptionname","title":"SocketOptionName","type":"typealias"},{"path":"\/documentation\/niocore\/socketoptionvalue","title":"SocketOptionValue","type":"typealias"},{"path":"\/documentation\/niocore\/writebufferwatermark","title":"WriteBufferWaterMark","type":"typealias"},{"path":"\/documentation\/niocore\/writebufferwatermarkoption","title":"WriteBufferWaterMarkOption","type":"typealias"},{"path":"\/documentation\/niocore\/writespinoption","title":"WriteSpinOption","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagedecodererror\/payloadtoolargeerror\/init()","title":"init()","type":"init"}],"path":"\/documentation\/niocore\/bytetomessagedecodererror\/payloadtoolargeerror","title":"ByteToMessageDecoderError.PayloadTooLargeError","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/bytetomessagedecodererror\/datareceivedinerrorstate(_:_:)","title":"case dataReceivedInErrorState(Error, ByteBuffer)","type":"case"},{"path":"\/documentation\/niocore\/bytetomessagedecodererror\/leftoverdatawhendone(_:)","title":"case leftoverDataWhenDone(ByteBuffer)","type":"case"}],"path":"\/documentation\/niocore\/bytetomessagedecodererror","title":"ByteToMessageDecoderError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelerror\/alreadyclosed","title":"case alreadyClosed","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/badinterfaceaddressfamily","title":"case badInterfaceAddressFamily","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/badmulticastgroupaddressfamily","title":"case badMulticastGroupAddressFamily","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/connectpending","title":"case connectPending","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/connecttimeout(_:)","title":"case connectTimeout(TimeAmount)","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/eof","title":"case eof","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/illegalmulticastaddress(_:)","title":"case illegalMulticastAddress(SocketAddress)","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/inappropriateoperationforstate","title":"case inappropriateOperationForState","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/inputclosed","title":"case inputClosed","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/ioonclosedchannel","title":"case ioOnClosedChannel","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/multicastnotsupported(_:)","title":"case multicastNotSupported(NIONetworkInterface)","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/operationunsupported","title":"case operationUnsupported","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/outputclosed","title":"case outputClosed","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/unknownlocaladdress","title":"case unknownLocalAddress","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/unremovablehandler","title":"case unremovableHandler","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/writehostunreachable","title":"case writeHostUnreachable","type":"case"},{"path":"\/documentation\/niocore\/channelerror\/writemessagetoolarge","title":"case writeMessageTooLarge","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channelerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channelerror","title":"ChannelError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelevent\/inputclosed","title":"case inputClosed","type":"case"},{"path":"\/documentation\/niocore\/channelevent\/outputclosed","title":"case outputClosed","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channelevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channelevent","title":"ChannelEvent","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipelineerror\/alreadyremoved","title":"case alreadyRemoved","type":"case"},{"path":"\/documentation\/niocore\/channelpipelineerror\/notfound","title":"case notFound","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/channelpipelineerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/channelpipelineerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/channelpipelineerror","title":"ChannelPipelineError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/closemode\/all","title":"case all","type":"case"},{"path":"\/documentation\/niocore\/closemode\/input","title":"case input","type":"case"},{"path":"\/documentation\/niocore\/closemode\/output","title":"case output","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/closemode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/closemode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/closemode","title":"CloseMode","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/decodingstate\/continue","title":"case `continue`","type":"case"},{"path":"\/documentation\/niocore\/decodingstate\/needmoredata","title":"case needMoreData","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/decodingstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/decodingstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/decodingstate","title":"DecodingState","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/endianness\/big","title":"case big","type":"case"},{"path":"\/documentation\/niocore\/endianness\/little","title":"case little","type":"case"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/endianness\/host","title":"static let host: Endianness","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/endianness\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/endianness\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/endianness","title":"Endianness","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventlooperror\/cancelled","title":"case cancelled","type":"case"},{"path":"\/documentation\/niocore\/eventlooperror\/shutdown","title":"case shutdown","type":"case"},{"path":"\/documentation\/niocore\/eventlooperror\/shutdownfailed","title":"case shutdownFailed","type":"case"},{"path":"\/documentation\/niocore\/eventlooperror\/unsupportedoperation","title":"case unsupportedOperation","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventlooperror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/eventlooperror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/eventlooperror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/eventlooperror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/eventlooperror","title":"EventLoopError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/iodata\/bytebuffer(_:)","title":"case byteBuffer(ByteBuffer)","type":"case"},{"path":"\/documentation\/niocore\/iodata\/fileregion(_:)","title":"case fileRegion(FileRegion)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/iodata\/readablebytes","title":"var readableBytes: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/iodata\/movereaderindex(forwardby:)","title":"func moveReaderIndex(forwardBy: Int)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/iodata\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niocore\/iodata\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/iodata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/iodata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/iodata","title":"IOData","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/init(rawvalue:)","title":"init(rawValue: NIOBSDSocket.AddressFamily.RawValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/rawvalue-swift.property","title":"var rawValue: NIOBSDSocket.AddressFamily.RawValue","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/rawvalue-swift.typealias","title":"NIOBSDSocket.AddressFamily.RawValue","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/inet","title":"static let inet: NIOBSDSocket.AddressFamily","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/inet6","title":"static let inet6: NIOBSDSocket.AddressFamily","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/unix","title":"static let unix: NIOBSDSocket.AddressFamily","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niobsdsocket\/addressfamily","title":"NIOBSDSocket.AddressFamily","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/init(rawvalue:)","title":"init(rawValue: NIOBSDSocket.Option.RawValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/rawvalue-swift.property","title":"var rawValue: NIOBSDSocket.Option.RawValue","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/rawvalue-swift.typealias","title":"NIOBSDSocket.Option.RawValue","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ip_add_membership","title":"static let ip_add_membership: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ip_drop_membership","title":"static let ip_drop_membership: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ip_multicast_if","title":"static let ip_multicast_if: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ip_multicast_loop","title":"static let ip_multicast_loop: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ip_multicast_ttl","title":"static let ip_multicast_ttl: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ipv6_join_group","title":"static let ipv6_join_group: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ipv6_leave_group","title":"static let ipv6_leave_group: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ipv6_multicast_hops","title":"static let ipv6_multicast_hops: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ipv6_multicast_if","title":"static let ipv6_multicast_if: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ipv6_multicast_loop","title":"static let ipv6_multicast_loop: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/ipv6_v6only","title":"static let ipv6_v6only: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/so_error","title":"static let so_error: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/so_keepalive","title":"static let so_keepalive: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/so_linger","title":"static let so_linger: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/so_rcvbuf","title":"static let so_rcvbuf: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/so_rcvtimeo","title":"static let so_rcvtimeo: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/so_reuseaddr","title":"static let so_reuseaddr: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/so_timestamp","title":"static let so_timestamp: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/tcp_info","title":"static let tcp_info: NIOBSDSocket.Option","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/tcp_nodelay","title":"static let tcp_nodelay: NIOBSDSocket.Option","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niobsdsocket\/option\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/option\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/niobsdsocket\/option\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niobsdsocket\/option","title":"NIOBSDSocket.Option","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/init(rawvalue:)","title":"init(rawValue: NIOBSDSocket.OptionLevel.RawValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/rawvalue-swift.property","title":"var rawValue: NIOBSDSocket.OptionLevel.RawValue","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/rawvalue-swift.typealias","title":"NIOBSDSocket.OptionLevel.RawValue","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/ip","title":"static let ip: NIOBSDSocket.OptionLevel","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/ipv6","title":"static let ipv6: NIOBSDSocket.OptionLevel","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/socket","title":"static let socket: NIOBSDSocket.OptionLevel","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/tcp","title":"static let tcp: NIOBSDSocket.OptionLevel","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niobsdsocket\/optionlevel","title":"NIOBSDSocket.OptionLevel","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/init(rawvalue:)","title":"init(rawValue: NIOBSDSocket.ProtocolFamily.RawValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/rawvalue-swift.property","title":"var rawValue: NIOBSDSocket.ProtocolFamily.RawValue","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/rawvalue-swift.typealias","title":"NIOBSDSocket.ProtocolFamily.RawValue","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/inet","title":"static let inet: NIOBSDSocket.ProtocolFamily","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/inet6","title":"static let inet6: NIOBSDSocket.ProtocolFamily","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/local","title":"static let local: NIOBSDSocket.ProtocolFamily","type":"property"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/unix","title":"static let unix: NIOBSDSocket.ProtocolFamily","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/niobsdsocket\/protocolfamily","title":"NIOBSDSocket.ProtocolFamily","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niocore\/niobsdsocket\/handle","title":"NIOBSDSocket.Handle","type":"typealias"}],"path":"\/documentation\/niocore\/niobsdsocket","title":"NIOBSDSocket","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioeventloopgroupprovider\/createnew","title":"case createNew","type":"case"},{"path":"\/documentation\/niocore\/nioeventloopgroupprovider\/shared(_:)","title":"case shared(EventLoopGroup)","type":"case"}],"path":"\/documentation\/niocore\/nioeventloopgroupprovider","title":"NIOEventLoopGroupProvider","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate\/congestionexperienced","title":"case congestionExperienced","type":"case"},{"path":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate\/transportcapableflag0","title":"case transportCapableFlag0","type":"case"},{"path":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate\/transportcapableflag1","title":"case transportCapableFlag1","type":"case"},{"path":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate\/transportnotcapable","title":"case transportNotCapable","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate","title":"NIOExplicitCongestionNotificationState","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/ipv4address\/address","title":"var address: sockaddr_in","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/ipv4address\/host","title":"var host: String","type":"property"}],"path":"\/documentation\/niocore\/socketaddress\/ipv4address","title":"SocketAddress.IPv4Address","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/ipv6address\/address","title":"var address: sockaddr_in6","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/ipv6address\/host","title":"var host: String","type":"property"}],"path":"\/documentation\/niocore\/socketaddress\/ipv6address","title":"SocketAddress.IPv6Address","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/unixsocketaddress\/address","title":"var address: sockaddr_un","type":"property"}],"path":"\/documentation\/niocore\/socketaddress\/unixsocketaddress","title":"SocketAddress.UnixSocketAddress","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/unixdomainsocket(_:)","title":"case unixDomainSocket(SocketAddress.UnixSocketAddress)","type":"case"},{"path":"\/documentation\/niocore\/socketaddress\/v4(_:)","title":"case v4(SocketAddress.IPv4Address)","type":"case"},{"path":"\/documentation\/niocore\/socketaddress\/v6(_:)","title":"case v6(SocketAddress.IPv6Address)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/init(_:)-1d86g","title":"init(sockaddr_un)","type":"init"},{"path":"\/documentation\/niocore\/socketaddress\/init(_:)-6pvmq","title":"init(sockaddr_in6)","type":"init"},{"path":"\/documentation\/niocore\/socketaddress\/init(_:)-84c6x","title":"init(sockaddr_in)","type":"init"},{"path":"\/documentation\/niocore\/socketaddress\/init(_:host:)-1uaed","title":"init(sockaddr_in6, host: String)","type":"init"},{"path":"\/documentation\/niocore\/socketaddress\/init(_:host:)-1z4io","title":"init(sockaddr_in, host: String)","type":"init"},{"path":"\/documentation\/niocore\/socketaddress\/init(ipaddress:port:)","title":"init(ipAddress: String, port: Int) throws","type":"init"},{"path":"\/documentation\/niocore\/socketaddress\/init(packedipaddress:port:)","title":"init(packedIPAddress: ByteBuffer, port: Int) throws","type":"init"},{"path":"\/documentation\/niocore\/socketaddress\/init(unixdomainsocketpath:)","title":"init(unixDomainSocketPath: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/hostname","title":"var hostname: String?","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/ipaddress","title":"var ipAddress: String?","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/ismulticast","title":"var isMulticast: Bool","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/pathname","title":"var pathname: String?","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/port","title":"var port: Int?","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/protocol","title":"var `protocol`: NIOBSDSocket.ProtocolFamily","type":"property"},{"path":"\/documentation\/niocore\/socketaddress\/protocolfamily","title":"var protocolFamily: Int32","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/withsockaddr(_:)","title":"func withSockAddr<T>((UnsafePointer<sockaddr>, Int) throws -> T) rethrows -> T","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/makeaddressresolvinghost(_:port:)","title":"static func makeAddressResolvingHost(String, port: Int) throws -> SocketAddress","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niocore\/socketaddress\/==(_:_:)","title":"static func == (SocketAddress, SocketAddress) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/socketaddress\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddress\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niocore\/socketaddress\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/socketaddress","title":"SocketAddress","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddresserror\/failedtoparseipbytebuffer\/init(address:)","title":"init(address: ByteBuffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddresserror\/failedtoparseipbytebuffer\/address","title":"var address: ByteBuffer","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddresserror\/failedtoparseipbytebuffer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niocore\/socketaddresserror\/failedtoparseipbytebuffer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niocore\/socketaddresserror\/failedtoparseipbytebuffer","title":"SocketAddressError.FailedToParseIPByteBuffer","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niocore\/socketaddresserror\/failedtoparseipstring(_:)","title":"case failedToParseIPString(String)","type":"case"},{"path":"\/documentation\/niocore\/socketaddresserror\/unixdomainsocketpathtoolong","title":"case unixDomainSocketPathTooLong","type":"case"},{"path":"\/documentation\/niocore\/socketaddresserror\/unknown(host:port:)","title":"case unknown(host: String, port: Int)","type":"case"},{"path":"\/documentation\/niocore\/socketaddresserror\/unsupported","title":"case unsupported","type":"case"}],"path":"\/documentation\/niocore\/socketaddresserror","title":"SocketAddressError","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niocore\/system\/corecount","title":"static var coreCount: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niocore\/system\/enumeratedevices()","title":"static func enumerateDevices() throws -> [NIONetworkDevice]","type":"method"},{"path":"\/documentation\/niocore\/system\/enumerateinterfaces()","title":"static func enumerateInterfaces() throws -> [NIONetworkInterface]","type":"method"}],"path":"\/documentation\/niocore\/system","title":"System","type":"enum"}],"path":"\/documentation\/niocore","title":"NIOCore","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/synchronousoptions\/getoption(_:)","title":"func getOption<Option>(Option) throws -> Option.Value","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/synchronousoptions\/setoption(_:value:)","title":"func setOption<Option>(Option, value: Option.Value) throws","type":"method"}],"path":"\/documentation\/nioembedded\/embeddedchannel\/synchronousoptions","title":"EmbeddedChannel.SynchronousOptions","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror\/==(_:_:)","title":"static func == (EmbeddedChannel.WrongTypeError, EmbeddedChannel.WrongTypeError) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror\/init(expected:actual:)","title":"init(expected: Any.Type, actual: Any.Type)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror\/actual","title":"let actual: Any.Type","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror\/expected","title":"let expected: Any.Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioembedded\/embeddedchannel\/wrongtypeerror","title":"EmbeddedChannel.WrongTypeError","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/init(handler:loop:)","title":"convenience init(handler: ChannelHandler?, loop: EmbeddedEventLoop)","type":"init"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/init(handlers:loop:)","title":"init(handlers: [ChannelHandler], loop: EmbeddedEventLoop)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/allocator","title":"var allocator: ByteBufferAllocator","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/closefuture","title":"var closeFuture: EventLoopFuture<Void>","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/embeddedeventloop","title":"var embeddedEventLoop: EmbeddedEventLoop","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/isactive","title":"var isActive: Bool","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/iswritable","title":"var isWritable: Bool","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/localaddress","title":"var localAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/parent","title":"let parent: Channel?","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/pipeline","title":"var pipeline: ChannelPipeline","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/remoteaddress","title":"var remoteAddress: SocketAddress?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/bind(to:promise:)","title":"func bind(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/connect(to:promise:)","title":"func connect(to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/finish()","title":"func finish() throws -> EmbeddedChannel.LeftOverState","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)","title":"func finish(acceptAlreadyClosed: Bool) throws -> EmbeddedChannel.LeftOverState","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/getoption(_:)-6dgj0","title":"func getOption<Option>(Option) -> EventLoopFuture<Option.Value>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/readinbound(as:)","title":"func readInbound<T>(as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/readoutbound(as:)","title":"func readOutbound<T>(as: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/setoption(_:value:)-5j5cw","title":"func setOption<Option>(Option, value: Option.Value) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/throwiferrorcaught()","title":"func throwIfErrorCaught() throws","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/writeinbound(_:)","title":"func writeInbound<T>(T) throws -> EmbeddedChannel.BufferState","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/writeoutbound(_:)","title":"func writeOutbound<T>(T) throws -> EmbeddedChannel.BufferState","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/bufferstate\/empty","title":"case empty","type":"case"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/bufferstate\/full(_:)","title":"case full([NIOAny])","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/bufferstate\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/bufferstate\/isfull","title":"var isFull: Bool","type":"property"}],"path":"\/documentation\/nioembedded\/embeddedchannel\/bufferstate","title":"EmbeddedChannel.BufferState","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate\/clean","title":"case clean","type":"case"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate\/leftovers(inbound:outbound:pendingoutbound:)","title":"case leftOvers(inbound: [NIOAny], outbound: [NIOAny], pendingOutbound: [NIOAny])","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate\/hasleftovers","title":"var hasLeftOvers: Bool","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate\/isclean","title":"var isClean: Bool","type":"property"}],"path":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate","title":"EmbeddedChannel.LeftOverState","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/syncoptions-7hmp4","title":"var syncOptions: NIOSynchronousChannelOptions?","type":"property"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/syncoptions-8lcvf","title":"var syncOptions: NIOSynchronousChannelOptions?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/getoption(_:)-7tqtx","title":"func getOption<Option>(Option) async throws -> Option.Value","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/registeralreadyconfigured0(promise:)","title":"func registerAlreadyConfigured0(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/setoption(_:value:)-9e1ht","title":"func setOption<Option>(Option, value: Option.Value) async throws","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/write(_:)","title":"func write<T>(T) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/writeandflush(_:)-1l6d4","title":"func writeAndFlush<T>(T) async throws","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/writeandflush(_:)-9d5bq","title":"func writeAndFlush<T>(T) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/nioembedded\/embeddedchannel\/channel-implementations","title":"Channel Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/bind(to:file:line:)","title":"func bind(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/close(mode:file:line:)","title":"func close(mode: CloseMode, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/close(mode:promise:)","title":"func close(mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/connect(to:file:line:)","title":"func connect(to: SocketAddress, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/flush()","title":"func flush()","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/read()","title":"func read()","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/register(file:line:)","title":"func register(file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/register(promise:)","title":"func register(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/triggeruseroutboundevent(_:file:line:)","title":"func triggerUserOutboundEvent(Any, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/triggeruseroutboundevent(_:promise:)","title":"func triggerUserOutboundEvent(Any, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/write(_:file:line:)","title":"func write(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/write(_:promise:)","title":"func write(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/writeandflush(_:file:line:)","title":"func writeAndFlush(NIOAny, file: StaticString, line: UInt) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedchannel\/writeandflush(_:promise:)","title":"func writeAndFlush(NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/nioembedded\/embeddedchannel\/channeloutboundinvoker-implementations","title":"ChannelOutboundInvoker Implementations","type":"symbol"}],"path":"\/documentation\/nioembedded\/embeddedchannel","title":"EmbeddedChannel","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/ineventloop","title":"var inEventLoop: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/advancetime(by:)","title":"func advanceTime(by: TimeAmount)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/advancetime(to:)","title":"func advanceTime(to: NIODeadline)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/execute(_:)","title":"func execute(() -> Void)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/run()","title":"func run()","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/scheduletask(deadline:_:)","title":"func scheduleTask<T>(deadline: NIODeadline, () throws -> T) -> Scheduled<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/scheduletask(in:_:)","title":"func scheduleTask<T>(in: TimeAmount, () throws -> T) -> Scheduled<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/shutdowngracefully(queue:_:)","title":"func shutdownGracefully(queue: DispatchQueue, (Error?) -> Void)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/any()","title":"func any() -> EventLoop","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/assertineventloop(file:line:)","title":"func assertInEventLoop(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/assertnotineventloop(file:line:)","title":"func assertNotInEventLoop(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/flatscheduletask(deadline:file:line:_:)","title":"func flatScheduleTask<T>(deadline: NIODeadline, file: StaticString, line: UInt, () throws -> EventLoopFuture<T>) -> Scheduled<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/flatscheduletask(in:file:line:_:)","title":"func flatScheduleTask<T>(in: TimeAmount, file: StaticString, line: UInt, () throws -> EventLoopFuture<T>) -> Scheduled<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/flatsubmit(_:)","title":"func flatSubmit<T>(() -> EventLoopFuture<T>) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makecompletedfuture(_:)","title":"func makeCompletedFuture<Success>(Result<Success, Error>) -> EventLoopFuture<Success>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makefailedfuture(_:)","title":"func makeFailedFuture<T>(Error) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makefailedfuture(_:file:line:)","title":"func makeFailedFuture<T>(Error, file: StaticString, line: UInt) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makeiterator()","title":"func makeIterator() -> EventLoopIterator","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makepromise(of:file:line:)","title":"func makePromise<T>(of: T.Type, file: StaticString, line: UInt) -> EventLoopPromise<T>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makesucceededfuture(_:)","title":"func makeSucceededFuture<Success>(Success) -> EventLoopFuture<Success>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makesucceededfuture(_:file:line:)","title":"func makeSucceededFuture<Success>(Success, file: StaticString, line: UInt) -> EventLoopFuture<Success>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/makesucceededvoidfuture()","title":"func makeSucceededVoidFuture() -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/next()","title":"func next() -> EventLoop","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/preconditionineventloop(file:line:)","title":"func preconditionInEventLoop(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/preconditionnotineventloop(file:line:)","title":"func preconditionNotInEventLoop(file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/schedulerepeatedasynctask(initialdelay:delay:notifying:_:)","title":"func scheduleRepeatedAsyncTask(initialDelay: TimeAmount, delay: TimeAmount, notifying: EventLoopPromise<Void>?, (RepeatedTask) -> EventLoopFuture<Void>) -> RepeatedTask","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/schedulerepeatedtask(initialdelay:delay:notifying:_:)","title":"func scheduleRepeatedTask(initialDelay: TimeAmount, delay: TimeAmount, notifying: EventLoopPromise<Void>?, (RepeatedTask) throws -> Void) -> RepeatedTask","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/submit(_:)","title":"func submit<T>(() throws -> T) -> EventLoopFuture<T>","type":"method"}],"path":"\/documentation\/nioembedded\/embeddedeventloop\/eventloop-implementations","title":"EventLoop Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/shutdowngracefully()","title":"func shutdownGracefully() async throws","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/shutdowngracefully(_:)","title":"func shutdownGracefully((Error?) -> Void)","type":"method"},{"path":"\/documentation\/nioembedded\/embeddedeventloop\/syncshutdowngracefully()","title":"func syncShutdownGracefully() throws","type":"method"}],"path":"\/documentation\/nioembedded\/embeddedeventloop\/eventloopgroup-implementations","title":"EventLoopGroup Implementations","type":"symbol"}],"path":"\/documentation\/nioembedded\/embeddedeventloop","title":"EmbeddedEventLoop","type":"class"}],"path":"\/documentation\/nioembedded","title":"NIOEmbedded","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/init(logger:)","title":"init(logger: (DebugInboundEventsHandler.Event, ChannelHandlerContext) -> ())","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelreadcomplete(context:)","title":"func channelReadComplete(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelregistered(context:)","title":"func channelRegistered(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelunregistered(context:)","title":"func channelUnregistered(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelwritabilitychanged(context:)","title":"func channelWritabilityChanged(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/userinboundeventtriggered(context:event:)","title":"func userInboundEventTriggered(context: ChannelHandlerContext, event: Any)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/inboudout","title":"DebugInboundEventsHandler.InboudOut","type":"typealias"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/inboundin","title":"DebugInboundEventsHandler.InboundIn","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/defaultprint(event:in:)","title":"static func defaultPrint(event: DebugInboundEventsHandler.Event, in: ChannelHandlerContext)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/active","title":"case active","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/errorcaught(_:)","title":"case errorCaught(Error)","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/inactive","title":"case inactive","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/read(data:)","title":"case read(data: NIOAny)","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/readcomplete","title":"case readComplete","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/registered","title":"case registered","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/unregistered","title":"case unregistered","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/userinboundeventtriggered(event:)","title":"case userInboundEventTriggered(event: Any)","type":"case"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event\/writabilitychanged(iswritable:)","title":"case writabilityChanged(isWritable: Bool)","type":"case"}],"path":"\/documentation\/nioextras\/debuginboundeventshandler\/event","title":"DebugInboundEventsHandler.Event","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/nioextras\/debuginboundeventshandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/nioextras\/debuginboundeventshandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/debuginboundeventshandler","title":"DebugInboundEventsHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/init(logger:)","title":"init(logger: (DebugOutboundEventsHandler.Event, ChannelHandlerContext) -> ())","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/bind(context:to:promise:)","title":"func bind(context: ChannelHandlerContext, to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/close(context:mode:promise:)","title":"func close(context: ChannelHandlerContext, mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/connect(context:to:promise:)","title":"func connect(context: ChannelHandlerContext, to: SocketAddress, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/read(context:)","title":"func read(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/register(context:promise:)","title":"func register(context: ChannelHandlerContext, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/triggeruseroutboundevent(context:event:promise:)","title":"func triggerUserOutboundEvent(context: ChannelHandlerContext, event: Any, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/outboundin","title":"DebugOutboundEventsHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/outboundout","title":"DebugOutboundEventsHandler.OutboundOut","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/defaultprint(event:in:)","title":"static func defaultPrint(event: DebugOutboundEventsHandler.Event, in: ChannelHandlerContext)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/bind(address:)","title":"case bind(address: SocketAddress)","type":"case"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/close(mode:)","title":"case close(mode: CloseMode)","type":"case"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/connect(address:)","title":"case connect(address: SocketAddress)","type":"case"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/flush","title":"case flush","type":"case"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/read","title":"case read","type":"case"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/register","title":"case register","type":"case"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/triggeruseroutboundevent(event:)","title":"case triggerUserOutboundEvent(event: Any)","type":"case"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event\/write(data:)","title":"case write(data: NIOAny)","type":"case"}],"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/event","title":"DebugOutboundEventsHandler.Event","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/nioextras\/debugoutboundeventshandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/debugoutboundeventshandler","title":"DebugOutboundEventsHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/init(framelength:)","title":"init(frameLength: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/cumulationbuffer","title":"var cumulationBuffer: ByteBuffer?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/inboundin","title":"FixedLengthFrameDecoder.InboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/inboundout","title":"FixedLengthFrameDecoder.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/nioextras\/fixedlengthframedecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/fixedlengthframedecoder","title":"FixedLengthFrameDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/init(lengthfieldbitlength:lengthfieldendianness:)","title":"init(lengthFieldBitLength: NIOLengthFieldBitLength, lengthFieldEndianness: Endianness)","type":"init"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/init(lengthfieldlength:lengthfieldendianness:)","title":"convenience init(lengthFieldLength: LengthFieldBasedFrameDecoder.ByteLength, lengthFieldEndianness: Endianness)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/cumulationbuffer","title":"var cumulationBuffer: ByteBuffer?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/inboundin","title":"LengthFieldBasedFrameDecoder.InboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/inboundout","title":"LengthFieldBasedFrameDecoder.InboundOut","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/maxsupportedlengthfieldsize","title":"static let maxSupportedLengthFieldSize: Int","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytelength\/eight","title":"case eight","type":"case"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytelength\/four","title":"case four","type":"case"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytelength\/one","title":"case one","type":"case"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytelength\/two","title":"case two","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytelength\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytelength\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytelength","title":"LengthFieldBasedFrameDecoder.ByteLength","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/lengthfieldbasedframedecoder","title":"LengthFieldBasedFrameDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/init(lengthfieldbitlength:lengthfieldendianness:)","title":"init(lengthFieldBitLength: NIOLengthFieldBitLength, lengthFieldEndianness: Endianness)","type":"init"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/init(lengthfieldlength:lengthfieldendianness:)","title":"convenience init(lengthFieldLength: LengthFieldPrepender.ByteLength, lengthFieldEndianness: Endianness)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/outboundin","title":"LengthFieldPrepender.OutboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/outboundout","title":"LengthFieldPrepender.OutboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/bytelength\/eight","title":"case eight","type":"case"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/bytelength\/four","title":"case four","type":"case"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/bytelength\/one","title":"case one","type":"case"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/bytelength\/two","title":"case two","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/bytelength\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/lengthfieldprepender\/bytelength\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/lengthfieldprepender\/bytelength","title":"LengthFieldPrepender.ByteLength","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/nioextras\/lengthfieldprepender\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprepender\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/nioextras\/lengthfieldprepender\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/lengthfieldprepender","title":"LengthFieldPrepender","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/cumulationbuffer","title":"var cumulationBuffer: ByteBuffer?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/inboundin","title":"LineBasedFrameDecoder.InboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/inboundout","title":"LineBasedFrameDecoder.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/nioextras\/linebasedframedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/nioextras\/linebasedframedecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/linebasedframedecoder","title":"LineBasedFrameDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niopcapringbuffer\/init(maximumbytes:)","title":"convenience init(maximumBytes: Int)","type":"init"},{"path":"\/documentation\/nioextras\/niopcapringbuffer\/init(maximumfragments:)","title":"convenience init(maximumFragments: Int)","type":"init"},{"path":"\/documentation\/nioextras\/niopcapringbuffer\/init(maximumfragments:maximumbytes:)","title":"init(maximumFragments: Int, maximumBytes: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niopcapringbuffer\/addfragment(_:)","title":"func addFragment(ByteBuffer)","type":"method"},{"path":"\/documentation\/nioextras\/niopcapringbuffer\/emitpcap()","title":"func emitPCAP() -> CircularBuffer<ByteBuffer>","type":"method"}],"path":"\/documentation\/nioextras\/niopcapringbuffer","title":"NIOPCAPRingBuffer","type":"class"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/error\/errorcode","title":"var errorCode: Int","type":"property"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/error","title":"NIOWritePCAPHandler.SynchronizedFileSink.Error","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/syncclose()","title":"func syncClose() throws","type":"method"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/write(buffer:)","title":"func write(buffer: ByteBuffer)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/filesinkwritingtofile(path:filewritingmode:errorhandler:)","title":"static func fileSinkWritingToFile(path: String, fileWritingMode: NIOWritePCAPHandler.SynchronizedFileSink.FileWritingMode, errorHandler: (Error) -> Void) throws -> NIOWritePCAPHandler.SynchronizedFileSink","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/filewritingmode\/appendtoexistingpcapfile","title":"case appendToExistingPCAPFile","type":"case"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/filewritingmode\/createnewpcapfile","title":"case createNewPCAPFile","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/filewritingmode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/filewritingmode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink\/filewritingmode","title":"NIOWritePCAPHandler.SynchronizedFileSink.FileWritingMode","type":"enum"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/synchronizedfilesink","title":"NIOWritePCAPHandler.SynchronizedFileSink","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/init()","title":"init()","type":"init"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/init(emitpcapwrites:)","title":"init(emitPCAPWrites: NIOWritePCAPHandler.Settings.EmitPCAP)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/emitpcapwrites","title":"var emitPCAPWrites: NIOWritePCAPHandler.Settings.EmitPCAP","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/emitpcap\/whencompleted","title":"case whenCompleted","type":"case"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/emitpcap\/whenissued","title":"case whenIssued","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/emitpcap\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/emitpcap\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings\/emitpcap","title":"NIOWritePCAPHandler.Settings.EmitPCAP","type":"enum"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/settings","title":"NIOWritePCAPHandler.Settings","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/init(mode:fakelocaladdress:fakeremoteaddress:filesink:)","title":"convenience init(mode: NIOWritePCAPHandler.Mode, fakeLocalAddress: SocketAddress?, fakeRemoteAddress: SocketAddress?, fileSink: (ByteBuffer) -> Void)","type":"init"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/init(mode:fakelocaladdress:fakeremoteaddress:settings:filesink:)","title":"init(mode: NIOWritePCAPHandler.Mode, fakeLocalAddress: SocketAddress?, fakeRemoteAddress: SocketAddress?, settings: NIOWritePCAPHandler.Settings, fileSink: (ByteBuffer) -> Void)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/pcapfileheader","title":"static var pcapFileHeader: ByteBuffer","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/mode\/client","title":"case client","type":"case"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/mode\/server","title":"case server","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/mode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/mode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/mode","title":"NIOWritePCAPHandler.Mode","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/inboundin","title":"NIOWritePCAPHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/inboundout","title":"NIOWritePCAPHandler.InboundOut","type":"typealias"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/outboundin","title":"NIOWritePCAPHandler.OutboundIn","type":"typealias"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/userinboundeventtriggered(context:event:)","title":"func userInboundEventTriggered(context: ChannelHandlerContext, event: Any)","type":"method"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/_channelinboundhandler-implementations","title":"_ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/close(context:mode:promise:)","title":"func close(context: ChannelHandlerContext, mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/_channeloutboundhandler-implementations","title":"_ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niowritepcaphandler\/outboundout","title":"NIOWritePCAPHandler.OutboundOut","type":"typealias"}],"path":"\/documentation\/nioextras\/niowritepcaphandler\/_emittingchannelhandler-implementations","title":"_EmittingChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niowritepcaphandler","title":"NIOWritePCAPHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/init(initialbuffercapacity:)","title":"init(initialBufferCapacity: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/inboundin","title":"RequestResponseHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/inboundout","title":"RequestResponseHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/outboundin","title":"RequestResponseHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/outboundout","title":"RequestResponseHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/nioextras\/requestresponsehandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/nioextras\/requestresponsehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/requestresponsehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/nioextras\/requestresponsehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/requestresponsehandler","title":"RequestResponseHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/serverquiescinghelper\/init(group:)","title":"init(group: EventLoopGroup)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/serverquiescinghelper\/initiateshutdown(promise:)","title":"func initiateShutdown(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/nioextras\/serverquiescinghelper\/makeserverchannelhandler(channel:)","title":"func makeServerChannelHandler(channel: Channel) -> ChannelHandler","type":"method"}],"path":"\/documentation\/nioextras\/serverquiescinghelper","title":"ServerQuiescingHelper","type":"class"},{"title":"Protocols","type":"groupMarker"},{"path":"\/documentation\/nioextras\/nioextraserror","title":"NIOExtrasError","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/eightbits","title":"static let eightBits: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/eightbytes","title":"static let eightBytes: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/fourbytes","title":"static let fourBytes: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/onebyte","title":"static let oneByte: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/sixteenbits","title":"static let sixteenBits: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/sixtyfourbits","title":"static let sixtyFourBits: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/thirtytwobits","title":"static let thirtyTwoBits: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/threebytes","title":"static let threeBytes: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/twentyfourbits","title":"static let twentyFourBits: NIOLengthFieldBitLength","type":"property"},{"path":"\/documentation\/nioextras\/niolengthfieldbitlength\/twobytes","title":"static let twoBytes: NIOLengthFieldBitLength","type":"property"}],"path":"\/documentation\/nioextras\/niolengthfieldbitlength","title":"NIOLengthFieldBitLength","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprependererror\/messagedatatoolongforlengthfield","title":"case messageDataTooLongForLengthField","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/lengthfieldprependererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/lengthfieldprependererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/lengthfieldprependererror","title":"LengthFieldPrependerError","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/nioextraserrors\/closedbeforereceivingresponse\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/nioextraserrors\/closedbeforereceivingresponse\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/nioextraserrors\/closedbeforereceivingresponse","title":"NIOExtrasErrors.ClosedBeforeReceivingResponse","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioextras\/nioextraserrors\/leftoverbyteserror\/leftoverbytes","title":"let leftOverBytes: ByteBuffer","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/nioextraserrors\/leftoverbyteserror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/nioextraserrors\/leftoverbyteserror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/nioextraserrors\/leftoverbyteserror","title":"NIOExtrasErrors.LeftOverBytesError","type":"struct"}],"path":"\/documentation\/nioextras\/nioextraserrors","title":"NIOExtrasErrors","type":"enum"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/outboundin","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameEncoder.OutboundIn","type":"typealias"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/outboundout","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameEncoder.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameEncoder","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decodelast(context:buffer:seeneof:)-2qwpe","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/inboundout","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameDecoder.InboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decodingerror\/illegalcontentlengthheadervalue(_:)","title":"case illegalContentLengthHeaderValue(String)","type":"case"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decodingerror\/missingcontentlengthheader","title":"case missingContentLengthHeader","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decodingerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decodingerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decodingerror","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameDecoder.DecodingError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decodelast(context:buffer:seeneof:)-5ajmq","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframedecoder","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameDecoder","type":"struct"}],"path":"\/documentation\/nioextras\/niojsonrpcframing","title":"NIOJSONRPCFraming","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niolengthfieldbasedframedecodererror\/lengthfieldvaluelargerthanmaxsupportedsize","title":"case lengthFieldValueLargerThanMaxSupportedSize","type":"case"},{"path":"\/documentation\/nioextras\/niolengthfieldbasedframedecodererror\/lengthfieldvaluetoolarge","title":"case lengthFieldValueTooLarge","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioextras\/niolengthfieldbasedframedecodererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioextras\/niolengthfieldbasedframedecodererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioextras\/niolengthfieldbasedframedecodererror","title":"NIOLengthFieldBasedFrameDecoderError","type":"enum"}],"path":"\/documentation\/nioextras","title":"NIOExtras","type":"module"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niofoundationcompat\/bytebufferfoundationerror\/failedtoencodestring","title":"case failedToEncodeString","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niofoundationcompat\/bytebufferfoundationerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niofoundationcompat\/bytebufferfoundationerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niofoundationcompat\/bytebufferfoundationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/niofoundationcompat\/bytebufferfoundationerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/niofoundationcompat\/bytebufferfoundationerror","title":"ByteBufferFoundationError","type":"enum"}],"path":"\/documentation\/niofoundationcompat","title":"NIOFoundationCompat","type":"module"},{"children":[{"title":"Protocols","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerror","title":"NIOHPACKError","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackdecoder\/init(allocator:maxdynamictablesize:)","title":"init(allocator: ByteBufferAllocator, maxDynamicTableSize: Int)","type":"init"},{"path":"\/documentation\/niohpack\/hpackdecoder\/init(allocator:maxdynamictablesize:maxheaderlistsize:)","title":"init(allocator: ByteBufferAllocator, maxDynamicTableSize: Int, maxHeaderListSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackdecoder\/alloweddynamictablelength","title":"var allowedDynamicTableLength: Int","type":"property"},{"path":"\/documentation\/niohpack\/hpackdecoder\/maxdynamictablelength","title":"var maxDynamicTableLength: Int","type":"property"},{"path":"\/documentation\/niohpack\/hpackdecoder\/maxheaderlistsize","title":"var maxHeaderListSize: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackdecoder\/decodeheaders(from:)","title":"func decodeHeaders(from: inout ByteBuffer) throws -> HPACKHeaders","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackdecoder\/defaultmaxheaderlistsize","title":"static var defaultMaxHeaderListSize: Int","type":"property"},{"path":"\/documentation\/niohpack\/hpackdecoder\/maxdynamictablesize","title":"static var maxDynamicTableSize: Int","type":"property"}],"path":"\/documentation\/niohpack\/hpackdecoder","title":"HPACKDecoder","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackencoder\/headerdefinition","title":"HPACKEncoder.HeaderDefinition","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackencoder\/init(allocator:usehuffmanencoding:maxdynamictablesize:)","title":"init(allocator: ByteBufferAllocator, useHuffmanEncoding: Bool, maxDynamicTableSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackencoder\/alloweddynamictablesize","title":"var allowedDynamicTableSize: Int","type":"property"},{"path":"\/documentation\/niohpack\/hpackencoder\/dynamictablesize","title":"var dynamicTableSize: Int","type":"property"},{"path":"\/documentation\/niohpack\/hpackencoder\/maximumdynamictablesize","title":"var maximumDynamicTableSize: Int","type":"property"},{"path":"\/documentation\/niohpack\/hpackencoder\/usehuffmanencoding","title":"let useHuffmanEncoding: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackencoder\/append(header:value:)","title":"func append(header: String, value: String) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/append(headers:)-10j99","title":"func append(headers: HPACKHeaders) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/append(headers:)-4nua9","title":"func append<S>(headers: S) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/append(headers:)-9ojkj","title":"func append<S>(headers: S) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/appendneverindexed(header:value:)","title":"func appendNeverIndexed(header: String, value: String) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/appendnonindexed(header:value:)","title":"func appendNonIndexed(header: String, value: String) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/beginencoding(allocator:)","title":"func beginEncoding(allocator: ByteBufferAllocator) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/encode(headers:to:)","title":"func encode(headers: HPACKHeaders, to: inout ByteBuffer) throws","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/endencoding()","title":"func endEncoding() throws -> ByteBuffer","type":"method"},{"path":"\/documentation\/niohpack\/hpackencoder\/setdynamictablesize(_:)","title":"func setDynamicTableSize(Int) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackencoder\/defaultdynamictablesize","title":"static var defaultDynamicTableSize: Int","type":"property"}],"path":"\/documentation\/niohpack\/hpackencoder","title":"HPACKEncoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/init(_:)","title":"init([(String, String)])","type":"init"},{"path":"\/documentation\/niohpack\/hpackheaders\/init(_:allocator:)","title":"init([(String, String)], allocator: ByteBufferAllocator)","type":"init"},{"path":"\/documentation\/niohpack\/hpackheaders\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, String)...)","type":"init"},{"path":"\/documentation\/niohpack\/hpackheaders\/init(httpheaders:)","title":"init(httpHeaders: HTTPHeaders)","type":"init"},{"path":"\/documentation\/niohpack\/hpackheaders\/init(httpheaders:normalizehttpheaders:)","title":"init(httpHeaders: HTTPHeaders, normalizeHTTPHeaders: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/capacity","title":"var capacity: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/add(contentsof:)","title":"func add<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/add(contentsof:indexing:)","title":"func add<S>(contentsOf: S, indexing: HPACKIndexing)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/add(name:value:indexing:)","title":"func add(name: String, value: String, indexing: HPACKIndexing)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/contains(name:)","title":"func contains(name: String) -> Bool","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/first(name:)","title":"func first(name: String) -> String?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/remove(name:)","title":"func remove(name: String)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/replaceoradd(name:value:indexing:)","title":"func replaceOrAdd(name: String, value: String, indexing: HPACKIndexing)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/subscript(_:)-8qnm8","title":"subscript(String) -> [String]","type":"subscript"},{"path":"\/documentation\/niohpack\/hpackheaders\/subscript(canonicalform:)","title":"subscript(canonicalForm _: String) -> [String]","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/index(after:)","title":"func index(after: HPACKHeaders.Index) -> HPACKHeaders.Index","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/index(before:)","title":"func index(before: HPACKHeaders.Index) -> HPACKHeaders.Index","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/niohpack\/hpackheaders\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/_(_:_:)-35vuc","title":"static func < (HPACKHeaders.Index, HPACKHeaders.Index) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'...(_:)-3xgu3","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'...(_:)-6oz1j","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niohpack\/hpackheaders\/index\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'...(_:)-3xgu3","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'...(_:)-6oz1j","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niohpack\/hpackheaders\/index\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/_(_:_:)-4b39m","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/_=(_:_:)-46prg","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/_=(_:_:)-9prwi","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/hpackheaders\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/hpackheaders\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/hpackheaders\/index","title":"HPACKHeaders.Index","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/niohpack\/hpackheaders\/endindex","title":"var endIndex: HPACKHeaders.Index","type":"property"},{"path":"\/documentation\/niohpack\/hpackheaders\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/niohpack\/hpackheaders\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/niohpack\/hpackheaders\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niohpack\/hpackheaders\/startindex","title":"var startIndex: HPACKHeaders.Index","type":"property"},{"path":"\/documentation\/niohpack\/hpackheaders\/underestimatedcount-66gxr","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/map(_:)-aiwq","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/subscript(_:)-2l6j","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/niohpack\/hpackheaders\/subscript(_:)-6hhet","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niohpack\/hpackheaders\/subscript(_:)-98idr","title":"subscript(HPACKHeaders.Index) -> HPACKHeaders.Element","type":"subscript"},{"path":"\/documentation\/niohpack\/hpackheaders\/subscript(_:)-dgph","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/niohpack\/hpackheaders\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohpack\/hpackheaders\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohpack\/hpackheaders\/==(_:_:)","title":"static func == (HPACKHeaders, HPACKHeaders) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/hpackheaders\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/niohpack\/hpackheaders\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/iterator\/next()","title":"func next() -> HPACKHeaders.Element?","type":"method"}],"path":"\/documentation\/niohpack\/hpackheaders\/iterator","title":"HPACKHeaders.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niohpack\/hpackheaders\/underestimatedcount-8h7ph","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/flatmap(_:)-1he6w","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/flatmap(_:)-nihe","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/makeiterator()","title":"func makeIterator() -> HPACKHeaders.Iterator","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/map(_:)-7663u","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohpack\/hpackheaders\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackheaders\/element","title":"HPACKHeaders.Element","type":"typealias"}],"path":"\/documentation\/niohpack\/hpackheaders\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/hpackheaders","title":"HPACKHeaders","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/indexedheadertable\/dynamictableallowedlength","title":"var dynamicTableAllowedLength: Int","type":"property"},{"path":"\/documentation\/niohpack\/indexedheadertable\/dynamictablelength","title":"var dynamicTableLength: Int","type":"property"},{"path":"\/documentation\/niohpack\/indexedheadertable\/maxdynamictablelength","title":"var maxDynamicTableLength: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohpack\/indexedheadertable\/add(headernamed:value:)-75tbr","title":"func add(headerNamed: String, value: String) throws","type":"method"},{"path":"\/documentation\/niohpack\/indexedheadertable\/add(headernamed:value:)-89jvl","title":"func add<Name, Value>(headerNamed: Name, value: Value) throws","type":"method"},{"path":"\/documentation\/niohpack\/indexedheadertable\/firstheadermatch(for:value:)","title":"func firstHeaderMatch(for: String, value: String?) -> (index: Int, matchesValue: Bool)?","type":"method"},{"path":"\/documentation\/niohpack\/indexedheadertable\/header(at:)","title":"func header(at: Int) throws -> (name: String, value: String)","type":"method"},{"path":"\/documentation\/niohpack\/indexedheadertable\/headerviews(at:)","title":"func headerViews(at: Int) throws -> (name: ByteBufferView, value: ByteBufferView)","type":"method"}],"path":"\/documentation\/niohpack\/indexedheadertable","title":"IndexedHeaderTable","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackindexing\/indexable","title":"case indexable","type":"case"},{"path":"\/documentation\/niohpack\/hpackindexing\/neverindexed","title":"case neverIndexed","type":"case"},{"path":"\/documentation\/niohpack\/hpackindexing\/nonindexable","title":"case nonIndexable","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackindexing\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/hpackindexing\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/hpackindexing\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/hpackindexing","title":"HPACKIndexing","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/huffmandecodeerror\/invalidstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/huffmandecodeerror\/invalidstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/huffmandecodeerror\/invalidstate","title":"HuffmanDecodeError.InvalidState","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/huffmandecodeerror\/invalidutf8\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/huffmandecodeerror\/invalidutf8\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/huffmandecodeerror\/invalidutf8","title":"HuffmanDecodeError.InvalidUTF8","type":"struct"}],"path":"\/documentation\/niohpack\/huffmandecodeerror","title":"HuffmanDecodeError","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/emptyliteralheaderfieldname\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/emptyliteralheaderfieldname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/emptyliteralheaderfieldname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/emptyliteralheaderfieldname","title":"NIOHPACKErrors.EmptyLiteralHeaderFieldName","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/encoderalreadyactive\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/encoderalreadyactive\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/encoderalreadyactive","title":"NIOHPACKErrors.EncoderAlreadyActive","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/encodernotstarted\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/encodernotstarted\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/encodernotstarted","title":"NIOHPACKErrors.EncoderNotStarted","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/failedtoaddindexedheader\/==(_:_:)","title":"static func == (NIOHPACKErrors.FailedToAddIndexedHeader<Name, Value>, NIOHPACKErrors.FailedToAddIndexedHeader<Name, Value>) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/failedtoaddindexedheader\/bytesneeded","title":"let bytesNeeded: Int","type":"property"},{"path":"\/documentation\/niohpack\/niohpackerrors\/failedtoaddindexedheader\/name","title":"let name: Name","type":"property"},{"path":"\/documentation\/niohpack\/niohpackerrors\/failedtoaddindexedheader\/value","title":"let value: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/failedtoaddindexedheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/failedtoaddindexedheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/failedtoaddindexedheader","title":"NIOHPACKErrors.FailedToAddIndexedHeader","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/illegaldynamictablesizechange\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/illegaldynamictablesizechange\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/illegaldynamictablesizechange","title":"NIOHPACKErrors.IllegalDynamicTableSizeChange","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/indexedheaderwithnovalue\/index","title":"let index: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/indexedheaderwithnovalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/indexedheaderwithnovalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/indexedheaderwithnovalue","title":"NIOHPACKErrors.IndexedHeaderWithNoValue","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/insufficientinput\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/insufficientinput\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/insufficientinput","title":"NIOHPACKErrors.InsufficientInput","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invaliddynamictablesize\/allowedsize","title":"let allowedSize: Int","type":"property"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invaliddynamictablesize\/requestedsize","title":"let requestedSize: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invaliddynamictablesize\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invaliddynamictablesize\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invaliddynamictablesize","title":"NIOHPACKErrors.InvalidDynamicTableSize","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderindex\/availableindex","title":"let availableIndex: Int","type":"property"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderindex\/suppliedindex","title":"let suppliedIndex: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderindex\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderindex\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderindex","title":"NIOHPACKErrors.InvalidHeaderIndex","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderstartbyte\/byte","title":"let byte: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderstartbyte\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderstartbyte\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invalidheaderstartbyte","title":"NIOHPACKErrors.InvalidHeaderStartByte","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invalidutf8data\/bytes","title":"let bytes: ByteBuffer","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/invalidutf8data\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invalidutf8data\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/invalidutf8data","title":"NIOHPACKErrors.InvalidUTF8Data","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/maxheaderlistsizeviolation\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/maxheaderlistsizeviolation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/maxheaderlistsizeviolation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/maxheaderlistsizeviolation","title":"NIOHPACKErrors.MaxHeaderListSizeViolation","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/stringlengthbeyondpayloadsize\/available","title":"let available: Int","type":"property"},{"path":"\/documentation\/niohpack\/niohpackerrors\/stringlengthbeyondpayloadsize\/length","title":"let length: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/stringlengthbeyondpayloadsize\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/stringlengthbeyondpayloadsize\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/stringlengthbeyondpayloadsize","title":"NIOHPACKErrors.StringLengthBeyondPayloadSize","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/unrepresentableinteger\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/unrepresentableinteger\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/unrepresentableinteger\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/unrepresentableinteger","title":"NIOHPACKErrors.UnrepresentableInteger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/zeroheaderindex\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohpack\/niohpackerrors\/zeroheaderindex\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohpack\/niohpackerrors\/zeroheaderindex\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohpack\/niohpackerrors\/zeroheaderindex","title":"NIOHPACKErrors.ZeroHeaderIndex","type":"struct"}],"path":"\/documentation\/niohpack\/niohpackerrors","title":"NIOHPACKErrors","type":"enum"}],"path":"\/documentation\/niohpack","title":"NIOHPACK","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoder\/init(leftoverbytesstrategy:)","title":"convenience init(leftOverBytesStrategy: RemoveAfterUpgradeStrategy)","type":"init"},{"path":"\/documentation\/niohttp1\/httpdecoder\/init(leftoverbytesstrategy:informationalresponsestrategy:)","title":"init(leftOverBytesStrategy: RemoveAfterUpgradeStrategy, informationalResponseStrategy: NIOInformationalResponseStrategy)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"path":"\/documentation\/niohttp1\/httpdecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"path":"\/documentation\/niohttp1\/httpdecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httpdecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoder\/inboundout","title":"HTTPDecoder.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpdecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp1\/httpdecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoder\/write(data:)","title":"func write(data: HTTPClientRequestPart)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoder\/outboundin","title":"HTTPDecoder.OutboundIn","type":"typealias"}],"path":"\/documentation\/niohttp1\/httpdecoder\/writeobservingbytetomessagedecoder-implementations","title":"WriteObservingByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpdecoder","title":"HTTPDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/outboundin","title":"HTTPRequestEncoder.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/outboundout","title":"HTTPRequestEncoder.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/httprequestencoder\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp1\/httprequestencoder\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequestencoder\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttp1\/httprequestencoder\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httprequestencoder","title":"HTTPRequestEncoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/outboundin","title":"HTTPResponseEncoder.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/outboundout","title":"HTTPResponseEncoder.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/httpresponseencoder\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp1\/httpresponseencoder\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponseencoder\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttp1\/httpresponseencoder\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpresponseencoder","title":"HTTPResponseEncoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/read(context:)","title":"func read(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/userinboundeventtriggered(context:event:)","title":"func userInboundEventTriggered(context: ChannelHandlerContext, event: Any)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/inboundin","title":"HTTPServerPipelineHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/inboundout","title":"HTTPServerPipelineHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/outboundin","title":"HTTPServerPipelineHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/outboundout","title":"HTTPServerPipelineHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverpipelinehandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpserverpipelinehandler","title":"HTTPServerPipelineHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/inboundin","title":"HTTPServerProtocolErrorHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/inboundout","title":"HTTPServerProtocolErrorHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/outboundin","title":"HTTPServerProtocolErrorHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/outboundout","title":"HTTPServerProtocolErrorHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler","title":"HTTPServerProtocolErrorHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/init(upgraders:httpencoder:extrahttphandlers:upgradecompletionhandler:)","title":"init(upgraders: [HTTPServerProtocolUpgrader], httpEncoder: HTTPResponseEncoder, extraHTTPHandlers: [RemovableChannelHandler], upgradeCompletionHandler: (ChannelHandlerContext) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/inboundin","title":"HTTPServerUpgradeHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/inboundout","title":"HTTPServerUpgradeHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/outboundout","title":"HTTPServerUpgradeHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverupgradehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpserverupgradehandler","title":"HTTPServerUpgradeHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/init(maxcontentlength:)","title":"init(maxContentLength: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/inboundin","title":"NIOHTTPClientResponseAggregator.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/inboundout","title":"NIOHTTPClientResponseAggregator.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpclientresponseaggregator","title":"NIOHTTPClientResponseAggregator","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/init(upgraders:httphandlers:upgradecompletionhandler:)","title":"init(upgraders: [NIOHTTPClientProtocolUpgrader], httpHandlers: [RemovableChannelHandler], upgradeCompletionHandler: (ChannelHandlerContext) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/inboundin","title":"NIOHTTPClientUpgradeHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/inboundout","title":"NIOHTTPClientUpgradeHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/outboundin","title":"NIOHTTPClientUpgradeHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/outboundout","title":"NIOHTTPClientUpgradeHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradehandler","title":"NIOHTTPClientUpgradeHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/init(maxcontentlength:closeonexpectationfailed:)","title":"init(maxContentLength: Int, closeOnExpectationFailed: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/inboundin","title":"NIOHTTPServerRequestAggregator.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/inboundout","title":"NIOHTTPServerRequestAggregator.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/outboundout","title":"NIOHTTPServerRequestAggregator.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpserverrequestaggregator","title":"NIOHTTPServerRequestAggregator","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolupgrader\/requiredupgradeheaders","title":"var requiredUpgradeHeaders: [String]","type":"property"},{"path":"\/documentation\/niohttp1\/httpserverprotocolupgrader\/supportedprotocol","title":"var supportedProtocol: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverprotocolupgrader\/buildupgraderesponse(channel:upgraderequest:initialresponseheaders:)","title":"func buildUpgradeResponse(channel: Channel, upgradeRequest: HTTPRequestHead, initialResponseHeaders: HTTPHeaders) -> EventLoopFuture<HTTPHeaders>","type":"method"},{"path":"\/documentation\/niohttp1\/httpserverprotocolupgrader\/upgrade(context:upgraderequest:)","title":"func upgrade(context: ChannelHandlerContext, upgradeRequest: HTTPRequestHead) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/niohttp1\/httpserverprotocolupgrader","title":"HTTPServerProtocolUpgrader","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/requiredupgradeheaders","title":"var requiredUpgradeHeaders: [String]","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/supportedprotocol","title":"var supportedProtocol: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/addcustom(upgraderequestheaders:)","title":"func addCustom(upgradeRequestHeaders: inout HTTPHeaders)","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/shouldallowupgrade(upgraderesponse:)","title":"func shouldAllowUpgrade(upgradeResponse: HTTPResponseHead) -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/upgrade(context:upgraderesponse:)","title":"func upgrade(context: ChannelHandlerContext, upgradeResponse: HTTPResponseHead) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/niohttp1\/niohttpclientprotocolupgrader","title":"NIOHTTPClientProtocolUpgrader","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/maxstale-swift.struct\/seconds","title":"var seconds: Int?","type":"property"}],"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/maxstale-swift.struct","title":"HTTPHeaders.CacheControl.MaxStale","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/init(mustrevalidated:nocache:nostore:notransform:ispublic:isprivate:proxyrevalidate:onlyifcached:immutable:maxage:smaxage:maxstale:minfresh:stalewhilerevalidate:staleiferror:)","title":"init(mustRevalidated: Bool, noCache: Bool, noStore: Bool, noTransform: Bool, isPublic: Bool, isPrivate: Bool, proxyRevalidate: Bool, onlyIfCached: Bool, immutable: Bool, maxAge: Int?, sMaxAge: Int?, maxStale: HTTPHeaders.CacheControl.MaxStale?, minFresh: Int?, staleWhileRevalidate: Int?, staleIfError: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/immutable","title":"var immutable: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/isprivate","title":"var isPrivate: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/ispublic","title":"var isPublic: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/maxage","title":"var maxAge: Int?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/maxstale-swift.property","title":"var maxStale: HTTPHeaders.CacheControl.MaxStale?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/minfresh","title":"var minFresh: Int?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/mustrevalidate","title":"var mustRevalidate: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/nocache","title":"var noCache: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/nostore","title":"var noStore: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/notransform","title":"var noTransform: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/onlyifcached","title":"var onlyIfCached: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/proxyrevalidate","title":"var proxyRevalidate: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/smaxage","title":"var sMaxAge: Int?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/staleiferror","title":"var staleIfError: Int?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/stalewhilerevalidate","title":"var staleWhileRevalidate: Int?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/serialize()","title":"func serialize() -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct\/parse(_:)","title":"static func parse(String) -> HTTPHeaders.CacheControl?","type":"method"}],"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.struct","title":"HTTPHeaders.CacheControl","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/init(value:)","title":"init(value: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/value","title":"let value: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/close","title":"static let close: HTTPHeaders.Connection","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/keepalive","title":"static let keepAlive: HTTPHeaders.Connection","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.struct","title":"HTTPHeaders.Connection","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/value-swift.struct\/attachment","title":"static let attachment: HTTPHeaders.ContentDisposition.Value","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/value-swift.struct\/formdata","title":"static let formData: HTTPHeaders.ContentDisposition.Value","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/value-swift.struct\/inline","title":"static let inline: HTTPHeaders.ContentDisposition.Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/value-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/value-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/value-swift.struct","title":"HTTPHeaders.ContentDisposition.Value","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/init(_:name:filename:)","title":"init(HTTPHeaders.ContentDisposition.Value, name: String?, filename: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/filename","title":"var filename: String?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct\/value-swift.property","title":"var value: HTTPHeaders.ContentDisposition.Value","type":"property"}],"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.struct","title":"HTTPHeaders.ContentDisposition","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/init(unit:range:)","title":"init(unit: HTTPHeaders.RangeUnit, range: HTTPHeaders.ContentRange.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/range","title":"let range: HTTPHeaders.ContentRange.Value","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/unit","title":"let unit: HTTPHeaders.RangeUnit","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/serialize()","title":"func serialize() -> String","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value\/any(size:)","title":"case any(size: Int)","type":"case"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value\/within(start:end:)","title":"case within(start: Int, end: Int)","type":"case"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value\/withinwithlimit(start:end:limit:)","title":"case withinWithLimit(start: Int, end: Int, limit: Int)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value\/serialize()","title":"func serialize() -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value\/from(responsestr:)","title":"static func from<T>(responseStr: T) -> HTTPHeaders.ContentRange.Value?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/value","title":"HTTPHeaders.ContentRange.Value","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.struct","title":"HTTPHeaders.ContentRange","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/expires-swift.struct\/expires","title":"let expires: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/expires-swift.struct\/serialize()","title":"func serialize() -> String","type":"method"}],"path":"\/documentation\/niohttp1\/httpheaders\/expires-swift.struct","title":"HTTPHeaders.Expires","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/forwarded-swift.struct\/init(by:for:host:proto:)","title":"init(by: String?, for: String?, host: String?, proto: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/forwarded-swift.struct\/by","title":"var by: String?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/forwarded-swift.struct\/for","title":"var `for`: String?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/forwarded-swift.struct\/host","title":"var host: String?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/forwarded-swift.struct\/proto","title":"var proto: String?","type":"property"}],"path":"\/documentation\/niohttp1\/httpheaders\/forwarded-swift.struct","title":"HTTPHeaders.Forwarded","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/lastmodified-swift.struct\/value","title":"let value: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/lastmodified-swift.struct\/serialize()","title":"func serialize() -> String","type":"method"}],"path":"\/documentation\/niohttp1\/httpheaders\/lastmodified-swift.struct","title":"HTTPHeaders.LastModified","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/rawvalue","title":"let rawValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/about","title":"static let about: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/alternate","title":"static let alternate: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/appendix","title":"static let appendix: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/archives","title":"static let archives: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/author","title":"static let author: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/blockedby","title":"static let blockedBy: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/bookmark","title":"static let bookmark: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/canonical","title":"static let canonical: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/chapter","title":"static let chapter: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/citeas","title":"static let citeAs: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/collection","title":"static let collection: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/contents","title":"static let contents: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/copyright","title":"static let copyright: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/current","title":"static let current: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/describedby","title":"static let describedBy: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/describes","title":"static let describes: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/disclosure","title":"static let disclosure: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/duplicate","title":"static let duplicate: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/edit","title":"static let edit: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/editform","title":"static let editForm: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/editmedia","title":"static let editMedia: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/enclosure","title":"static let enclosure: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/external","title":"static let external: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/first","title":"static let first: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/glossary","title":"static let glossary: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/help","title":"static let help: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/icon","title":"static let icon: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/index","title":"static let index: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/item","title":"static let item: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/last","title":"static let last: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/latestversion","title":"static let latestVersion: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/license","title":"static let license: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/next","title":"static let next: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/nofollow","title":"static let noFollow: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/noopener","title":"static let noOpener: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/noreferer","title":"static let noReferer: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/opener","title":"static let opener: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/p3pv1","title":"static let p3pv1: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/prev","title":"static let prev: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/preview","title":"static let preview: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/previous","title":"static let previous: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/privacypolicy","title":"static let privacyPolicy: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/related","title":"static let related: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/section","title":"static let section: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/self","title":"static let `self`: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/service","title":"static let service: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/start","title":"static let start: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/status","title":"static let status: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/stylesheet","title":"static let stylesheet: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/subsection","title":"static let subsection: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/tag","title":"static let tag: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/termsofservice","title":"static let termsOfService: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/type","title":"static let type: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/up","title":"static let up: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/via","title":"static let via: HTTPHeaders.Link.Relation","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.struct","title":"HTTPHeaders.Link.Relation","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/init(uri:relation:attributes:)","title":"init(uri: String, relation: HTTPHeaders.Link.Relation, attributes: [String : String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/attributes","title":"var attributes: [String : String]","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/relation-swift.property","title":"var relation: HTTPHeaders.Link.Relation","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/link\/uri","title":"var uri: String","type":"property"}],"path":"\/documentation\/niohttp1\/httpheaders\/link","title":"HTTPHeaders.Link","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/init(_:)","title":"init(String)","type":"init"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/aim","title":"static let aIM: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accept","title":"static let accept: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptadditions","title":"static let acceptAdditions: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptcharset","title":"static let acceptCharset: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptdatetime","title":"static let acceptDatetime: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptencoding","title":"static let acceptEncoding: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptfeatures","title":"static let acceptFeatures: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptlanguage","title":"static let acceptLanguage: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptpatch","title":"static let acceptPatch: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptpost","title":"static let acceptPost: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/acceptranges","title":"static let acceptRanges: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrol","title":"static let accessControl: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolallowcredentials","title":"static let accessControlAllowCredentials: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolallowheaders","title":"static let accessControlAllowHeaders: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolallowmethods","title":"static let accessControlAllowMethods: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolalloworigin","title":"static let accessControlAllowOrigin: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolexpose","title":"static let accessControlExpose: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolmaxage","title":"static let accessControlMaxAge: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolrequestheaders","title":"static let accessControlRequestHeaders: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/accesscontrolrequestmethod","title":"static let accessControlRequestMethod: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/age","title":"static let age: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/allow","title":"static let allow: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/alpn","title":"static let alpn: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/altsvc","title":"static let altSvc: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/altused","title":"static let altUsed: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/alternates","title":"static let alternates: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/applytoredirectref","title":"static let applyToRedirectRef: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/authenticationcontrol","title":"static let authenticationControl: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/authenticationinfo","title":"static let authenticationInfo: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/authorization","title":"static let authorization: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cext","title":"static let cExt: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cman","title":"static let cMan: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/copt","title":"static let cOpt: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cpep","title":"static let cPEP: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cpepinfo","title":"static let cPEPInfo: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cachecontrol","title":"static let cacheControl: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/caldavtimezones","title":"static let calDAVTimezones: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/close","title":"static let close: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/compliance","title":"static let compliance: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/connection","title":"static let connection: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentbase","title":"static let contentBase: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentdisposition","title":"static let contentDisposition: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentencoding","title":"static let contentEncoding: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentid","title":"static let contentID: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentlanguage","title":"static let contentLanguage: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentlength","title":"static let contentLength: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentlocation","title":"static let contentLocation: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentmd5","title":"static let contentMD5: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentrange","title":"static let contentRange: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentscripttype","title":"static let contentScriptType: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentsecuritypolicy","title":"static let contentSecurityPolicy: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentstyletype","title":"static let contentStyleType: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contenttransferencoding","title":"static let contentTransferEncoding: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contenttype","title":"static let contentType: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/contentversion","title":"static let contentVersion: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cookie","title":"static let cookie: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cookie2","title":"static let cookie2: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/cost","title":"static let cost: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/dasl","title":"static let dasl: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/date","title":"static let date: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/dav","title":"static let dav: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/defaultstyle","title":"static let defaultStyle: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/deltabase","title":"static let deltaBase: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/depth","title":"static let depth: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/derivedfrom","title":"static let derivedFrom: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/destination","title":"static let destination: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/differentialid","title":"static let differentialID: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/digest","title":"static let digest: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/etag","title":"static let eTag: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ediintfeatures","title":"static let ediintFeatures: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/expect","title":"static let expect: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/expires","title":"static let expires: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ext","title":"static let ext: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/forwarded","title":"static let forwarded: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/from","title":"static let from: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/getprofile","title":"static let getProfile: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/hobareg","title":"static let hobareg: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/host","title":"static let host: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/http2settings","title":"static let http2Settings: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/if","title":"static let `if`: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ifmatch","title":"static let ifMatch: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ifmodifiedsince","title":"static let ifModifiedSince: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ifnonematch","title":"static let ifNoneMatch: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ifrange","title":"static let ifRange: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ifscheduletagmatch","title":"static let ifScheduleTagMatch: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ifunmodifiedsince","title":"static let ifUnmodifiedSince: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/im","title":"static let im: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/keepalive","title":"static let keepAlive: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/label","title":"static let label: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/lastmodified","title":"static let lastModified: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/link","title":"static let link: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/location","title":"static let location: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/locktoken","title":"static let lockToken: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/man","title":"static let man: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/maxforwards","title":"static let maxForwards: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/mementodatetime","title":"static let mementoDatetime: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/messageid","title":"static let messageID: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/meter","title":"static let meter: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/methodcheck","title":"static let methodCheck: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/methodcheckexpires","title":"static let methodCheckExpires: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/mimeversion","title":"static let mimeVersion: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/negotiate","title":"static let negotiate: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/noncompliance","title":"static let nonCompliance: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/opt","title":"static let opt: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/optional","title":"static let optional: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/optionalwwwauthenticate","title":"static let optionalWWWAuthenticate: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/orderingtype","title":"static let orderingType: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/origin","title":"static let origin: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/overwrite","title":"static let overwrite: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/p3p","title":"static let p3p: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/pep","title":"static let pep: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/pepinfo","title":"static let pepInfo: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/picslabel","title":"static let picsLabel: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/position","title":"static let position: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/pragma","title":"static let pragma: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/prefer","title":"static let prefer: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/preferenceapplied","title":"static let preferenceApplied: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/profileobject","title":"static let profileObject: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/protocol","title":"static let `protocol`: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/protocolinfo","title":"static let protocolInfo: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/protocolquery","title":"static let protocolQuery: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/protocolrequest","title":"static let protocolRequest: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/proxyauthenticate","title":"static let proxyAuthenticate: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/proxyauthenticationinfo","title":"static let proxyAuthenticationInfo: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/proxyauthorization","title":"static let proxyAuthorization: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/proxyfeatures","title":"static let proxyFeatures: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/proxyinstruction","title":"static let proxyInstruction: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/public","title":"static let `public`: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/publickeypins","title":"static let publicKeyPins: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/publickeypinsreportonly","title":"static let publicKeyPinsReportOnly: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/range","title":"static let range: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/redirectref","title":"static let redirectRef: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/referer","title":"static let referer: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/refererroot","title":"static let refererRoot: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/resolutionhint","title":"static let resolutionHint: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/resolverlocation","title":"static let resolverLocation: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/retryafter","title":"static let retryAfter: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/safe","title":"static let safe: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/schedulereply","title":"static let scheduleReply: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/scheduletag","title":"static let scheduleTag: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/secwebsocketaccept","title":"static let secWebSocketAccept: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/secwebsocketextensions","title":"static let secWebSocketExtensions: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/secwebsocketkey","title":"static let secWebSocketKey: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/secwebsocketprotocol","title":"static let secWebSocketProtocol: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/secwebsocketversion","title":"static let secWebSocketVersion: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/securityscheme","title":"static let securityScheme: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/server","title":"static let server: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/setcookie","title":"static let setCookie: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/setcookie2","title":"static let setCookie2: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/setprofile","title":"static let setProfile: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/slug","title":"static let slug: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/soapaction","title":"static let soapAction: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/statusuri","title":"static let statusURI: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/stricttransportsecurity","title":"static let strictTransportSecurity: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/subok","title":"static let subOK: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/subst","title":"static let subst: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/surrogatecapability","title":"static let surrogateCapability: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/surrogatecontrol","title":"static let surrogateControl: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/tcn","title":"static let tcn: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/te","title":"static let te: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/timeout","title":"static let timeout: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/title","title":"static let title: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/topic","title":"static let topic: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/trailer","title":"static let trailer: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/transferencoding","title":"static let transferEncoding: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/ttl","title":"static let ttl: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/uacolor","title":"static let uaColor: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/uamedia","title":"static let uaMedia: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/uapixels","title":"static let uaPixels: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/uaresolution","title":"static let uaResolution: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/uawindowpixels","title":"static let uaWindowpixels: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/upgrade","title":"static let upgrade: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/urgency","title":"static let urgency: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/uri","title":"static let uri: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/useragent","title":"static let userAgent: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/variantvary","title":"static let variantVary: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/vary","title":"static let vary: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/version","title":"static let version: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/via","title":"static let via: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/wantdigest","title":"static let wantDigest: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/warning","title":"static let warning: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/wwwauthenticate","title":"static let wwwAuthenticate: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xcontenttypeoptions","title":"static let xContentTypeOptions: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xdeviceaccept","title":"static let xDeviceAccept: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xdeviceacceptcharset","title":"static let xDeviceAcceptCharset: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xdeviceacceptencoding","title":"static let xDeviceAcceptEncoding: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xdeviceacceptlanguage","title":"static let xDeviceAcceptLanguage: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xdeviceuseragent","title":"static let xDeviceUserAgent: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xforwardedfor","title":"static let xForwardedFor: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xforwardedhost","title":"static let xForwardedHost: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xforwardedproto","title":"static let xForwardedProto: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xframeoptions","title":"static let xFrameOptions: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xrequestedwith","title":"static let xRequestedWith: HTTPHeaders.Name","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/xssprotection","title":"static let xssProtection: HTTPHeaders.Name","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/name\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/name\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/name","title":"HTTPHeaders.Name","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/init(unit:ranges:)","title":"init(unit: HTTPHeaders.RangeUnit, ranges: [HTTPHeaders.Range.Value])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/ranges","title":"let ranges: [HTTPHeaders.Range.Value]","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/unit","title":"let unit: HTTPHeaders.RangeUnit","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/serialize()","title":"func serialize() -> String","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/start(value:)","title":"case start(value: Int)","type":"case"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/tail(value:)","title":"case tail(value: Int)","type":"case"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/within(start:end:)","title":"case within(start: Int, end: Int)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/asresponsecontentrange(limit:)","title":"func asResponseContentRange(limit: Int) -> HTTPHeaders.ContentRange.Value","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/serialize()","title":"func serialize() -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/from(requeststr:)","title":"static func from<T>(requestStr: T) -> HTTPHeaders.Range.Value?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/value","title":"HTTPHeaders.Range.Value","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.struct","title":"HTTPHeaders.Range","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/init(_:)","title":"init([(String, String)])","type":"init"},{"path":"\/documentation\/niohttp1\/httpheaders\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, String)...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/accept","title":"var accept: [HTTPMediaTypePreference]","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/basicauthorization","title":"var basicAuthorization: BasicAuthorization?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/bearerauthorization","title":"var bearerAuthorization: BearerAuthorization?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cachecontrol-swift.property","title":"var cacheControl: HTTPHeaders.CacheControl?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/capacity","title":"var capacity: Int","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/connection-swift.property","title":"var connection: HTTPHeaders.Connection?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentdisposition-swift.property","title":"var contentDisposition: HTTPHeaders.ContentDisposition?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contentrange-swift.property","title":"var contentRange: HTTPHeaders.ContentRange?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/contenttype","title":"var contentType: HTTPMediaType?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/cookie","title":"var cookie: HTTPCookies?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/expires-swift.property","title":"var expires: HTTPHeaders.Expires?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/forwarded-swift.property","title":"var forwarded: [HTTPHeaders.Forwarded]","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/lastmodified-swift.property","title":"var lastModified: HTTPHeaders.LastModified?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/links","title":"var links: [HTTPHeaders.Link]?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/range-swift.property","title":"var range: HTTPHeaders.Range?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/setcookie","title":"var setCookie: HTTPCookies?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/add(contentsof:)-2wno0","title":"func add(contentsOf: HTTPHeaders)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/add(contentsof:)-9wsoh","title":"func add<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/add(name:value:)-4hjoz","title":"func add(name: String, value: String)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/add(name:value:)-67ncn","title":"func add(name: HTTPHeaders.Name, value: String)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/contains(name:)-4tsf6","title":"func contains(name: HTTPHeaders.Name) -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/contains(name:)-8zzv7","title":"func contains(name: String) -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/expirationdate(requestsentat:)","title":"func expirationDate(requestSentAt: Date) -> Date?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/first(name:)-96d9y","title":"func first(name: String) -> String?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/first(name:)-jpjb","title":"func first(name: HTTPHeaders.Name) -> String?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/remove(name:)-7vb1p","title":"func remove(name: HTTPHeaders.Name)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/remove(name:)-hao4","title":"func remove(name: String)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/replaceoradd(name:value:)-6k7me","title":"func replaceOrAdd(name: String, value: String)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/replaceoradd(name:value:)-72rad","title":"func replaceOrAdd(name: HTTPHeaders.Name, value: String)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(_:)-29e5a","title":"subscript(HTTPHeaders.Name) -> [String]","type":"subscript"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(_:)-5eqod","title":"subscript(String) -> [String]","type":"subscript"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(canonicalform:)-2ycn","title":"subscript(canonicalForm _: String) -> [Substring]","type":"subscript"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(canonicalform:)-8b4xr","title":"subscript(canonicalForm _: HTTPHeaders.Name) -> [Substring]","type":"subscript"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/rangeunit\/bytes","title":"case bytes","type":"case"},{"path":"\/documentation\/niohttp1\/httpheaders\/rangeunit\/custom(value:)","title":"case custom(value: String)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/rangeunit\/serialize()","title":"func serialize() -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/rangeunit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/rangeunit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/rangeunit","title":"HTTPHeaders.RangeUnit","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/index(before:)","title":"func index(before: HTTPHeaders.Index) -> HTTPHeaders.Index","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/niohttp1\/httpheaders\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/_(_:_:)-4lnwa","title":"static func < (HTTPHeaders.Index, HTTPHeaders.Index) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'...(_:)-2agae","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'...(_:)-8lv69","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/index\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'...(_:)-2agae","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'...(_:)-8lv69","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/index\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/_(_:_:)-3brjl","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/_=(_:_:)-44wqr","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/_=(_:_:)-7jsno","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders\/index","title":"HTTPHeaders.Index","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/endindex","title":"var endIndex: HTTPHeaders.Index","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/startindex","title":"var startIndex: HTTPHeaders.Index","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/underestimatedcount-28ve6","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/index(after:)","title":"func index(after: HTTPHeaders.Index) -> HTTPHeaders.Index","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/map(_:)-5p9kr","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(_:)-4pb54","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(_:)-5f2os","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(_:)-mi1v","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niohttp1\/httpheaders\/subscript(_:)-ostv","title":"subscript(HTTPHeaders.Index) -> HTTPHeaders.Element","type":"subscript"}],"path":"\/documentation\/niohttp1\/httpheaders\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niohttp1\/httpheaders\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/niohttp1\/httpheaders\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/niohttp1\/httpheaders\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp1\/httpheaders\/==(_:_:)","title":"static func == (HTTPHeaders, HTTPHeaders) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpheaders\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/niohttp1\/httpheaders\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niohttp1\/httpheaders\/underestimatedcount-ru5c","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/flatmap(_:)-1mnen","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/flatmap(_:)-47fez","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/map(_:)-39i2l","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp1\/httpheaders\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpheaders\/element","title":"HTTPHeaders.Element","type":"typealias"}],"path":"\/documentation\/niohttp1\/httpheaders\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpheaders","title":"HTTPHeaders","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequesthead\/==(_:_:)","title":"static func == (HTTPRequestHead, HTTPRequestHead) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequesthead\/init(version:method:uri:)","title":"init(version: HTTPVersion, method: HTTPMethod, uri: String)","type":"init"},{"path":"\/documentation\/niohttp1\/httprequesthead\/init(version:method:uri:headers:)","title":"init(version: HTTPVersion, method: HTTPMethod, uri: String, headers: HTTPHeaders)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequesthead\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/niohttp1\/httprequesthead\/iskeepalive","title":"var isKeepAlive: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httprequesthead\/method","title":"var method: HTTPMethod","type":"property"},{"path":"\/documentation\/niohttp1\/httprequesthead\/uri","title":"var uri: String","type":"property"},{"path":"\/documentation\/niohttp1\/httprequesthead\/version","title":"var version: HTTPVersion","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequesthead\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohttp1\/httprequesthead\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httprequesthead\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httprequesthead\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httprequesthead","title":"HTTPRequestHead","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/==(_:_:)","title":"static func == (HTTPResponseHead, HTTPResponseHead) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/init(version:status:headers:)","title":"init(version: HTTPVersion, status: HTTPResponseStatus, headers: HTTPHeaders)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/iskeepalive","title":"var isKeepAlive: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/status","title":"var status: HTTPResponseStatus","type":"property"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/version","title":"var version: HTTPVersion","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohttp1\/httpresponsehead\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsehead\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpresponsehead\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpresponsehead","title":"HTTPResponseHead","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpversion\/init(major:minor:)","title":"init(major: Int, minor: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpversion\/major","title":"var major: Int","type":"property"},{"path":"\/documentation\/niohttp1\/httpversion\/minor","title":"var minor: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpversion\/http0_9","title":"static let http0_9: HTTPVersion","type":"property"},{"path":"\/documentation\/niohttp1\/httpversion\/http1_0","title":"static let http1_0: HTTPVersion","type":"property"},{"path":"\/documentation\/niohttp1\/httpversion\/http1_1","title":"static let http1_1: HTTPVersion","type":"property"},{"path":"\/documentation\/niohttp1\/httpversion\/http2","title":"static let http2: HTTPVersion","type":"property"},{"path":"\/documentation\/niohttp1\/httpversion\/http3","title":"static let http3: HTTPVersion","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpversion\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohttp1\/httpversion\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpversion","title":"HTTPVersion","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponsefull\/init(head:body:)","title":"init(head: HTTPResponseHead, body: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponsefull\/body","title":"var body: ByteBuffer?","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientresponsefull\/head","title":"var head: HTTPResponseHead","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientresponsefull\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/niohttpclientresponsefull\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpclientresponsefull","title":"NIOHTTPClientResponseFull","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/invalidhttpordering","title":"static let invalidHTTPOrdering: NIOHTTPClientUpgradeError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/receivedresponseafterupgradecompleted","title":"static let receivedResponseAfterUpgradeCompleted: NIOHTTPClientUpgradeError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/receivedresponsebeforerequestsent","title":"static let receivedResponseBeforeRequestSent: NIOHTTPClientUpgradeError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/responseprotocolnotfound","title":"static let responseProtocolNotFound: NIOHTTPClientUpgradeError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/upgraderdeniedupgrade","title":"static let upgraderDeniedUpgrade: NIOHTTPClientUpgradeError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/writingtohandlerafterupgradecompleted","title":"static let writingToHandlerAfterUpgradeCompleted: NIOHTTPClientUpgradeError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/writingtohandlerafterupgradefailed","title":"static let writingToHandlerAfterUpgradeFailed: NIOHTTPClientUpgradeError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/writingtohandlerduringupgrade","title":"static let writingToHandlerDuringUpgrade: NIOHTTPClientUpgradeError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpclientupgradeerror","title":"NIOHTTPClientUpgradeError","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpdecodererror\/unsolicitedresponse","title":"static let unsolicitedResponse: NIOHTTPDecoderError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpdecodererror\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niohttp1\/niohttpdecodererror\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpdecodererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/niohttpdecodererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpdecodererror","title":"NIOHTTPDecoderError","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/connectionclosed","title":"static let connectionClosed: NIOHTTPObjectAggregatorError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/endingignoredmessage","title":"static let endingIgnoredMessage: NIOHTTPObjectAggregatorError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/frametoolong","title":"static let frameTooLong: NIOHTTPObjectAggregatorError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/unexpectedmessagebody","title":"static let unexpectedMessageBody: NIOHTTPObjectAggregatorError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/unexpectedmessageend","title":"static let unexpectedMessageEnd: NIOHTTPObjectAggregatorError","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/unexpectedmessagehead","title":"static let unexpectedMessageHead: NIOHTTPObjectAggregatorError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorerror","title":"NIOHTTPObjectAggregatorError","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorevent\/httpexpectationfailed","title":"static let httpExpectationFailed: NIOHTTPObjectAggregatorEvent","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorevent\/httpframetoolong","title":"static let httpFrameTooLong: NIOHTTPObjectAggregatorEvent","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpobjectaggregatorevent","title":"NIOHTTPObjectAggregatorEvent","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestfull\/init(head:body:)","title":"init(head: HTTPRequestHead, body: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestfull\/body","title":"var body: ByteBuffer?","type":"property"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestfull\/head","title":"var head: HTTPRequestHead","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/niohttpserverrequestfull\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/niohttpserverrequestfull\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/niohttpserverrequestfull","title":"NIOHTTPServerRequestFull","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/nioinformationalresponsestrategy\/drop","title":"static let drop: NIOInformationalResponseStrategy","type":"property"},{"path":"\/documentation\/niohttp1\/nioinformationalresponsestrategy\/forward","title":"static let forward: NIOInformationalResponseStrategy","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/nioinformationalresponsestrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/nioinformationalresponsestrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/nioinformationalresponsestrategy","title":"NIOInformationalResponseStrategy","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpclientrequestpart","title":"HTTPClientRequestPart","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpclientresponsepart","title":"HTTPClientResponsePart","type":"typealias"},{"path":"\/documentation\/niohttp1\/httprequestdecoder","title":"HTTPRequestDecoder","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpresponsedecoder","title":"HTTPResponseDecoder","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverrequestpart","title":"HTTPServerRequestPart","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpserverresponsepart","title":"HTTPServerResponsePart","type":"typealias"},{"path":"\/documentation\/niohttp1\/httpupgradeconfiguration","title":"HTTPUpgradeConfiguration","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpclientupgradeconfiguration","title":"NIOHTTPClientUpgradeConfiguration","type":"typealias"},{"path":"\/documentation\/niohttp1\/niohttpserverupgradeconfiguration","title":"NIOHTTPServerUpgradeConfiguration","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoderkind\/request","title":"case request","type":"case"},{"path":"\/documentation\/niohttp1\/httpdecoderkind\/response","title":"case response","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpdecoderkind\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpdecoderkind\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpdecoderkind","title":"HTTPDecoderKind","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpmethod\/acl","title":"case ACL","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/bind","title":"case BIND","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/checkout","title":"case CHECKOUT","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/connect","title":"case CONNECT","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/copy","title":"case COPY","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/delete","title":"case DELETE","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/get","title":"case GET","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/head","title":"case HEAD","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/link","title":"case LINK","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/lock","title":"case LOCK","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/merge","title":"case MERGE","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/mkactivity","title":"case MKACTIVITY","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/mkcalendar","title":"case MKCALENDAR","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/mkcol","title":"case MKCOL","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/move","title":"case MOVE","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/msearch","title":"case MSEARCH","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/notify","title":"case NOTIFY","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/options","title":"case OPTIONS","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/patch","title":"case PATCH","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/post","title":"case POST","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/propfind","title":"case PROPFIND","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/proppatch","title":"case PROPPATCH","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/purge","title":"case PURGE","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/put","title":"case PUT","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/raw(value:)","title":"case RAW(value: String)","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/rebind","title":"case REBIND","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/report","title":"case REPORT","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/search","title":"case SEARCH","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/source","title":"case SOURCE","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/subscribe","title":"case SUBSCRIBE","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/trace","title":"case TRACE","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/unbind","title":"case UNBIND","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/unlink","title":"case UNLINK","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/unlock","title":"case UNLOCK","type":"case"},{"path":"\/documentation\/niohttp1\/httpmethod\/unsubscribe","title":"case UNSUBSCRIBE","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpmethod\/string","title":"var string: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpmethod\/init(rawvalue:)","title":"init(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpmethod\/rawvalue","title":"var rawValue: String","type":"property"}],"path":"\/documentation\/niohttp1\/httpmethod\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpmethod","title":"HTTPMethod","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpparsererror\/closedconnection","title":"case closedConnection","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/headeroverflow","title":"case headerOverflow","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidcharactersused","title":"case invalidCharactersUsed","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidchunksize","title":"case invalidChunkSize","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidconstant","title":"case invalidConstant","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidcontentlength","title":"case invalidContentLength","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalideofstate","title":"case invalidEOFState","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidfragment","title":"case invalidFragment","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidheadertoken","title":"case invalidHeaderToken","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidhost","title":"case invalidHost","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidinternalstate","title":"case invalidInternalState","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidmethod","title":"case invalidMethod","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidpath","title":"case invalidPath","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidport","title":"case invalidPort","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidquerystring","title":"case invalidQueryString","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidstatus","title":"case invalidStatus","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidurl","title":"case invalidURL","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/invalidversion","title":"case invalidVersion","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/lfexpected","title":"case lfExpected","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/paused","title":"case paused","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/strictmodeassertion","title":"case strictModeAssertion","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/trailinggarbage","title":"case trailingGarbage","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/unexpectedcontentlength","title":"case unexpectedContentLength","type":"case"},{"path":"\/documentation\/niohttp1\/httpparsererror\/unknown","title":"case unknown","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpparsererror\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niohttp1\/httpparsererror\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpparsererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpparsererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpparsererror","title":"HTTPParserError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httppart\/body(_:)","title":"case body(BodyT)","type":"case"},{"path":"\/documentation\/niohttp1\/httppart\/end(_:)","title":"case end(HTTPHeaders?)","type":"case"},{"path":"\/documentation\/niohttp1\/httppart\/head(_:)","title":"case head(HeadT)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httppart\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohttp1\/httppart\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httppart\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httppart\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httppart","title":"HTTPPart","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/accepted","title":"case accepted","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/alreadyreported","title":"case alreadyReported","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/badgateway","title":"case badGateway","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/badrequest","title":"case badRequest","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/conflict","title":"case conflict","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/continue","title":"case `continue`","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/created","title":"case created","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/custom(code:reasonphrase:)","title":"case custom(code: UInt, reasonPhrase: String)","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/expectationfailed","title":"case expectationFailed","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/faileddependency","title":"case failedDependency","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/forbidden","title":"case forbidden","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/found","title":"case found","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/gatewaytimeout","title":"case gatewayTimeout","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/gone","title":"case gone","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/httpversionnotsupported","title":"case httpVersionNotSupported","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/imateapot","title":"case imATeapot","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/imused","title":"case imUsed","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/insufficientstorage","title":"case insufficientStorage","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/internalservererror","title":"case internalServerError","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/lengthrequired","title":"case lengthRequired","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/locked","title":"case locked","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/loopdetected","title":"case loopDetected","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/methodnotallowed","title":"case methodNotAllowed","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/misdirectedrequest","title":"case misdirectedRequest","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/movedpermanently","title":"case movedPermanently","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/multistatus","title":"case multiStatus","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/multiplechoices","title":"case multipleChoices","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/networkauthenticationrequired","title":"case networkAuthenticationRequired","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/nocontent","title":"case noContent","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/nonauthoritativeinformation","title":"case nonAuthoritativeInformation","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/notacceptable","title":"case notAcceptable","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/notextended","title":"case notExtended","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/notfound","title":"case notFound","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/notimplemented","title":"case notImplemented","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/notmodified","title":"case notModified","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/ok","title":"case ok","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/partialcontent","title":"case partialContent","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/payloadtoolarge","title":"case payloadTooLarge","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/paymentrequired","title":"case paymentRequired","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/permanentredirect","title":"case permanentRedirect","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/preconditionfailed","title":"case preconditionFailed","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/preconditionrequired","title":"case preconditionRequired","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/processing","title":"case processing","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/proxyauthenticationrequired","title":"case proxyAuthenticationRequired","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/rangenotsatisfiable","title":"case rangeNotSatisfiable","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/requestheaderfieldstoolarge","title":"case requestHeaderFieldsTooLarge","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/requesttimeout","title":"case requestTimeout","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/resetcontent","title":"case resetContent","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/seeother","title":"case seeOther","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/serviceunavailable","title":"case serviceUnavailable","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/switchingprotocols","title":"case switchingProtocols","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/temporaryredirect","title":"case temporaryRedirect","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/toomanyrequests","title":"case tooManyRequests","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/unauthorized","title":"case unauthorized","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/unavailableforlegalreasons","title":"case unavailableForLegalReasons","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/unprocessableentity","title":"case unprocessableEntity","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/unsupportedmediatype","title":"case unsupportedMediaType","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/upgraderequired","title":"case upgradeRequired","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/uritoolong","title":"case uriTooLong","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/useproxy","title":"case useProxy","type":"case"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/variantalsonegotiates","title":"case variantAlsoNegotiates","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/init(statuscode:reasonphrase:)","title":"init(statusCode: Int, reasonPhrase: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/code","title":"var code: UInt","type":"property"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/mayhaveresponsebody","title":"var mayHaveResponseBody: Bool","type":"property"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/reasonphrase","title":"var reasonPhrase: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/encoderesponse(for:)-4y346","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"}],"path":"\/documentation\/niohttp1\/httpresponsestatus\/asyncresponseencodable-implementations","title":"AsyncResponseEncodable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/niohttp1\/httpresponsestatus\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/niohttp1\/httpresponsestatus\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/==(_:_:)","title":"static func == (HTTPResponseStatus, HTTPResponseStatus) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpresponsestatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/encoderesponse(for:)-8tim2","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"path":"\/documentation\/niohttp1\/httpresponsestatus\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/niohttp1\/httpresponsestatus\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpresponsestatus","title":"HTTPResponseStatus","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradeerrors\/invalidhttpordering","title":"case invalidHTTPOrdering","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradeerrors\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/httpserverupgradeerrors\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/httpserverupgradeerrors","title":"HTTPServerUpgradeErrors","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/httpserverupgradeevents\/upgradecomplete(toprotocol:upgraderequest:)","title":"case upgradeComplete(toProtocol: String, upgradeRequest: HTTPRequestHead)","type":"case"}],"path":"\/documentation\/niohttp1\/httpserverupgradeevents","title":"HTTPServerUpgradeEvents","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/removeafterupgradestrategy\/dropbytes","title":"case dropBytes","type":"case"},{"path":"\/documentation\/niohttp1\/removeafterupgradestrategy\/fireerror","title":"case fireError","type":"case"},{"path":"\/documentation\/niohttp1\/removeafterupgradestrategy\/forwardbytes","title":"case forwardBytes","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp1\/removeafterupgradestrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp1\/removeafterupgradestrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp1\/removeafterupgradestrategy","title":"RemoveAfterUpgradeStrategy","type":"enum"}],"path":"\/documentation\/niohttp1","title":"NIOHTTP1","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/init(httpprotocol:normalizehttpheaders:)","title":"init(httpProtocol: HTTP2FramePayloadToHTTP1ClientCodec.HTTPProtocol, normalizeHTTPHeaders: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/inboundin","title":"HTTP2FramePayloadToHTTP1ClientCodec.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/inboundout","title":"HTTP2FramePayloadToHTTP1ClientCodec.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/outboundin","title":"HTTP2FramePayloadToHTTP1ClientCodec.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/outboundout","title":"HTTP2FramePayloadToHTTP1ClientCodec.OutboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/httpprotocol\/http","title":"case http","type":"case"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/httpprotocol\/https","title":"case https","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/httpprotocol\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/httpprotocol\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/httpprotocol","title":"HTTP2FramePayloadToHTTP1ClientCodec.HTTPProtocol","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec","title":"HTTP2FramePayloadToHTTP1ClientCodec","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/init(normalizehttpheaders:)","title":"init(normalizeHTTPHeaders: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/inboundin","title":"HTTP2FramePayloadToHTTP1ServerCodec.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/inboundout","title":"HTTP2FramePayloadToHTTP1ServerCodec.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/outboundin","title":"HTTP2FramePayloadToHTTP1ServerCodec.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/outboundout","title":"HTTP2FramePayloadToHTTP1ServerCodec.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec","title":"HTTP2FramePayloadToHTTP1ServerCodec","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/init(mode:channel:targetwindowsize:inboundstreamstateinitializer:)","title":"convenience init(mode: NIOHTTP2Handler.ParserMode, channel: Channel, targetWindowSize: Int, inboundStreamStateInitializer: ((Channel, HTTP2StreamID) -> EventLoopFuture<Void>)?)","type":"init"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/init(mode:channel:targetwindowsize:outboundbuffersizehighwatermark:outboundbuffersizelowwatermark:inboundstreaminitializer:)","title":"convenience init(mode: NIOHTTP2Handler.ParserMode, channel: Channel, targetWindowSize: Int, outboundBufferSizeHighWatermark: Int, outboundBufferSizeLowWatermark: Int, inboundStreamInitializer: ((Channel) -> EventLoopFuture<Void>)?)","type":"init"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/init(mode:channel:targetwindowsize:outboundbuffersizehighwatermark:outboundbuffersizelowwatermark:inboundstreamstateinitializer:)","title":"convenience init(mode: NIOHTTP2Handler.ParserMode, channel: Channel, targetWindowSize: Int, outboundBufferSizeHighWatermark: Int, outboundBufferSizeLowWatermark: Int, inboundStreamStateInitializer: ((Channel, HTTP2StreamID) -> EventLoopFuture<Void>)?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/channelreadcomplete(context:)","title":"func channelReadComplete(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/channelwritabilitychanged(context:)","title":"func channelWritabilityChanged(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/createstreamchannel(promise:_:)-18bxc","title":"func createStreamChannel(promise: EventLoopPromise<Channel>?, (Channel) -> EventLoopFuture<Void>)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/createstreamchannel(promise:_:)-8v39x","title":"func createStreamChannel(promise: EventLoopPromise<Channel>?, (Channel, HTTP2StreamID) -> EventLoopFuture<Void>)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/userinboundeventtriggered(context:event:)","title":"func userInboundEventTriggered(context: ChannelHandlerContext, event: Any)","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/inboundin","title":"HTTP2StreamMultiplexer.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/inboundout","title":"HTTP2StreamMultiplexer.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/outboundin","title":"HTTP2StreamMultiplexer.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/outboundout","title":"HTTP2StreamMultiplexer.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp2\/http2streammultiplexer\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streammultiplexer\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp2\/http2streammultiplexer\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2streammultiplexer","title":"HTTP2StreamMultiplexer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/init(streamid:httpprotocol:)","title":"convenience init(streamID: HTTP2StreamID, httpProtocol: HTTP2ToHTTP1ClientCodec.HTTPProtocol)","type":"init"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/init(streamid:httpprotocol:normalizehttpheaders:)","title":"init(streamID: HTTP2StreamID, httpProtocol: HTTP2ToHTTP1ClientCodec.HTTPProtocol, normalizeHTTPHeaders: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/httpprotocol","title":"HTTP2ToHTTP1ClientCodec.HTTPProtocol","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/inboundin","title":"HTTP2ToHTTP1ClientCodec.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/inboundout","title":"HTTP2ToHTTP1ClientCodec.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/outboundin","title":"HTTP2ToHTTP1ClientCodec.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/outboundout","title":"HTTP2ToHTTP1ClientCodec.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2tohttp1clientcodec","title":"HTTP2ToHTTP1ClientCodec","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/init(streamid:)","title":"convenience init(streamID: HTTP2StreamID)","type":"init"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/init(streamid:normalizehttpheaders:)","title":"init(streamID: HTTP2StreamID, normalizeHTTPHeaders: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/inboundin","title":"HTTP2ToHTTP1ServerCodec.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/inboundout","title":"HTTP2ToHTTP1ServerCodec.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/outboundin","title":"HTTP2ToHTTP1ServerCodec.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/outboundout","title":"HTTP2ToHTTP1ServerCodec.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp2\/http2tohttp1servercodec\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2tohttp1servercodec","title":"HTTP2ToHTTP1ServerCodec","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/init(mode:initialsettings:headerblockvalidation:contentlengthvalidation:)","title":"convenience init(mode: NIOHTTP2Handler.ParserMode, initialSettings: HTTP2Settings, headerBlockValidation: NIOHTTP2Handler.ValidationState, contentLengthValidation: NIOHTTP2Handler.ValidationState)","type":"init"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/init(mode:initialsettings:headerblockvalidation:contentlengthvalidation:maximumsequentialemptydataframes:maximumbufferedcontrolframes:)","title":"init(mode: NIOHTTP2Handler.ParserMode, initialSettings: HTTP2Settings, headerBlockValidation: NIOHTTP2Handler.ValidationState, contentLengthValidation: NIOHTTP2Handler.ValidationState, maximumSequentialEmptyDataFrames: Int, maximumBufferedControlFrames: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/channelreadcomplete(context:)","title":"func channelReadComplete(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/channelwritabilitychanged(context:)","title":"func channelWritabilityChanged(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/inboundin","title":"NIOHTTP2Handler.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/inboundout","title":"NIOHTTP2Handler.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/outboundin","title":"NIOHTTP2Handler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/outboundout","title":"NIOHTTP2Handler.OutboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/parsermode\/client","title":"case client","type":"case"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/parsermode\/server","title":"case server","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/parsermode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/parsermode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/parsermode","title":"NIOHTTP2Handler.ParserMode","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/validationstate\/disabled","title":"case disabled","type":"case"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/validationstate\/enabled","title":"case enabled","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/validationstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/validationstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/validationstate","title":"NIOHTTP2Handler.ValidationState","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2handler\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohttp2\/niohttp2handler\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2handler","title":"NIOHTTP2Handler","type":"class"},{"title":"Protocols","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2error","title":"NIOHTTP2Error","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2errorcode\/init(networkcode:)","title":"init(networkCode: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2errorcode\/networkcode","title":"var networkCode: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2errorcode\/cancel","title":"static let cancel: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/compressionerror","title":"static let compressionError: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/connecterror","title":"static let connectError: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/enhanceyourcalm","title":"static let enhanceYourCalm: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/flowcontrolerror","title":"static let flowControlError: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/framesizeerror","title":"static let frameSizeError: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/http11required","title":"static let http11Required: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/inadequatesecurity","title":"static let inadequateSecurity: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/internalerror","title":"static let internalError: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/noerror","title":"static let noError: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/protocolerror","title":"static let protocolError: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/refusedstream","title":"static let refusedStream: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/settingstimeout","title":"static let settingsTimeout: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/http2errorcode\/streamclosed","title":"static let streamClosed: HTTP2ErrorCode","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2errorcode\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/niohttp2\/http2errorcode\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2errorcode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2errorcode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2errorcode","title":"HTTP2ErrorCode","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/streamprioritydata\/dependency","title":"var dependency: HTTP2StreamID","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/streamprioritydata\/exclusive","title":"var exclusive: Bool","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/streamprioritydata\/weight","title":"var weight: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/streamprioritydata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2frame\/streamprioritydata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2frame\/streamprioritydata","title":"HTTP2Frame.StreamPriorityData","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/init(streamid:payload:)","title":"init(streamID: HTTP2StreamID, payload: HTTP2Frame.FramePayload)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/payload","title":"var payload: HTTP2Frame.FramePayload","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/streamid","title":"var streamID: HTTP2StreamID","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/data\/init(data:endstream:paddingbytes:)","title":"init(data: IOData, endStream: Bool, paddingBytes: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/data\/data","title":"var data: IOData","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/data\/endstream","title":"var endStream: Bool","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/data\/paddingbytes","title":"var paddingBytes: Int?","type":"property"}],"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/data","title":"HTTP2Frame.FramePayload.Data","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/headers\/init(headers:prioritydata:endstream:paddingbytes:)","title":"init(headers: HPACKHeaders, priorityData: HTTP2Frame.StreamPriorityData?, endStream: Bool, paddingBytes: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/headers\/endstream","title":"var endStream: Bool","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/headers\/headers","title":"var headers: HPACKHeaders","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/headers\/paddingbytes","title":"var paddingBytes: Int?","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/headers\/prioritydata","title":"var priorityData: HTTP2Frame.StreamPriorityData?","type":"property"}],"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/headers","title":"HTTP2Frame.FramePayload.Headers","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/pushpromise\/init(pushedstreamid:headers:paddingbytes:)","title":"init(pushedStreamID: HTTP2StreamID, headers: HPACKHeaders, paddingBytes: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/pushpromise\/headers","title":"var headers: HPACKHeaders","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/pushpromise\/paddingbytes","title":"var paddingBytes: Int?","type":"property"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/pushpromise\/pushedstreamid","title":"var pushedStreamID: HTTP2StreamID","type":"property"}],"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/pushpromise","title":"HTTP2Frame.FramePayload.PushPromise","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/alternativeservice(origin:field:)","title":"case alternativeService(origin: String?, field: ByteBuffer?)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/data(_:)","title":"case data(HTTP2Frame.FramePayload.Data)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/goaway(laststreamid:errorcode:opaquedata:)","title":"case goAway(lastStreamID: HTTP2StreamID, errorCode: HTTP2ErrorCode, opaqueData: ByteBuffer?)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/headers(_:)","title":"case headers(HTTP2Frame.FramePayload.Headers)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/origin(_:)","title":"case origin([String])","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/ping(_:ack:)","title":"case ping(HTTP2PingData, ack: Bool)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/priority(_:)","title":"case priority(HTTP2Frame.StreamPriorityData)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/pushpromise(_:)","title":"case pushPromise(HTTP2Frame.FramePayload.PushPromise)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/rststream(_:)","title":"case rstStream(HTTP2ErrorCode)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/settings(_:)","title":"case settings(HTTP2Frame.FramePayload.Settings)","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/windowupdate(windowsizeincrement:)","title":"case windowUpdate(windowSizeIncrement: Int)","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/settings\/ack","title":"case ack","type":"case"},{"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/settings\/settings(_:)","title":"case settings(HTTP2Settings)","type":"case"}],"path":"\/documentation\/niohttp2\/http2frame\/framepayload\/settings","title":"HTTP2Frame.FramePayload.Settings","type":"enum"}],"path":"\/documentation\/niohttp2\/http2frame\/framepayload","title":"HTTP2Frame.FramePayload","type":"enum"}],"path":"\/documentation\/niohttp2\/http2frame","title":"HTTP2Frame","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/init()","title":"init()","type":"init"},{"path":"\/documentation\/niohttp2\/http2pingdata\/init(withinteger:)","title":"init(withInteger: UInt64)","type":"init"},{"path":"\/documentation\/niohttp2\/http2pingdata\/init(withtuple:)","title":"init(withTuple: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/bytes","title":"var bytes: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)","type":"property"},{"path":"\/documentation\/niohttp2\/http2pingdata\/integer","title":"var integer: UInt64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/niohttp2\/http2pingdata\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/niohttp2\/http2pingdata\/endindex","title":"var endIndex: HTTP2PingData.Index","type":"property"},{"path":"\/documentation\/niohttp2\/http2pingdata\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/niohttp2\/http2pingdata\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niohttp2\/http2pingdata\/startindex","title":"var startIndex: HTTP2PingData.Index","type":"property"},{"path":"\/documentation\/niohttp2\/http2pingdata\/underestimatedcount-2v4wt","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/map(_:)-7klzi","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/subscript(_:)-7iww4","title":"subscript(HTTP2PingData.Index) -> HTTP2PingData.Element","type":"subscript"},{"path":"\/documentation\/niohttp2\/http2pingdata\/subscript(_:)-8xn27","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niohttp2\/http2pingdata\/subscript(_:)-979r","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/niohttp2\/http2pingdata\/subscript(_:)-x1t0","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/index","title":"HTTP2PingData.Index","type":"typealias"}],"path":"\/documentation\/niohttp2\/http2pingdata\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2pingdata\/==(_:_:)","title":"static func == (HTTP2PingData, HTTP2PingData) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2pingdata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niohttp2\/http2pingdata\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/partition(by:)-2eaf","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/partition(by:)-925vq","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/subscript(_:)-10m4h","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niohttp2\/http2pingdata\/subscript(_:)-7s7gm","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/niohttp2\/http2pingdata\/subscript(_:)-uhs1","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/niohttp2\/http2pingdata\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/niohttp2\/http2pingdata\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niohttp2\/http2pingdata\/underestimatedcount-tj8","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/flatmap(_:)-3lurb","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/flatmap(_:)-4svpv","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/map(_:)-136lf","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niohttp2\/http2pingdata\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2pingdata\/element","title":"HTTP2PingData.Element","type":"typealias"}],"path":"\/documentation\/niohttp2\/http2pingdata\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2pingdata","title":"HTTP2PingData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2setting\/init(parameter:value:)","title":"init(parameter: HTTP2SettingsParameter, value: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2setting\/parameter","title":"var parameter: HTTP2SettingsParameter","type":"property"},{"path":"\/documentation\/niohttp2\/http2setting\/value","title":"var value: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2setting\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2setting\/==(_:_:)","title":"static func == (HTTP2Setting, HTTP2Setting) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2setting\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2setting","title":"HTTP2Setting","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/init(extensionsetting:)","title":"init(extensionSetting: Int)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/enableconnectprotocol","title":"static let enableConnectProtocol: HTTP2SettingsParameter","type":"property"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/enablepush","title":"static let enablePush: HTTP2SettingsParameter","type":"property"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/headertablesize","title":"static let headerTableSize: HTTP2SettingsParameter","type":"property"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/initialwindowsize","title":"static let initialWindowSize: HTTP2SettingsParameter","type":"property"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/maxconcurrentstreams","title":"static let maxConcurrentStreams: HTTP2SettingsParameter","type":"property"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/maxframesize","title":"static let maxFrameSize: HTTP2SettingsParameter","type":"property"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/maxheaderlistsize","title":"static let maxHeaderListSize: HTTP2SettingsParameter","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2settingsparameter\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2settingsparameter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2settingsparameter","title":"HTTP2SettingsParameter","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamchanneloptions\/streamid","title":"static let streamID: HTTP2StreamChannelOptions.Types.StreamIDOption","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamchanneloptions\/types\/streamidoption\/init()","title":"init()","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamchanneloptions\/types\/streamidoption\/value","title":"HTTP2StreamChannelOptions.Types.StreamIDOption.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamchanneloptions\/types\/streamidoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2streamchanneloptions\/types\/streamidoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2streamchanneloptions\/types\/streamidoption","title":"HTTP2StreamChannelOptions.Types.StreamIDOption","type":"struct"}],"path":"\/documentation\/niohttp2\/http2streamchanneloptions\/types","title":"HTTP2StreamChannelOptions.Types","type":"enum"}],"path":"\/documentation\/niohttp2\/http2streamchanneloptions","title":"HTTP2StreamChannelOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/init(_:)-3a63m","title":"init(Int32)","type":"init"},{"path":"\/documentation\/niohttp2\/http2streamid\/init(_:)-7k02v","title":"init(Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/isclientinitiated","title":"var isClientInitiated: Bool","type":"property"},{"path":"\/documentation\/niohttp2\/http2streamid\/isserverinitiated","title":"var isServerInitiated: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/maxid","title":"static let maxID: HTTP2StreamID","type":"property"},{"path":"\/documentation\/niohttp2\/http2streamid\/rootstream","title":"static let rootStream: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/'...(_:)-53dtf","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'...(_:)-6sp8c","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niohttp2\/http2streamid\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/'...(_:)-53dtf","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'...(_:)-6sp8c","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"}],"path":"\/documentation\/niohttp2\/http2streamid\/-implementations","title":" Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/_(_:_:)-1f2xv","title":"static func < (HTTP2StreamID, HTTP2StreamID) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/_(_:_:)-5ng4e","title":"static func > (HTTP2StreamID, HTTP2StreamID) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/_(_:_:)-6ociy","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/_(_:_:)-99yp0","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/_=(_:_:)-1mier","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/_=(_:_:)-40t5p","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/_=(_:_:)-6f8pc","title":"static func >= (HTTP2StreamID, HTTP2StreamID) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/_=(_:_:)-7ediu","title":"static func <= (HTTP2StreamID, HTTP2StreamID) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2streamid\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niohttp2\/http2streamid\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niohttp2\/http2streamid\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/http2streamid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/init(integerliteral:)","title":"init(integerLiteral: HTTP2StreamID.IntegerLiteralType)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/integerliteraltype","title":"HTTP2StreamID.IntegerLiteralType","type":"typealias"}],"path":"\/documentation\/niohttp2\/http2streamid\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/advanced(by:)","title":"func advanced(by: HTTP2StreamID.Stride) -> HTTP2StreamID","type":"method"},{"path":"\/documentation\/niohttp2\/http2streamid\/distance(to:)","title":"func distance(to: HTTP2StreamID) -> HTTP2StreamID.Stride","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2streamid\/stride","title":"HTTP2StreamID.Stride","type":"typealias"}],"path":"\/documentation\/niohttp2\/http2streamid\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/http2streamid","title":"HTTP2StreamID","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2bulkstreamwindowchangeevent\/init(delta:)","title":"init(delta: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2bulkstreamwindowchangeevent\/delta","title":"let delta: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2bulkstreamwindowchangeevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2bulkstreamwindowchangeevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2bulkstreamwindowchangeevent","title":"NIOHTTP2BulkStreamWindowChangeEvent","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2streamcreatedevent\/init(streamid:localinitialwindowsize:remoteinitialwindowsize:)","title":"init(streamID: HTTP2StreamID, localInitialWindowSize: UInt32?, remoteInitialWindowSize: UInt32?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2streamcreatedevent\/localinitialwindowsize","title":"let localInitialWindowSize: UInt32?","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamcreatedevent\/remoteinitialwidowsize","title":"let remoteInitialWidowSize: UInt32?","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamcreatedevent\/streamid","title":"let streamID: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2streamcreatedevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2streamcreatedevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2streamcreatedevent","title":"NIOHTTP2StreamCreatedEvent","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/description","title":"var description: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/closed","title":"static let closed: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/fullyopen","title":"static let fullyOpen: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/halfclosedlocalpeeractive","title":"static let halfClosedLocalPeerActive: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/halfclosedlocalpeeridle","title":"static let halfClosedLocalPeerIdle: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/halfclosedremotelocalactive","title":"static let halfClosedRemoteLocalActive: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/halfclosedremotelocalidle","title":"static let halfClosedRemoteLocalIdle: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/halfopenlocalpeeridle","title":"static let halfOpenLocalPeerIdle: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/halfopenremotelocalidle","title":"static let halfOpenRemoteLocalIdle: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/idle","title":"static let idle: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/reservedlocal","title":"static let reservedLocal: NIOHTTP2StreamState","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/reservedremote","title":"static let reservedRemote: NIOHTTP2StreamState","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2streamstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2streamstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2streamstate","title":"NIOHTTP2StreamState","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2windowupdatedevent\/init(streamid:inboundwindowsize:outboundwindowsize:)","title":"init(streamID: HTTP2StreamID, inboundWindowSize: Int?, outboundWindowSize: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2windowupdatedevent\/inboundwindowsize","title":"var inboundWindowSize: Int?","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2windowupdatedevent\/outboundwindowsize","title":"var outboundWindowSize: Int?","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2windowupdatedevent\/streamid","title":"let streamID: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2windowupdatedevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2windowupdatedevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2windowupdatedevent","title":"NIOHTTP2WindowUpdatedEvent","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/streamclosedevent\/init(streamid:reason:)","title":"init(streamID: HTTP2StreamID, reason: HTTP2ErrorCode?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/streamclosedevent\/reason","title":"let reason: HTTP2ErrorCode?","type":"property"},{"path":"\/documentation\/niohttp2\/streamclosedevent\/streamid","title":"let streamID: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/streamclosedevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/streamclosedevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/streamclosedevent","title":"StreamClosedEvent","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2supportedalpnprotocols","title":"let NIOHTTP2SupportedALPNProtocols: [String]","type":"var"},{"path":"\/documentation\/niohttp2\/niodefaultsettings","title":"let nioDefaultSettings: [HTTP2Setting]","type":"var"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/http2settings","title":"HTTP2Settings","type":"typealias"},{"path":"\/documentation\/niohttp2\/streamidoption","title":"StreamIDOption","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badclientmagic\/==(_:_:)","title":"static func == (NIOHTTP2Errors.BadClientMagic, NIOHTTP2Errors.BadClientMagic) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badclientmagic\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badclientmagic\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badclientmagic\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/badclientmagic\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/badclientmagic","title":"NIOHTTP2Errors.BadClientMagic","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition\/==(_:_:)","title":"static func == (NIOHTTP2Errors.BadStreamStateTransition, NIOHTTP2Errors.BadStreamStateTransition) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition\/fromstate","title":"let fromState: NIOHTTP2StreamState?","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition\/location","title":"let location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition","title":"NIOHTTP2Errors.BadStreamStateTransition","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/contentlengthviolated\/==(_:_:)","title":"static func == (NIOHTTP2Errors.ContentLengthViolated, NIOHTTP2Errors.ContentLengthViolated) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/contentlengthviolated\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/contentlengthviolated\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/contentlengthviolated\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/contentlengthviolated\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/contentlengthviolated","title":"NIOHTTP2Errors.ContentLengthViolated","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/createdstreamaftergoaway\/==(_:_:)","title":"static func == (NIOHTTP2Errors.CreatedStreamAfterGoaway, NIOHTTP2Errors.CreatedStreamAfterGoaway) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/createdstreamaftergoaway\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/createdstreamaftergoaway\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/createdstreamaftergoaway\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/createdstreamaftergoaway\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/createdstreamaftergoaway","title":"NIOHTTP2Errors.CreatedStreamAfterGoaway","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatehostheader\/==(_:_:)","title":"static func == (NIOHTTP2Errors.DuplicateHostHeader, NIOHTTP2Errors.DuplicateHostHeader) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatehostheader\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatehostheader\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatehostheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatehostheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatehostheader","title":"NIOHTTP2Errors.DuplicateHostHeader","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader\/location","title":"var location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader","title":"NIOHTTP2Errors.DuplicatePseudoHeader","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/emptypathheader\/==(_:_:)","title":"static func == (NIOHTTP2Errors.EmptyPathHeader, NIOHTTP2Errors.EmptyPathHeader) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/emptypathheader\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/emptypathheader\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/emptypathheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/emptypathheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/emptypathheader","title":"NIOHTTP2Errors.EmptyPathHeader","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveemptydataframes\/==(_:_:)","title":"static func == (NIOHTTP2Errors.ExcessiveEmptyDataFrames, NIOHTTP2Errors.ExcessiveEmptyDataFrames) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveemptydataframes\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveemptydataframes\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveemptydataframes\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveemptydataframes\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveemptydataframes","title":"NIOHTTP2Errors.ExcessiveEmptyDataFrames","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveoutboundframebuffering\/==(_:_:)","title":"static func == (NIOHTTP2Errors.ExcessiveOutboundFrameBuffering, NIOHTTP2Errors.ExcessiveOutboundFrameBuffering) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveoutboundframebuffering\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveoutboundframebuffering\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveoutboundframebuffering\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveoutboundframebuffering\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveoutboundframebuffering","title":"NIOHTTP2Errors.ExcessiveOutboundFrameBuffering","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessivelylargeheaderblock\/==(_:_:)","title":"static func == (NIOHTTP2Errors.ExcessivelyLargeHeaderBlock, NIOHTTP2Errors.ExcessivelyLargeHeaderBlock) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessivelylargeheaderblock\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessivelylargeheaderblock\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessivelylargeheaderblock\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/excessivelylargeheaderblock\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/excessivelylargeheaderblock","title":"NIOHTTP2Errors.ExcessivelyLargeHeaderBlock","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/flowcontrolviolation\/==(_:_:)","title":"static func == (NIOHTTP2Errors.FlowControlViolation, NIOHTTP2Errors.FlowControlViolation) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/flowcontrolviolation\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/flowcontrolviolation\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/flowcontrolviolation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/flowcontrolviolation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/flowcontrolviolation","title":"NIOHTTP2Errors.FlowControlViolation","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield\/init(name:value:)","title":"init(name: String, value: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield\/location","title":"var location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield\/value","title":"var value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield","title":"NIOHTTP2Errors.ForbiddenHeaderField","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/ioonclosedconnection\/==(_:_:)","title":"static func == (NIOHTTP2Errors.IOOnClosedConnection, NIOHTTP2Errors.IOOnClosedConnection) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/ioonclosedconnection\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/ioonclosedconnection\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/ioonclosedconnection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/ioonclosedconnection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/ioonclosedconnection","title":"NIOHTTP2Errors.IOOnClosedConnection","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidalpntoken\/==(_:_:)","title":"static func == (NIOHTTP2Errors.InvalidALPNToken, NIOHTTP2Errors.InvalidALPNToken) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidalpntoken\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidalpntoken\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidalpntoken\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidalpntoken\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidalpntoken","title":"NIOHTTP2Errors.InvalidALPNToken","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize\/init(delta:currentwindowsize:)","title":"init(delta: Int, currentWindowSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize\/currentwindowsize","title":"var currentWindowSize: Int","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize\/delta","title":"var delta: Int","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize","title":"NIOHTTP2Errors.InvalidFlowControlWindowSize","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname\/fieldname","title":"var fieldName: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname","title":"NIOHTTP2Errors.InvalidHTTP2HeaderFieldName","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders\/==(_:_:)","title":"static func == (NIOHTTP2Errors.InvalidPseudoHeaders, NIOHTTP2Errors.InvalidPseudoHeaders) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders\/init(_:)","title":"init(HPACKHeaders)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders\/headerblock","title":"var headerBlock: HPACKHeaders","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders\/location","title":"let location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders","title":"NIOHTTP2Errors.InvalidPseudoHeaders","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting\/==(_:_:)","title":"static func == (NIOHTTP2Errors.InvalidSetting, NIOHTTP2Errors.InvalidSetting) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting\/init(setting:)","title":"init(setting: HTTP2Setting)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting\/location","title":"let location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting\/setting","title":"var setting: HTTP2Setting","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting","title":"NIOHTTP2Errors.InvalidSetting","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue\/location","title":"var location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue\/value","title":"var value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue","title":"NIOHTTP2Errors.InvalidStatusValue","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstreamidforpeer\/==(_:_:)","title":"static func == (NIOHTTP2Errors.InvalidStreamIDForPeer, NIOHTTP2Errors.InvalidStreamIDForPeer) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstreamidforpeer\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstreamidforpeer\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstreamidforpeer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstreamidforpeer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstreamidforpeer","title":"NIOHTTP2Errors.InvalidStreamIDForPeer","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidwindowincrementsize\/==(_:_:)","title":"static func == (NIOHTTP2Errors.InvalidWindowIncrementSize, NIOHTTP2Errors.InvalidWindowIncrementSize) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidwindowincrementsize\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidwindowincrementsize\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidwindowincrementsize\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidwindowincrementsize\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidwindowincrementsize","title":"NIOHTTP2Errors.InvalidWindowIncrementSize","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/maxstreamsviolation\/==(_:_:)","title":"static func == (NIOHTTP2Errors.MaxStreamsViolation, NIOHTTP2Errors.MaxStreamsViolation) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/maxstreamsviolation\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/maxstreamsviolation\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/maxstreamsviolation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/maxstreamsviolation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/maxstreamsviolation","title":"NIOHTTP2Errors.MaxStreamsViolation","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missinghostheader\/==(_:_:)","title":"static func == (NIOHTTP2Errors.MissingHostHeader, NIOHTTP2Errors.MissingHostHeader) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missinghostheader\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missinghostheader\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missinghostheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/missinghostheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/missinghostheader","title":"NIOHTTP2Errors.MissingHostHeader","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpreface\/==(_:_:)","title":"static func == (NIOHTTP2Errors.MissingPreface, NIOHTTP2Errors.MissingPreface) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpreface\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpreface\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpreface\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpreface\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpreface","title":"NIOHTTP2Errors.MissingPreface","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader\/location","title":"var location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader","title":"NIOHTTP2Errors.MissingPseudoHeader","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nostreamidavailable\/==(_:_:)","title":"static func == (NIOHTTP2Errors.NoStreamIDAvailable, NIOHTTP2Errors.NoStreamIDAvailable) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nostreamidavailable\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nostreamidavailable\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nostreamidavailable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/nostreamidavailable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/nostreamidavailable","title":"NIOHTTP2Errors.NoStreamIDAvailable","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream\/==(_:_:)","title":"static func == (NIOHTTP2Errors.NoSuchStream, NIOHTTP2Errors.NoSuchStream) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream\/init(streamid:)","title":"init(streamID: HTTP2StreamID)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream\/location","title":"let location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream\/streamid","title":"var streamID: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream","title":"NIOHTTP2Errors.NoSuchStream","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle\/==(_:_:)","title":"static func == (NIOHTTP2Errors.PriorityCycle, NIOHTTP2Errors.PriorityCycle) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle\/init(streamid:)","title":"init(streamID: HTTP2StreamID)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle\/location","title":"let location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle\/streamid","title":"var streamID: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle","title":"NIOHTTP2Errors.PriorityCycle","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader\/location","title":"var location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader","title":"NIOHTTP2Errors.PseudoHeaderAfterRegularHeader","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pushinviolationofsetting\/==(_:_:)","title":"static func == (NIOHTTP2Errors.PushInViolationOfSetting, NIOHTTP2Errors.PushInViolationOfSetting) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pushinviolationofsetting\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pushinviolationofsetting\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pushinviolationofsetting\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/pushinviolationofsetting\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/pushinviolationofsetting","title":"NIOHTTP2Errors.PushInViolationOfSetting","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/raisedgoawaylaststreamid\/==(_:_:)","title":"static func == (NIOHTTP2Errors.RaisedGoawayLastStreamID, NIOHTTP2Errors.RaisedGoawayLastStreamID) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/raisedgoawaylaststreamid\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/raisedgoawaylaststreamid\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/raisedgoawaylaststreamid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/raisedgoawaylaststreamid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/raisedgoawaylaststreamid","title":"NIOHTTP2Errors.RaisedGoawayLastStreamID","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/receivedbadsettings\/==(_:_:)","title":"static func == (NIOHTTP2Errors.ReceivedBadSettings, NIOHTTP2Errors.ReceivedBadSettings) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/receivedbadsettings\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/receivedbadsettings\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/receivedbadsettings\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/receivedbadsettings\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/receivedbadsettings","title":"NIOHTTP2Errors.ReceivedBadSettings","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed\/==(_:_:)","title":"static func == (NIOHTTP2Errors.StreamClosed, NIOHTTP2Errors.StreamClosed) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed\/init(streamid:errorcode:)","title":"init(streamID: HTTP2StreamID, errorCode: HTTP2ErrorCode)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed\/errorcode","title":"var errorCode: HTTP2ErrorCode","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed\/location","title":"let location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed\/streamid","title":"var streamID: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed","title":"NIOHTTP2Errors.StreamClosed","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamerror\/baseerror","title":"var baseError: Error","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamerror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamerror\/streamid","title":"var streamID: HTTP2StreamID","type":"property"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/streamerror","title":"NIOHTTP2Errors.StreamError","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamidtoosmall\/==(_:_:)","title":"static func == (NIOHTTP2Errors.StreamIDTooSmall, NIOHTTP2Errors.StreamIDTooSmall) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamidtoosmall\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamidtoosmall\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamidtoosmall\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/streamidtoosmall\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/streamidtoosmall","title":"NIOHTTP2Errors.StreamIDTooSmall","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream\/==(_:_:)","title":"static func == (NIOHTTP2Errors.TrailersWithoutEndStream, NIOHTTP2Errors.TrailersWithoutEndStream) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream\/init(streamid:)","title":"init(streamID: HTTP2StreamID)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream\/location","title":"let location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream\/streamid","title":"var streamID: HTTP2StreamID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream","title":"NIOHTTP2Errors.TrailersWithoutEndStream","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoparseframe\/==(_:_:)","title":"static func == (NIOHTTP2Errors.UnableToParseFrame, NIOHTTP2Errors.UnableToParseFrame) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoparseframe\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoparseframe\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoparseframe\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoparseframe\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoparseframe","title":"NIOHTTP2Errors.UnableToParseFrame","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoserializeframe\/==(_:_:)","title":"static func == (NIOHTTP2Errors.UnableToSerializeFrame, NIOHTTP2Errors.UnableToSerializeFrame) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoserializeframe\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoserializeframe\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoserializeframe\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoserializeframe\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoserializeframe","title":"NIOHTTP2Errors.UnableToSerializeFrame","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader\/location","title":"var location: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader","title":"NIOHTTP2Errors.UnknownPseudoHeader","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported\/init(info:)","title":"init(info: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported\/info","title":"var info: String","type":"property"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported\/location","title":"var location: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported","title":"NIOHTTP2Errors.Unsupported","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badclientmagic(file:line:)","title":"static func badClientMagic(file: String, line: UInt) -> NIOHTTP2Errors.BadClientMagic","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/badstreamstatetransition(from:file:line:)","title":"static func badStreamStateTransition(from: NIOHTTP2StreamState?, file: String, line: UInt) -> NIOHTTP2Errors.BadStreamStateTransition","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/contentlengthviolated(file:line:)","title":"static func contentLengthViolated(file: String, line: UInt) -> NIOHTTP2Errors.ContentLengthViolated","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/createdstreamaftergoaway(file:line:)","title":"static func createdStreamAfterGoaway(file: String, line: UInt) -> NIOHTTP2Errors.CreatedStreamAfterGoaway","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatehostheader(file:line:)","title":"static func duplicateHostHeader(file: String, line: UInt) -> NIOHTTP2Errors.DuplicateHostHeader","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/duplicatepseudoheader(_:file:line:)","title":"static func duplicatePseudoHeader(String, file: String, line: UInt) -> NIOHTTP2Errors.DuplicatePseudoHeader","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/emptypathheader(file:line:)","title":"static func emptyPathHeader(file: String, line: UInt) -> NIOHTTP2Errors.EmptyPathHeader","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveemptydataframes(file:line:)","title":"static func excessiveEmptyDataFrames(file: String, line: UInt) -> NIOHTTP2Errors.ExcessiveEmptyDataFrames","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessiveoutboundframebuffering(file:line:)","title":"static func excessiveOutboundFrameBuffering(file: String, line: UInt) -> NIOHTTP2Errors.ExcessiveOutboundFrameBuffering","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/excessivelylargeheaderblock(file:line:)","title":"static func excessivelyLargeHeaderBlock(file: String, line: UInt) -> NIOHTTP2Errors.ExcessivelyLargeHeaderBlock","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/flowcontrolviolation(file:line:)","title":"static func flowControlViolation(file: String, line: UInt) -> NIOHTTP2Errors.FlowControlViolation","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/forbiddenheaderfield(name:value:file:line:)","title":"static func forbiddenHeaderField(name: String, value: String, file: String, line: UInt) -> NIOHTTP2Errors.ForbiddenHeaderField","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidalpntoken(file:line:)","title":"static func invalidALPNToken(file: String, line: UInt) -> NIOHTTP2Errors.InvalidALPNToken","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidflowcontrolwindowsize(delta:currentwindowsize:file:line:)","title":"static func invalidFlowControlWindowSize(delta: Int, currentWindowSize: Int, file: String, line: UInt) -> NIOHTTP2Errors.InvalidFlowControlWindowSize","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidhttp2headerfieldname(_:file:line:)","title":"static func invalidHTTP2HeaderFieldName(String, file: String, line: UInt) -> NIOHTTP2Errors.InvalidHTTP2HeaderFieldName","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidpseudoheaders(_:file:line:)","title":"static func invalidPseudoHeaders(HPACKHeaders, file: String, line: UInt) -> NIOHTTP2Errors.InvalidPseudoHeaders","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidsetting(setting:file:line:)","title":"static func invalidSetting(setting: HTTP2Setting, file: String, line: UInt) -> NIOHTTP2Errors.InvalidSetting","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstatusvalue(_:file:line:)","title":"static func invalidStatusValue(String, file: String, line: UInt) -> NIOHTTP2Errors.InvalidStatusValue","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidstreamidforpeer(file:line:)","title":"static func invalidStreamIDForPeer(file: String, line: UInt) -> NIOHTTP2Errors.InvalidStreamIDForPeer","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/invalidwindowincrementsize(file:line:)","title":"static func invalidWindowIncrementSize(file: String, line: UInt) -> NIOHTTP2Errors.InvalidWindowIncrementSize","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/ioonclosedconnection(file:line:)","title":"static func ioOnClosedConnection(file: String, line: UInt) -> NIOHTTP2Errors.IOOnClosedConnection","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/maxstreamsviolation(file:line:)","title":"static func maxStreamsViolation(file: String, line: UInt) -> NIOHTTP2Errors.MaxStreamsViolation","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missinghostheader(file:line:)","title":"static func missingHostHeader(file: String, line: UInt) -> NIOHTTP2Errors.MissingHostHeader","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpreface(file:line:)","title":"static func missingPreface(file: String, line: UInt) -> NIOHTTP2Errors.MissingPreface","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/missingpseudoheader(_:file:line:)","title":"static func missingPseudoHeader(String, file: String, line: UInt) -> NIOHTTP2Errors.MissingPseudoHeader","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nostreamidavailable(file:line:)","title":"static func noStreamIDAvailable(file: String, line: UInt) -> NIOHTTP2Errors.NoStreamIDAvailable","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/nosuchstream(streamid:file:line:)","title":"static func noSuchStream(streamID: HTTP2StreamID, file: String, line: UInt) -> NIOHTTP2Errors.NoSuchStream","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/prioritycycle(streamid:file:line:)","title":"static func priorityCycle(streamID: HTTP2StreamID, file: String, line: UInt) -> NIOHTTP2Errors.PriorityCycle","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pseudoheaderafterregularheader(_:file:line:)","title":"static func pseudoHeaderAfterRegularHeader(String, file: String, line: UInt) -> NIOHTTP2Errors.PseudoHeaderAfterRegularHeader","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/pushinviolationofsetting(file:line:)","title":"static func pushInViolationOfSetting(file: String, line: UInt) -> NIOHTTP2Errors.PushInViolationOfSetting","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/raisedgoawaylaststreamid(file:line:)","title":"static func raisedGoawayLastStreamID(file: String, line: UInt) -> NIOHTTP2Errors.RaisedGoawayLastStreamID","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/receivedbadsettings(file:line:)","title":"static func receivedBadSettings(file: String, line: UInt) -> NIOHTTP2Errors.ReceivedBadSettings","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamclosed(streamid:errorcode:file:line:)","title":"static func streamClosed(streamID: HTTP2StreamID, errorCode: HTTP2ErrorCode, file: String, line: UInt) -> NIOHTTP2Errors.StreamClosed","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamerror(streamid:baseerror:)","title":"static func streamError(streamID: HTTP2StreamID, baseError: Error) -> NIOHTTP2Errors.StreamError","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/streamidtoosmall(file:line:)","title":"static func streamIDTooSmall(file: String, line: UInt) -> NIOHTTP2Errors.StreamIDTooSmall","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/trailerswithoutendstream(streamid:file:line:)","title":"static func trailersWithoutEndStream(streamID: HTTP2StreamID, file: String, line: UInt) -> NIOHTTP2Errors.TrailersWithoutEndStream","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoparseframe(file:line:)","title":"static func unableToParseFrame(file: String, line: UInt) -> NIOHTTP2Errors.UnableToParseFrame","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unabletoserializeframe(file:line:)","title":"static func unableToSerializeFrame(file: String, line: UInt) -> NIOHTTP2Errors.UnableToSerializeFrame","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unknownpseudoheader(_:file:line:)","title":"static func unknownPseudoHeader(String, file: String, line: UInt) -> NIOHTTP2Errors.UnknownPseudoHeader","type":"method"},{"path":"\/documentation\/niohttp2\/niohttp2errors\/unsupported(info:file:line:)","title":"static func unsupported(info: String, file: String, line: UInt) -> NIOHTTP2Errors.Unsupported","type":"method"}],"path":"\/documentation\/niohttp2\/niohttp2errors","title":"NIOHTTP2Errors","type":"enum"}],"path":"\/documentation\/niohttp2","title":"NIOHTTP2","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/init(initialbytebuffercapacity:)","title":"init(initialByteBufferCapacity: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/inboundin","title":"HTTPResponseCompressor.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/inboundout","title":"HTTPResponseCompressor.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/outboundin","title":"HTTPResponseCompressor.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/outboundout","title":"HTTPResponseCompressor.OutboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/compressionerror\/nodatatowrite","title":"case noDataToWrite","type":"case"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/compressionerror\/uncompressedwritespending","title":"case uncompressedWritesPending","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/compressionerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/compressionerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/compressionerror","title":"HTTPResponseCompressor.CompressionError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttpcompression\/httpresponsecompressor\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/httpresponsecompressor","title":"HTTPResponseCompressor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/init(encoding:)","title":"init(encoding: NIOCompression.Algorithm)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/outboundin","title":"NIOHTTPRequestCompressor.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/outboundout","title":"NIOHTTPRequestCompressor.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/niohttprequestcompressor","title":"NIOHTTPRequestCompressor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/init(limit:)","title":"init(limit: NIOHTTPDecompression.DecompressionLimit)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/inboundin","title":"NIOHTTPRequestDecompressor.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/inboundout","title":"NIOHTTPRequestDecompressor.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/outboundin","title":"NIOHTTPRequestDecompressor.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/outboundout","title":"NIOHTTPRequestDecompressor.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/niohttprequestdecompressor","title":"NIOHTTPRequestDecompressor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/init(limit:)","title":"init(limit: NIOHTTPDecompression.DecompressionLimit)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/inboundin","title":"NIOHTTPResponseDecompressor.InboundIn","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/inboundout","title":"NIOHTTPResponseDecompressor.InboundOut","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/outboundin","title":"NIOHTTPResponseDecompressor.OutboundIn","type":"typealias"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/outboundout","title":"NIOHTTPResponseDecompressor.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor","title":"NIOHTTPResponseDecompressor","type":"class"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niocompression\/algorithm\/description","title":"var description: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niocompression\/algorithm\/deflate","title":"static let deflate: NIOCompression.Algorithm","type":"property"},{"path":"\/documentation\/niohttpcompression\/niocompression\/algorithm\/gzip","title":"static let gzip: NIOCompression.Algorithm","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niocompression\/algorithm\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttpcompression\/niocompression\/algorithm\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/niocompression\/algorithm","title":"NIOCompression.Algorithm","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niocompression\/error\/description","title":"var description: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niocompression\/error\/nodatatowrite","title":"static let noDataToWrite: NIOCompression.Error","type":"property"},{"path":"\/documentation\/niohttpcompression\/niocompression\/error\/uncompressedwritespending","title":"static let uncompressedWritesPending: NIOCompression.Error","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niocompression\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttpcompression\/niocompression\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/niocompression\/error","title":"NIOCompression.Error","type":"struct"}],"path":"\/documentation\/niohttpcompression\/niocompression","title":"NIOCompression","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionlimit\/none","title":"static let none: NIOHTTPDecompression.DecompressionLimit","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionlimit\/ratio(_:)","title":"static func ratio(Int) -> NIOHTTPDecompression.DecompressionLimit","type":"method"},{"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionlimit\/size(_:)","title":"static func size(Int) -> NIOHTTPDecompression.DecompressionLimit","type":"method"}],"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionlimit","title":"NIOHTTPDecompression.DecompressionLimit","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionerror\/inflationerror(_:)","title":"case inflationError(Int)","type":"case"},{"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionerror\/initializationerror(_:)","title":"case initializationError(Int)","type":"case"},{"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionerror\/limit","title":"case limit","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niohttpcompression\/niohttpdecompression\/decompressionerror","title":"NIOHTTPDecompression.DecompressionError","type":"enum"}],"path":"\/documentation\/niohttpcompression\/niohttpdecompression","title":"NIOHTTPDecompression","type":"enum"}],"path":"\/documentation\/niohttpcompression","title":"NIOHTTPCompression","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/clientbootstrap\/init(group:)","title":"convenience init(group: EventLoopGroup)","type":"init"},{"path":"\/documentation\/nioposix\/clientbootstrap\/init(validatinggroup:)","title":"init?(validatingGroup: EventLoopGroup)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/clientbootstrap\/bind(to:)","title":"func bind(to: SocketAddress) -> ClientBootstrap","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/channelinitializer(_:)","title":"func channelInitializer((Channel) -> EventLoopFuture<Void>) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/channeloption(_:value:)","title":"func channelOption<Option>(Option, value: Option.Value) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/connect(host:port:)","title":"func connect(host: String, port: Int) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/connect(to:)","title":"func connect(to: SocketAddress) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/connect(unixdomainsocketpath:)","title":"func connect(unixDomainSocketPath: String) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/connecttimeout(_:)","title":"func connectTimeout(TimeAmount) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/protocolhandlers(_:)","title":"func protocolHandlers(() -> [ChannelHandler]) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/resolver(_:)","title":"func resolver(Resolver?) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(_:)","title":"func withConnectedSocket(NIOBSDSocket.Handle) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(descriptor:)","title":"func withConnectedSocket(descriptor: CInt) -> EventLoopFuture<Channel>","type":"method"}],"path":"\/documentation\/nioposix\/clientbootstrap","title":"ClientBootstrap","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/init(group:)","title":"convenience init(group: EventLoopGroup)","type":"init"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/init(validatinggroup:)","title":"init?(validatingGroup: EventLoopGroup)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/bind(host:port:)","title":"func bind(host: String, port: Int) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/bind(to:)","title":"func bind(to: SocketAddress) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/bind(unixdomainsocketpath:)","title":"func bind(unixDomainSocketPath: String) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/bind(unixdomainsocketpath:cleanupexistingsocketfile:)","title":"func bind(unixDomainSocketPath: String, cleanupExistingSocketFile: Bool) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/channelinitializer(_:)","title":"func channelInitializer((Channel) -> EventLoopFuture<Void>) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/channeloption(_:value:)","title":"func channelOption<Option>(Option, value: Option.Value) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/withboundsocket(_:)","title":"func withBoundSocket(NIOBSDSocket.Handle) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/datagrambootstrap\/withboundsocket(descriptor:)","title":"func withBoundSocket(descriptor: CInt) -> EventLoopFuture<Channel>","type":"method"}],"path":"\/documentation\/nioposix\/datagrambootstrap","title":"DatagramBootstrap","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/init(numberofthreads:)","title":"convenience init(numberOfThreads: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/any()","title":"func any() -> EventLoop","type":"method"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/makeiterator()","title":"func makeIterator() -> EventLoopIterator","type":"method"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/next()","title":"func next() -> EventLoop","type":"method"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/shutdowngracefully(queue:_:)","title":"func shutdownGracefully(queue: DispatchQueue, (Error?) -> Void)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/currenteventloop","title":"static var currentEventLoop: EventLoop?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/withcurrentthreadaseventloop(_:)","title":"static func withCurrentThreadAsEventLoop((EventLoop) -> Void)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/description-7xc59","title":"var description: String","type":"property"}],"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/description-9u0zk","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/shutdowngracefully()","title":"func shutdownGracefully() async throws","type":"method"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/shutdowngracefully(_:)","title":"func shutdownGracefully((Error?) -> Void)","type":"method"},{"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/syncshutdowngracefully()","title":"func syncShutdownGracefully() throws","type":"method"}],"path":"\/documentation\/nioposix\/multithreadedeventloopgroup\/eventloopgroup-implementations","title":"EventLoopGroup Implementations","type":"symbol"}],"path":"\/documentation\/nioposix\/multithreadedeventloopgroup","title":"MultiThreadedEventLoopGroup","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niopipebootstrap\/init(group:)","title":"convenience init(group: EventLoopGroup)","type":"init"},{"path":"\/documentation\/nioposix\/niopipebootstrap\/init(validatinggroup:)","title":"init?(validatingGroup: EventLoopGroup)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niopipebootstrap\/channelinitializer(_:)","title":"func channelInitializer((Channel) -> EventLoopFuture<Void>) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/niopipebootstrap\/channeloption(_:value:)","title":"func channelOption<Option>(Option, value: Option.Value) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/niopipebootstrap\/withinputoutputdescriptor(_:)","title":"func withInputOutputDescriptor(CInt) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/niopipebootstrap\/withpipes(inputdescriptor:outputdescriptor:)","title":"func withPipes(inputDescriptor: CInt, outputDescriptor: CInt) -> EventLoopFuture<Channel>","type":"method"}],"path":"\/documentation\/nioposix\/niopipebootstrap","title":"NIOPipeBootstrap","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niothreadpool\/init(numberofthreads:)","title":"init(numberOfThreads: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niothreadpool\/runifactive(eventloop:_:)","title":"func runIfActive<T>(eventLoop: EventLoop, () throws -> T) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/nioposix\/niothreadpool\/shutdowngracefully(_:)","title":"func shutdownGracefully((Error?) -> Void)","type":"method"},{"path":"\/documentation\/nioposix\/niothreadpool\/shutdowngracefully(queue:_:)","title":"func shutdownGracefully(queue: DispatchQueue, (Error?) -> Void)","type":"method"},{"path":"\/documentation\/nioposix\/niothreadpool\/start()","title":"func start()","type":"method"},{"path":"\/documentation\/nioposix\/niothreadpool\/submit(_:)","title":"func submit(NIOThreadPool.WorkItem)","type":"method"},{"path":"\/documentation\/nioposix\/niothreadpool\/syncshutdowngracefully()","title":"func syncShutdownGracefully() throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niothreadpool\/workitem","title":"NIOThreadPool.WorkItem","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niothreadpool\/workitemstate\/active","title":"case active","type":"case"},{"path":"\/documentation\/nioposix\/niothreadpool\/workitemstate\/cancelled","title":"case cancelled","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niothreadpool\/workitemstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioposix\/niothreadpool\/workitemstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioposix\/niothreadpool\/workitemstate","title":"NIOThreadPool.WorkItemState","type":"enum"}],"path":"\/documentation\/nioposix\/niothreadpool","title":"NIOThreadPool","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/serverbootstrap\/init(group:)","title":"convenience init(group: EventLoopGroup)","type":"init"},{"path":"\/documentation\/nioposix\/serverbootstrap\/init(group:childgroup:)","title":"convenience init(group: EventLoopGroup, childGroup: EventLoopGroup)","type":"init"},{"path":"\/documentation\/nioposix\/serverbootstrap\/init(validatinggroup:childgroup:)","title":"init?(validatingGroup: EventLoopGroup, childGroup: EventLoopGroup?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/serverbootstrap\/bind(host:port:)","title":"func bind(host: String, port: Int) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/bind(to:)","title":"func bind(to: SocketAddress) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/bind(unixdomainsocketpath:)","title":"func bind(unixDomainSocketPath: String) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/bind(unixdomainsocketpath:cleanupexistingsocketfile:)","title":"func bind(unixDomainSocketPath: String, cleanupExistingSocketFile: Bool) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/bindtimeout(_:)","title":"func bindTimeout(TimeAmount) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/childchannelinitializer(_:)","title":"func childChannelInitializer((Channel) -> EventLoopFuture<Void>) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/childchanneloption(_:value:)","title":"func childChannelOption<Option>(Option, value: Option.Value) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/serverchannelinitializer(_:)","title":"func serverChannelInitializer((Channel) -> EventLoopFuture<Void>) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/serverchanneloption(_:value:)","title":"func serverChannelOption<Option>(Option, value: Option.Value) -> Self","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/withboundsocket(_:)","title":"func withBoundSocket(NIOBSDSocket.Handle) -> EventLoopFuture<Channel>","type":"method"},{"path":"\/documentation\/nioposix\/serverbootstrap\/withboundsocket(descriptor:)","title":"func withBoundSocket(descriptor: CInt) -> EventLoopFuture<Channel>","type":"method"}],"path":"\/documentation\/nioposix\/serverbootstrap","title":"ServerBootstrap","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/threadspecificvariable\/init()","title":"init()","type":"init"},{"path":"\/documentation\/nioposix\/threadspecificvariable\/init(value:)","title":"convenience init(value: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioposix\/threadspecificvariable\/currentvalue","title":"var currentValue: Value?","type":"property"}],"path":"\/documentation\/nioposix\/threadspecificvariable","title":"ThreadSpecificVariable","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/resolver\/cancelqueries()","title":"func cancelQueries()","type":"method"},{"path":"\/documentation\/nioposix\/resolver\/initiateaaaaquery(host:port:)","title":"func initiateAAAAQuery(host: String, port: Int) -> EventLoopFuture<[SocketAddress]>","type":"method"},{"path":"\/documentation\/nioposix\/resolver\/initiateaquery(host:port:)","title":"func initiateAQuery(host: String, port: Int) -> EventLoopFuture<[SocketAddress]>","type":"method"}],"path":"\/documentation\/nioposix\/resolver","title":"Resolver","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioposix\/nioconnectionerror\/connectionerrors","title":"var connectionErrors: [SingleConnectionFailure]","type":"property"},{"path":"\/documentation\/nioposix\/nioconnectionerror\/dnsaaaaerror","title":"var dnsAAAAError: Error?","type":"property"},{"path":"\/documentation\/nioposix\/nioconnectionerror\/dnsaerror","title":"var dnsAError: Error?","type":"property"},{"path":"\/documentation\/nioposix\/nioconnectionerror\/host","title":"let host: String","type":"property"},{"path":"\/documentation\/nioposix\/nioconnectionerror\/port","title":"let port: Int","type":"property"}],"path":"\/documentation\/nioposix\/nioconnectionerror","title":"NIOConnectionError","type":"struct"},{"path":"\/documentation\/nioposix\/niofailedtosetsocketnonblockingerror","title":"NIOFailedToSetSocketNonBlockingError","type":"struct"},{"path":"\/documentation\/nioposix\/niofcntlfailederror","title":"NIOFcntlFailedError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/init(threadpool:)","title":"init(threadPool: NIOThreadPool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/changefilesize(filehandle:size:eventloop:)","title":"func changeFileSize(fileHandle: NIOFileHandle, size: Int64, eventLoop: EventLoop) -> EventLoopFuture<()>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/openfile(path:eventloop:)","title":"func openFile(path: String, eventLoop: EventLoop) -> EventLoopFuture<(NIOFileHandle, FileRegion)>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/openfile(path:mode:flags:eventloop:)","title":"func openFile(path: String, mode: NIOFileHandle.Mode, flags: NIOFileHandle.Flags, eventLoop: EventLoop) -> EventLoopFuture<NIOFileHandle>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/read(filehandle:bytecount:allocator:eventloop:)","title":"func read(fileHandle: NIOFileHandle, byteCount: Int, allocator: ByteBufferAllocator, eventLoop: EventLoop) -> EventLoopFuture<ByteBuffer>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/read(filehandle:fromoffset:bytecount:allocator:eventloop:)","title":"func read(fileHandle: NIOFileHandle, fromOffset: Int64, byteCount: Int, allocator: ByteBufferAllocator, eventLoop: EventLoop) -> EventLoopFuture<ByteBuffer>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/read(fileregion:allocator:eventloop:)","title":"func read(fileRegion: FileRegion, allocator: ByteBufferAllocator, eventLoop: EventLoop) -> EventLoopFuture<ByteBuffer>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:bytecount:chunksize:allocator:eventloop:chunkhandler:)","title":"func readChunked(fileHandle: NIOFileHandle, byteCount: Int, chunkSize: Int, allocator: ByteBufferAllocator, eventLoop: EventLoop, chunkHandler: (ByteBuffer) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:fromoffset:bytecount:chunksize:allocator:eventloop:chunkhandler:)","title":"func readChunked(fileHandle: NIOFileHandle, fromOffset: Int64, byteCount: Int, chunkSize: Int, allocator: ByteBufferAllocator, eventLoop: EventLoop, chunkHandler: (ByteBuffer) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(fileregion:chunksize:allocator:eventloop:chunkhandler:)","title":"func readChunked(fileRegion: FileRegion, chunkSize: Int, allocator: ByteBufferAllocator, eventLoop: EventLoop, chunkHandler: (ByteBuffer) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/readfilesize(filehandle:eventloop:)","title":"func readFileSize(fileHandle: NIOFileHandle, eventLoop: EventLoop) -> EventLoopFuture<Int64>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/write(filehandle:buffer:eventloop:)","title":"func write(fileHandle: NIOFileHandle, buffer: ByteBuffer, eventLoop: EventLoop) -> EventLoopFuture<()>","type":"method"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/write(filehandle:tooffset:buffer:eventloop:)","title":"func write(fileHandle: NIOFileHandle, toOffset: Int64, buffer: ByteBuffer, eventLoop: EventLoop) -> EventLoopFuture<()>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/defaultchunksize","title":"static let defaultChunkSize: Int","type":"property"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/defaultthreadpoolsize","title":"static let defaultThreadPoolSize: Int","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/error\/descriptorsettononblocking","title":"case descriptorSetToNonBlocking","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/nioposix\/nonblockingfileio\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/nioposix\/nonblockingfileio\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/nioposix\/nonblockingfileio\/error","title":"NonBlockingFileIO.Error","type":"enum"}],"path":"\/documentation\/nioposix\/nonblockingfileio","title":"NonBlockingFileIO","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/nioposix\/singleconnectionfailure\/error","title":"let error: Error","type":"property"},{"path":"\/documentation\/nioposix\/singleconnectionfailure\/target","title":"let target: SocketAddress","type":"property"}],"path":"\/documentation\/nioposix\/singleconnectionfailure","title":"SingleConnectionFailure","type":"struct"},{"path":"\/documentation\/nioposix\/unixdomainsocketpathwrongtype","title":"UnixDomainSocketPathWrongType","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/nioposix\/niothreadpoolerror\/threadpoolinactive","title":"NIOThreadPoolError.ThreadPoolInactive","type":"struct"}],"path":"\/documentation\/nioposix\/niothreadpoolerror","title":"NIOThreadPoolError","type":"enum"}],"path":"\/documentation\/nioposix","title":"NIOPosix","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksclienthandler\/init(targetaddress:)","title":"init(targetAddress: SOCKSAddress)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksclienthandler\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niosocks\/socksclienthandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niosocks\/socksclienthandler\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niosocks\/socksclienthandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niosocks\/socksclienthandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksclienthandler\/inboundin","title":"SOCKSClientHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niosocks\/socksclienthandler\/inboundout","title":"SOCKSClientHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niosocks\/socksclienthandler\/outboundin","title":"SOCKSClientHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niosocks\/socksclienthandler\/outboundout","title":"SOCKSClientHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksclienthandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niosocks\/socksclienthandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksclienthandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niosocks\/socksclienthandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niosocks\/socksclienthandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksclienthandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niosocks\/socksclienthandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksclienthandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niosocks\/socksclienthandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/socksclienthandler","title":"SOCKSClientHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/inboundin","title":"SOCKSServerHandshakeHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/inboundout","title":"SOCKSServerHandshakeHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/outboundin","title":"SOCKSServerHandshakeHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/outboundout","title":"SOCKSServerHandshakeHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niosocks\/socksserverhandshakehandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/socksserverhandshakehandler","title":"SOCKSServerHandshakeHandler","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/authenticationmethod\/init(value:)","title":"init(value: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/authenticationmethod\/value","title":"var value: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/authenticationmethod\/gssapi","title":"static let gssapi: AuthenticationMethod","type":"property"},{"path":"\/documentation\/niosocks\/authenticationmethod\/noneacceptable","title":"static let noneAcceptable: AuthenticationMethod","type":"property"},{"path":"\/documentation\/niosocks\/authenticationmethod\/nonerequired","title":"static let noneRequired: AuthenticationMethod","type":"property"},{"path":"\/documentation\/niosocks\/authenticationmethod\/usernamepassword","title":"static let usernamePassword: AuthenticationMethod","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/authenticationmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/authenticationmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/authenticationmethod","title":"AuthenticationMethod","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/clientgreeting\/init(methods:)","title":"init(methods: [AuthenticationMethod])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/clientgreeting\/methods","title":"var methods: [AuthenticationMethod]","type":"property"},{"path":"\/documentation\/niosocks\/clientgreeting\/version","title":"let version: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/clientgreeting\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/clientgreeting\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/clientgreeting","title":"ClientGreeting","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockscommand\/init(value:)","title":"init(value: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockscommand\/value","title":"var value: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockscommand\/bind","title":"static let bind: SOCKSCommand","type":"property"},{"path":"\/documentation\/niosocks\/sockscommand\/connect","title":"static let connect: SOCKSCommand","type":"property"},{"path":"\/documentation\/niosocks\/sockscommand\/udpassociate","title":"static let udpAssociate: SOCKSCommand","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockscommand\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockscommand\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockscommand","title":"SOCKSCommand","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksproxyestablishedevent\/init()","title":"init()","type":"init"}],"path":"\/documentation\/niosocks\/socksproxyestablishedevent","title":"SOCKSProxyEstablishedEvent","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksrequest\/init(command:addresstype:)","title":"init(command: SOCKSCommand, addressType: SOCKSAddress)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksrequest\/addresstype","title":"var addressType: SOCKSAddress","type":"property"},{"path":"\/documentation\/niosocks\/socksrequest\/command","title":"var command: SOCKSCommand","type":"property"},{"path":"\/documentation\/niosocks\/socksrequest\/version","title":"let version: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksrequest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/socksrequest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/socksrequest","title":"SOCKSRequest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksresponse\/init(reply:boundaddress:)","title":"init(reply: SOCKSServerReply, boundAddress: SOCKSAddress)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksresponse\/boundaddress","title":"var boundAddress: SOCKSAddress","type":"property"},{"path":"\/documentation\/niosocks\/socksresponse\/reply","title":"var reply: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksresponse\/version","title":"let version: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksresponse\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/socksresponse\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/socksresponse","title":"SOCKSResponse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverreply\/init(value:)","title":"init(value: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverreply\/value","title":"var value: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverreply\/addressunsupported","title":"static let addressUnsupported: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/commandunsupported","title":"static let commandUnsupported: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/hostunreachable","title":"static let hostUnreachable: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/networkunreachable","title":"static let networkUnreachable: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/notallowed","title":"static let notAllowed: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/refused","title":"static let refused: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/serverfailure","title":"static let serverFailure: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/succeeded","title":"static let succeeded: SOCKSServerReply","type":"property"},{"path":"\/documentation\/niosocks\/socksserverreply\/ttlexpired","title":"static let ttlExpired: SOCKSServerReply","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksserverreply\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/socksserverreply\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/socksserverreply","title":"SOCKSServerReply","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/selectedauthenticationmethod\/init(method:)","title":"init(method: AuthenticationMethod)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/selectedauthenticationmethod\/method","title":"var method: AuthenticationMethod","type":"property"},{"path":"\/documentation\/niosocks\/selectedauthenticationmethod\/version","title":"let version: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/selectedauthenticationmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/selectedauthenticationmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/selectedauthenticationmethod","title":"SelectedAuthenticationMethod","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niosocks\/clientmessage\/authenticationdata(_:)","title":"case authenticationData(ByteBuffer)","type":"case"},{"path":"\/documentation\/niosocks\/clientmessage\/greeting(_:)","title":"case greeting(ClientGreeting)","type":"case"},{"path":"\/documentation\/niosocks\/clientmessage\/request(_:)","title":"case request(SOCKSRequest)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/clientmessage\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/clientmessage\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/clientmessage","title":"ClientMessage","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksaddress\/address(_:)","title":"case address(SocketAddress)","type":"case"},{"path":"\/documentation\/niosocks\/socksaddress\/domain(_:port:)","title":"case domain(String, port: Int)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/socksaddress\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/socksaddress\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/socksaddress","title":"SOCKSAddress","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/connectionfailed\/init(reply:)","title":"init(reply: SOCKSServerReply)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/connectionfailed\/reply","title":"var reply: SOCKSServerReply","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/connectionfailed\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/connectionfailed\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/connectionfailed","title":"SOCKSError.ConnectionFailed","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidaddresstype\/init(actual:)","title":"init(actual: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidaddresstype\/actual","title":"var actual: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidaddresstype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/invalidaddresstype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/invalidaddresstype","title":"SOCKSError.InvalidAddressType","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidauthenticationselection\/init(selection:)","title":"init(selection: AuthenticationMethod)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidauthenticationselection\/selection","title":"var selection: AuthenticationMethod","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidauthenticationselection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/invalidauthenticationselection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/invalidauthenticationselection","title":"SOCKSError.InvalidAuthenticationSelection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidclientstate\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidclientstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/invalidclientstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/invalidclientstate","title":"SOCKSError.InvalidClientState","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidprotocolversion\/init(actual:)","title":"init(actual: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidprotocolversion\/actual","title":"var actual: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidprotocolversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/invalidprotocolversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/invalidprotocolversion","title":"SOCKSError.InvalidProtocolVersion","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidreservedbyte\/init(actual:)","title":"init(actual: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidreservedbyte\/actual","title":"var actual: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidreservedbyte\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/invalidreservedbyte\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/invalidreservedbyte","title":"SOCKSError.InvalidReservedByte","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidserverstate\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/invalidserverstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/invalidserverstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/invalidserverstate","title":"SOCKSError.InvalidServerState","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/novalidauthenticationmethod\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/novalidauthenticationmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/novalidauthenticationmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/novalidauthenticationmethod","title":"SOCKSError.NoValidAuthenticationMethod","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/unexpectedread\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/sockserror\/unexpectedread\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/sockserror\/unexpectedread\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/sockserror\/unexpectedread","title":"SOCKSError.UnexpectedRead","type":"struct"}],"path":"\/documentation\/niosocks\/sockserror","title":"SOCKSError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niosocks\/servermessage\/authenticationdata(_:complete:)","title":"case authenticationData(ByteBuffer, complete: Bool)","type":"case"},{"path":"\/documentation\/niosocks\/servermessage\/response(_:)","title":"case response(SOCKSResponse)","type":"case"},{"path":"\/documentation\/niosocks\/servermessage\/selectedauthenticationmethod(_:)","title":"case selectedAuthenticationMethod(SelectedAuthenticationMethod)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niosocks\/servermessage\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niosocks\/servermessage\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niosocks\/servermessage","title":"ServerMessage","type":"enum"}],"path":"\/documentation\/niosocks","title":"NIOSOCKS","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificate\/init(buffer:format:)","title":"convenience init(buffer: [Int8], format: NIOSSLSerializationFormats) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslcertificate\/init(bytes:format:)","title":"convenience init(bytes: [UInt8], format: NIOSSLSerializationFormats) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslcertificate\/init(file:format:)","title":"convenience init(file: String, format: NIOSSLSerializationFormats) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificate\/notvalidafter","title":"var notValidAfter: time_t","type":"property"},{"path":"\/documentation\/niossl\/niosslcertificate\/notvalidbefore","title":"var notValidBefore: time_t","type":"property"},{"path":"\/documentation\/niossl\/niosslcertificate\/serialnumber","title":"var serialNumber: [UInt8]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificate\/extractpublickey()","title":"func extractPublicKey() throws -> NIOSSLPublicKey","type":"method"},{"path":"\/documentation\/niossl\/niosslcertificate\/toderbytes()","title":"func toDERBytes() throws -> [UInt8]","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificate\/frompembuffer(_:)","title":"class func fromPEMBuffer([Int8]) throws -> [NIOSSLCertificate]","type":"method"},{"path":"\/documentation\/niossl\/niosslcertificate\/frompembytes(_:)","title":"class func fromPEMBytes([UInt8]) throws -> [NIOSSLCertificate]","type":"method"},{"path":"\/documentation\/niossl\/niosslcertificate\/frompemfile(_:)","title":"class func fromPEMFile(String) throws -> [NIOSSLCertificate]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificate\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niossl\/niosslcertificate\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niossl\/niosslcertificate\/==(_:_:)","title":"static func == (NIOSSLCertificate, NIOSSLCertificate) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslcertificate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niossl\/niosslcertificate\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslcertificate","title":"NIOSSLCertificate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslclienthandler\/init(context:serverhostname:)","title":"convenience init(context: NIOSSLContext, serverHostname: String?) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslclienthandler\/init(context:serverhostname:customverificationcallback:)","title":"convenience init(context: NIOSSLContext, serverHostname: String?, customVerificationCallback: NIOSSLCustomVerificationCallback) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslclienthandler\/init(context:serverhostname:verificationcallback:)","title":"init(context: NIOSSLContext, serverHostname: String?, verificationCallback: NIOSSLVerificationCallback?) throws","type":"init"}],"path":"\/documentation\/niossl\/niosslclienthandler","title":"NIOSSLClientHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcontext\/init(configuration:)","title":"convenience init(configuration: TLSConfiguration) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslcontext\/init(configuration:passphrasecallback:)","title":"convenience init<T>(configuration: TLSConfiguration, passphraseCallback: NIOSSLPassphraseCallback<T>) throws","type":"init"}],"path":"\/documentation\/niossl\/niosslcontext","title":"NIOSSLContext","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslhandler\/tlsversion","title":"var tlsVersion: TLSVersion?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslhandler\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/channelreadcomplete(context:)","title":"func channelReadComplete(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/close(context:mode:promise:)","title":"func close(context: ChannelHandlerContext, mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/stoptls(promise:)","title":"func stopTLS(promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslhandler\/inboundin","title":"NIOSSLHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niossl\/niosslhandler\/inboundout","title":"NIOSSLHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niossl\/niosslhandler\/outboundin","title":"NIOSSLHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niossl\/niosslhandler\/outboundout","title":"NIOSSLHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslhandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niossl\/niosslhandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niossl\/niosslhandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslhandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niossl\/niosslhandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslhandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niossl\/niosslhandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslhandler","title":"NIOSSLHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslprivatekey\/init(buffer:format:)","title":"convenience init(buffer: [Int8], format: NIOSSLSerializationFormats) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslprivatekey\/init(buffer:format:passphrasecallback:)","title":"convenience init<T>(buffer: [Int8], format: NIOSSLSerializationFormats, passphraseCallback: NIOSSLPassphraseCallback<T>) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslprivatekey\/init(bytes:format:)","title":"convenience init(bytes: [UInt8], format: NIOSSLSerializationFormats) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslprivatekey\/init(bytes:format:passphrasecallback:)","title":"convenience init<T>(bytes: [UInt8], format: NIOSSLSerializationFormats, passphraseCallback: NIOSSLPassphraseCallback<T>) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslprivatekey\/init(customprivatekey:)","title":"init<CustomKey>(customPrivateKey: CustomKey)","type":"init"},{"path":"\/documentation\/niossl\/niosslprivatekey\/init(file:format:)","title":"convenience init(file: String, format: NIOSSLSerializationFormats) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslprivatekey\/init(file:format:passphrasecallback:)","title":"convenience init<T>(file: String, format: NIOSSLSerializationFormats, passphraseCallback: NIOSSLPassphraseCallback<T>) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslprivatekey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niossl\/niosslprivatekey\/==(_:_:)","title":"static func == (NIOSSLPrivateKey, NIOSSLPrivateKey) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslprivatekey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslprivatekey\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niossl\/niosslprivatekey\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslprivatekey","title":"NIOSSLPrivateKey","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslpublickey\/tospkibytes()","title":"func toSPKIBytes() throws -> [UInt8]","type":"method"}],"path":"\/documentation\/niossl\/niosslpublickey","title":"NIOSSLPublicKey","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslserverhandler\/init(context:)","title":"convenience init(context: NIOSSLContext)","type":"init"},{"path":"\/documentation\/niossl\/niosslserverhandler\/init(context:customverificationcallback:)","title":"convenience init(context: NIOSSLContext, customVerificationCallback: NIOSSLCustomVerificationCallback)","type":"init"},{"path":"\/documentation\/niossl\/niosslserverhandler\/init(context:verificationcallback:)","title":"init(context: NIOSSLContext, verificationCallback: NIOSSLVerificationCallback?) throws","type":"init"}],"path":"\/documentation\/niossl\/niosslserverhandler","title":"NIOSSLServerHandler","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcustomprivatekey\/signaturealgorithms","title":"var signatureAlgorithms: [SignatureAlgorithm]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcustomprivatekey\/decrypt(channel:data:)","title":"func decrypt(channel: Channel, data: ByteBuffer) -> EventLoopFuture<ByteBuffer>","type":"method"},{"path":"\/documentation\/niossl\/niosslcustomprivatekey\/sign(channel:algorithm:data:)","title":"func sign(channel: Channel, algorithm: SignatureAlgorithm, data: ByteBuffer) -> EventLoopFuture<ByteBuffer>","type":"method"}],"path":"\/documentation\/niossl\/niosslcustomprivatekey","title":"NIOSSLCustomPrivateKey","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/boringsslinternalerror\/description","title":"var description: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/boringsslinternalerror\/eofduringhandshake","title":"static let eofDuringHandshake: BoringSSLInternalError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/boringsslinternalerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/boringsslinternalerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/boringsslinternalerror","title":"BoringSSLInternalError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslclienttlsprovider\/init(context:serverhostname:customverificationcallback:)","title":"init(context: NIOSSLContext, serverHostname: String?, customVerificationCallback: NIOSSLCustomVerificationCallback?) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslclienttlsprovider\/enabletls(_:)","title":"func enableTLS(Bootstrap) -> Bootstrap","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslclienttlsprovider\/bootstrap","title":"NIOSSLClientTLSProvider.Bootstrap","type":"typealias"}],"path":"\/documentation\/niossl\/niosslclienttlsprovider","title":"NIOSSLClientTLSProvider","type":"struct"},{"path":"\/documentation\/niossl\/niosslclosetimedouterror","title":"NIOSSLCloseTimedOutError","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslextraerror\/cannotuseipaddressinsni","title":"static let cannotUseIPAddressInSNI: NIOSSLExtraError","type":"property"},{"path":"\/documentation\/niossl\/niosslextraerror\/failedtovalidatehostname","title":"static let failedToValidateHostname: NIOSSLExtraError","type":"property"},{"path":"\/documentation\/niossl\/niosslextraerror\/invalidsnihostname","title":"static let invalidSNIHostname: NIOSSLExtraError","type":"property"},{"path":"\/documentation\/niossl\/niosslextraerror\/serverhostnameimpossibletomatch","title":"static let serverHostnameImpossibleToMatch: NIOSSLExtraError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslextraerror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niossl\/niosslextraerror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslextraerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niossl\/niosslextraerror\/==(_:_:)","title":"static func == (NIOSSLExtraError, NIOSSLExtraError) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslextraerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslextraerror","title":"NIOSSLExtraError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslpkcs12bundle\/init(buffer:)","title":"init(buffer: [UInt8]) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslpkcs12bundle\/init(buffer:passphrase:)","title":"init<Bytes>(buffer: [UInt8], passphrase: Bytes?) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslpkcs12bundle\/init(file:)","title":"init(file: String) throws","type":"init"},{"path":"\/documentation\/niossl\/niosslpkcs12bundle\/init(file:passphrase:)","title":"init<Bytes>(file: String, passphrase: Bytes?) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslpkcs12bundle\/certificatechain","title":"let certificateChain: [NIOSSLCertificate]","type":"property"},{"path":"\/documentation\/niossl\/niosslpkcs12bundle\/privatekey","title":"let privateKey: NIOSSLPrivateKey","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslpkcs12bundle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslpkcs12bundle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslpkcs12bundle","title":"NIOSSLPKCS12Bundle","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlscipher\/init(_:)","title":"init(NIOTLSCipher.RawValue)","type":"init"},{"path":"\/documentation\/niossl\/niotlscipher\/init(rawvalue:)","title":"init(rawValue: UInt16)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlscipher\/rawvalue-swift.property","title":"var rawValue: UInt16","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlscipher\/rawvalue-swift.typealias","title":"NIOTLSCipher.RawValue","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_aes_128_gcm_sha256","title":"static let TLS_AES_128_GCM_SHA256: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_aes_256_gcm_sha384","title":"static let TLS_AES_256_GCM_SHA384: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_chacha20_poly1305_sha256","title":"static let TLS_CHACHA20_POLY1305_SHA256: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_ecdsa_with_aes_128_cbc_sha","title":"static let TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_ecdsa_with_aes_128_gcm_sha256","title":"static let TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_ecdsa_with_aes_256_cbc_sha","title":"static let TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_ecdsa_with_aes_256_gcm_sha384","title":"static let TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_ecdsa_with_chacha20_poly1305_sha256","title":"static let TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_rsa_with_aes_128_cbc_sha","title":"static let TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_rsa_with_aes_128_gcm_sha256","title":"static let TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_rsa_with_aes_256_cbc_sha","title":"static let TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_rsa_with_aes_256_gcm_sha384","title":"static let TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_ecdhe_rsa_with_chacha20_poly1305_sha256","title":"static let TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_rsa_with_aes_128_cbc_sha","title":"static let TLS_RSA_WITH_AES_128_CBC_SHA: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_rsa_with_aes_128_gcm_sha256","title":"static let TLS_RSA_WITH_AES_128_GCM_SHA256: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_rsa_with_aes_256_cbc_sha","title":"static let TLS_RSA_WITH_AES_256_CBC_SHA: NIOTLSCipher","type":"property"},{"path":"\/documentation\/niossl\/niotlscipher\/tls_rsa_with_aes_256_gcm_sha384","title":"static let TLS_RSA_WITH_AES_256_GCM_SHA384: NIOTLSCipher","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlscipher\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niotlscipher\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlscipher\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlscipher\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niossl\/niotlscipher\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niotlscipher","title":"NIOTLSCipher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niossl\/signaturealgorithm\/init(rawvalue:)","title":"init(rawValue: UInt16)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rawvalue-swift.property","title":"var rawValue: UInt16","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rawvalue-swift.typealias","title":"SignatureAlgorithm.RawValue","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/signaturealgorithm\/ecdsasecp256r1sha256","title":"static let ecdsaSecp256R1Sha256: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/ecdsasecp384r1sha384","title":"static let ecdsaSecp384R1Sha384: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/ecdsasecp521r1sha512","title":"static let ecdsaSecp521R1Sha512: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/ecdsasha1","title":"static let ecdsaSha1: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/ed25519","title":"static let ed25519: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rsapkcs1sha1","title":"static let rsaPkcs1Sha1: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rsapkcs1sha256","title":"static let rsaPkcs1Sha256: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rsapkcs1sha384","title":"static let rsaPkcs1Sha384: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rsapkcs1sha512","title":"static let rsaPkcs1Sha512: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rsapssrsaesha256","title":"static let rsaPssRsaeSha256: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rsapssrsaesha384","title":"static let rsaPssRsaeSha384: SignatureAlgorithm","type":"property"},{"path":"\/documentation\/niossl\/signaturealgorithm\/rsapssrsaesha512","title":"static let rsaPssRsaeSha512: SignatureAlgorithm","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/signaturealgorithm\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/signaturealgorithm\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/signaturealgorithm\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/signaturealgorithm\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/niossl\/signaturealgorithm\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/signaturealgorithm","title":"SignatureAlgorithm","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/tlsconfiguration\/additionaltrustroots","title":"var additionalTrustRoots: [NIOSSLAdditionalTrustRoots]","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/applicationprotocols","title":"var applicationProtocols: [String]","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/certificatechain","title":"var certificateChain: [NIOSSLCertificateSource]","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/certificateverification","title":"var certificateVerification: CertificateVerification","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/ciphersuitevalues","title":"var cipherSuiteValues: [NIOTLSCipher]","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/ciphersuites","title":"var cipherSuites: String","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/keylogcallback","title":"var keyLogCallback: NIOSSLKeyLogCallback?","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/maximumtlsversion","title":"var maximumTLSVersion: TLSVersion?","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/minimumtlsversion","title":"var minimumTLSVersion: TLSVersion","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/privatekey","title":"var privateKey: NIOSSLPrivateKeySource?","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/renegotiationsupport","title":"var renegotiationSupport: NIORenegotiationSupport","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/sendcanamelist","title":"var sendCANameList: Bool","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/shutdowntimeout","title":"var shutdownTimeout: TimeAmount","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/signingsignaturealgorithms","title":"var signingSignatureAlgorithms: [SignatureAlgorithm]?","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/trustroots","title":"var trustRoots: NIOSSLTrustRoots?","type":"property"},{"path":"\/documentation\/niossl\/tlsconfiguration\/verifysignaturealgorithms","title":"var verifySignatureAlgorithms: [SignatureAlgorithm]?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/tlsconfiguration\/besteffortequals(_:)","title":"func bestEffortEquals(TLSConfiguration) -> Bool","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/bestefforthash(into:)","title":"func bestEffortHash(into: inout Hasher)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niossl\/tlsconfiguration\/clientdefault","title":"static let clientDefault: TLSConfiguration","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forclient(ciphersuites:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:certificatechain:privatekey:applicationprotocols:shutdowntimeout:keylogcallback:)","title":"static func forClient(cipherSuites: String, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource?, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forclient(ciphersuites:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:certificatechain:privatekey:applicationprotocols:shutdowntimeout:keylogcallback:renegotiationsupport:)","title":"static func forClient(cipherSuites: String, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource?, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?, renegotiationSupport: NIORenegotiationSupport) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forclient(ciphersuites:verifysignaturealgorithms:signingsignaturealgorithms:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:certificatechain:privatekey:applicationprotocols:shutdowntimeout:keylogcallback:renegotiation-6jvq5","title":"static func forClient(cipherSuites: String, verifySignatureAlgorithms: [SignatureAlgorithm]?, signingSignatureAlgorithms: [SignatureAlgorithm]?, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource?, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?, renegotiationSupport: NIORenegotiationSupport) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forclient(ciphersuites:verifysignaturealgorithms:signingsignaturealgorithms:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:certificatechain:privatekey:applicationprotocols:shutdowntimeout:keylogcallback:renegotiation-7bizh","title":"static func forClient(cipherSuites: [NIOTLSCipher], verifySignatureAlgorithms: [SignatureAlgorithm]?, signingSignatureAlgorithms: [SignatureAlgorithm]?, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource?, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?, renegotiationSupport: NIORenegotiationSupport, additionalTrustRoots: [NIOSSLAdditionalTrustRoots]) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forclient(ciphersuites:verifysignaturealgorithms:signingsignaturealgorithms:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:certificatechain:privatekey:applicationprotocols:shutdowntimeout:keylogcallback:renegotiation-5mdqz","title":"static func forClient(cipherSuites: String, verifySignatureAlgorithms: [SignatureAlgorithm]?, signingSignatureAlgorithms: [SignatureAlgorithm]?, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource?, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?, renegotiationSupport: NIORenegotiationSupport, additionalTrustRoots: [NIOSSLAdditionalTrustRoots]) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forserver(certificatechain:privatekey:ciphersuites:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:applicationprotocols:shutdowntimeout:keylogcallback:)","title":"static func forServer(certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource, cipherSuites: String, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forserver(certificatechain:privatekey:ciphersuites:verifysignaturealgorithms:signingsignaturealgorithms:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:applicationprotocols:shutdowntimeout:keylogcallback:)","title":"static func forServer(certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource, cipherSuites: String, verifySignatureAlgorithms: [SignatureAlgorithm]?, signingSignatureAlgorithms: [SignatureAlgorithm]?, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forserver(certificatechain:privatekey:ciphersuites:verifysignaturealgorithms:signingsignaturealgorithms:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:applicationprotocols:shutdowntimeout:keylogcallback:additionaltru-ucoq","title":"static func forServer(certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource, cipherSuites: String, verifySignatureAlgorithms: [SignatureAlgorithm]?, signingSignatureAlgorithms: [SignatureAlgorithm]?, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?, additionalTrustRoots: [NIOSSLAdditionalTrustRoots]) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/forserver(certificatechain:privatekey:ciphersuites:verifysignaturealgorithms:signingsignaturealgorithms:minimumtlsversion:maximumtlsversion:certificateverification:trustroots:applicationprotocols:shutdowntimeout:keylogcallback:additionaltru-3offt","title":"static func forServer(certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource, cipherSuites: [NIOTLSCipher], verifySignatureAlgorithms: [SignatureAlgorithm]?, signingSignatureAlgorithms: [SignatureAlgorithm]?, minimumTLSVersion: TLSVersion, maximumTLSVersion: TLSVersion?, certificateVerification: CertificateVerification, trustRoots: NIOSSLTrustRoots, applicationProtocols: [String], shutdownTimeout: TimeAmount, keyLogCallback: NIOSSLKeyLogCallback?, additionalTrustRoots: [NIOSSLAdditionalTrustRoots]) -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/makeclientconfiguration()","title":"static func makeClientConfiguration() -> TLSConfiguration","type":"method"},{"path":"\/documentation\/niossl\/tlsconfiguration\/makeserverconfiguration(certificatechain:privatekey:)","title":"static func makeServerConfiguration(certificateChain: [NIOSSLCertificateSource], privateKey: NIOSSLPrivateKeySource) -> TLSConfiguration","type":"method"}],"path":"\/documentation\/niossl\/tlsconfiguration","title":"TLSConfiguration","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/niossl\/defaultciphersuites","title":"let defaultCipherSuites: String","type":"var"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niossl\/nioboringsslerrorstack","title":"NIOBoringSSLErrorStack","type":"typealias"},{"path":"\/documentation\/niossl\/niosslcustomverificationcallback","title":"NIOSSLCustomVerificationCallback","type":"typealias"},{"path":"\/documentation\/niossl\/niosslkeylogcallback","title":"NIOSSLKeyLogCallback","type":"typealias"},{"path":"\/documentation\/niossl\/niosslpassphrasecallback","title":"NIOSSLPassphraseCallback","type":"typealias"},{"path":"\/documentation\/niossl\/niosslpassphrasesetter","title":"NIOSSLPassphraseSetter","type":"typealias"},{"path":"\/documentation\/niossl\/niosslverificationcallback","title":"NIOSSLVerificationCallback","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/boringsslerror\/failedtosetalpn(_:)","title":"case failedToSetALPN(NIOBoringSSLErrorStack)","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/invalidsniname(_:)","title":"case invalidSNIName(NIOBoringSSLErrorStack)","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/noerror","title":"case noError","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/sslerror(_:)","title":"case sslError(NIOBoringSSLErrorStack)","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/syscallerror","title":"case syscallError","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/unknownerror(_:)","title":"case unknownError(NIOBoringSSLErrorStack)","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/wantaccept","title":"case wantAccept","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/wantcertificateverify","title":"case wantCertificateVerify","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/wantconnect","title":"case wantConnect","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/wantread","title":"case wantRead","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/wantwrite","title":"case wantWrite","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/wantx509lookup","title":"case wantX509Lookup","type":"case"},{"path":"\/documentation\/niossl\/boringsslerror\/zeroreturn","title":"case zeroReturn","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/boringsslerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/boringsslerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/boringsslerror","title":"BoringSSLError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/certificateverification\/fullverification","title":"case fullVerification","type":"case"},{"path":"\/documentation\/niossl\/certificateverification\/nohostnameverification","title":"case noHostnameVerification","type":"case"},{"path":"\/documentation\/niossl\/certificateverification\/none","title":"case none","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/certificateverification\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/certificateverification\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/certificateverification","title":"CertificateVerification","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niorenegotiationsupport\/always","title":"case always","type":"case"},{"path":"\/documentation\/niossl\/niorenegotiationsupport\/none","title":"case none","type":"case"},{"path":"\/documentation\/niossl\/niorenegotiationsupport\/once","title":"case once","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niorenegotiationsupport\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niorenegotiationsupport\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niorenegotiationsupport","title":"NIORenegotiationSupport","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niossladditionaltrustroots\/certificates(_:)","title":"case certificates([NIOSSLCertificate])","type":"case"},{"path":"\/documentation\/niossl\/niossladditionaltrustroots\/file(_:)","title":"case file(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niossladditionaltrustroots\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niossladditionaltrustroots\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niossladditionaltrustroots","title":"NIOSSLAdditionalTrustRoots","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificatesource\/certificate(_:)","title":"case certificate(NIOSSLCertificate)","type":"case"},{"path":"\/documentation\/niossl\/niosslcertificatesource\/file(_:)","title":"case file(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslcertificatesource\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslcertificatesource\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslcertificatesource","title":"NIOSSLCertificateSource","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslerror\/cannotfindpeerip","title":"case cannotFindPeerIP","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/cannotmatchulabel","title":"case cannotMatchULabel","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/failedtoloadcertificate","title":"case failedToLoadCertificate","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/failedtoloadprivatekey","title":"case failedToLoadPrivateKey","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/handshakefailed(_:)","title":"case handshakeFailed(BoringSSLError)","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/nocertificatetovalidate","title":"case noCertificateToValidate","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/nosuchfilesystemobject","title":"case noSuchFilesystemObject","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/readininvalidtlsstate","title":"case readInInvalidTLSState","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/shutdownfailed(_:)","title":"case shutdownFailed(BoringSSLError)","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/unabletoallocateboringsslobject","title":"case unableToAllocateBoringSSLObject","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/unabletovalidatecertificate","title":"case unableToValidateCertificate","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/uncleanshutdown","title":"case uncleanShutdown","type":"case"},{"path":"\/documentation\/niossl\/niosslerror\/writeduringtlsshutdown","title":"case writeDuringTLSShutdown","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslerror","title":"NIOSSLError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslprivatekeysource\/file(_:)","title":"case file(String)","type":"case"},{"path":"\/documentation\/niossl\/niosslprivatekeysource\/privatekey(_:)","title":"case privateKey(NIOSSLPrivateKey)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslprivatekeysource\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslprivatekeysource\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslprivatekeysource","title":"NIOSSLPrivateKeySource","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslserializationformats\/der","title":"case der","type":"case"},{"path":"\/documentation\/niossl\/niosslserializationformats\/pem","title":"case pem","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslserializationformats\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslserializationformats\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslserializationformats","title":"NIOSSLSerializationFormats","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niossltrustroots\/certificates(_:)","title":"case certificates([NIOSSLCertificate])","type":"case"},{"path":"\/documentation\/niossl\/niossltrustroots\/default","title":"case `default`","type":"case"},{"path":"\/documentation\/niossl\/niossltrustroots\/file(_:)","title":"case file(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niossltrustroots\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niossltrustroots\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niossltrustroots","title":"NIOSSLTrustRoots","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslverificationresult\/certificateverified","title":"case certificateVerified","type":"case"},{"path":"\/documentation\/niossl\/niosslverificationresult\/failed","title":"case failed","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niosslverificationresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niosslverificationresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niosslverificationresult","title":"NIOSSLVerificationResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlsunwrappingerror\/alreadyclosed","title":"case alreadyClosed","type":"case"},{"path":"\/documentation\/niossl\/niotlsunwrappingerror\/closerequestedduringunwrap","title":"case closeRequestedDuringUnwrap","type":"case"},{"path":"\/documentation\/niossl\/niotlsunwrappingerror\/invalidinternalstate","title":"case invalidInternalState","type":"case"},{"path":"\/documentation\/niossl\/niotlsunwrappingerror\/unflushedwriteonunwrap","title":"case unflushedWriteOnUnwrap","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/niotlsunwrappingerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/niotlsunwrappingerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/niotlsunwrappingerror","title":"NIOTLSUnwrappingError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niossl\/tlsversion\/tlsv1","title":"case tlsv1","type":"case"},{"path":"\/documentation\/niossl\/tlsversion\/tlsv11","title":"case tlsv11","type":"case"},{"path":"\/documentation\/niossl\/tlsversion\/tlsv12","title":"case tlsv12","type":"case"},{"path":"\/documentation\/niossl\/tlsversion\/tlsv13","title":"case tlsv13","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niossl\/tlsversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niossl\/tlsversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niossl\/tlsversion","title":"TLSVersion","type":"enum"}],"path":"\/documentation\/niossl","title":"NIOSSL","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/init(alpncompletehandler:)-1b0z6","title":"convenience init(alpnCompleteHandler: (ALPNResult) -> EventLoopFuture<Void>)","type":"init"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/init(alpncompletehandler:)-8h9zw","title":"init(alpnCompleteHandler: (ALPNResult, Channel) -> EventLoopFuture<Void>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/userinboundeventtriggered(context:event:)","title":"func userInboundEventTriggered(context: ChannelHandlerContext, event: Any)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/inboundin","title":"ApplicationProtocolNegotiationHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/inboundout","title":"ApplicationProtocolNegotiationHandler.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/removehandler(context:removaltoken:)","title":"func removeHandler(context: ChannelHandlerContext, removalToken: ChannelHandlerContext.RemovalToken)","type":"method"}],"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","type":"symbol"}],"path":"\/documentation\/niotls\/applicationprotocolnegotiationhandler","title":"ApplicationProtocolNegotiationHandler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niotls\/snihandler\/init(snicompletehandler:)","title":"init(sniCompleteHandler: (SNIResult) -> EventLoopFuture<Void>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niotls\/snihandler\/cumulationbuffer","title":"var cumulationBuffer: Optional<ByteBuffer>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotls\/snihandler\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) -> DecodingState","type":"method"},{"path":"\/documentation\/niotls\/snihandler\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niotls\/snihandler\/inboundin","title":"SNIHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niotls\/snihandler\/inboundout","title":"SNIHandler.InboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotls\/snihandler\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niotls\/snihandler\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niotls\/snihandler\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/niotls\/snihandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niotls\/snihandler\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/niotls\/snihandler","title":"SNIHandler","type":"class"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niotls\/alpnresult\/fallback","title":"case fallback","type":"case"},{"path":"\/documentation\/niotls\/alpnresult\/negotiated(_:)","title":"case negotiated(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niotls\/alpnresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niotls\/alpnresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niotls\/alpnresult","title":"ALPNResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niotls\/sniresult\/fallback","title":"case fallback","type":"case"},{"path":"\/documentation\/niotls\/sniresult\/hostname(_:)","title":"case hostname(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niotls\/sniresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niotls\/sniresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niotls\/sniresult","title":"SNIResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niotls\/tlsuserevent\/handshakecompleted(negotiatedprotocol:)","title":"case handshakeCompleted(negotiatedProtocol: String?)","type":"case"},{"path":"\/documentation\/niotls\/tlsuserevent\/shutdowncompleted","title":"case shutdownCompleted","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niotls\/tlsuserevent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niotls\/tlsuserevent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niotls\/tlsuserevent","title":"TLSUserEvent","type":"enum"}],"path":"\/documentation\/niotls","title":"NIOTLS","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/flush(context:)","title":"func flush(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/inboundin","title":"NIOFilterEmptyWritesHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/inboundout","title":"NIOFilterEmptyWritesHandler.InboundOut","type":"typealias"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/outboundin","title":"NIOFilterEmptyWritesHandler.OutboundIn","type":"typealias"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/outboundout","title":"NIOFilterEmptyWritesHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/channelactive(context:)","title":"func channelActive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/channelinactive(context:)","title":"func channelInactive(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"}],"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/_channelinboundhandler-implementations","title":"_ChannelInboundHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/close(context:mode:promise:)","title":"func close(context: ChannelHandlerContext, mode: CloseMode, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler\/_channeloutboundhandler-implementations","title":"_ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niotransportservices\/niofilteremptywriteshandler","title":"NIOFilterEmptyWritesHandler","type":"class"}],"path":"\/documentation\/niotransportservices","title":"NIOTransportServices","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/init(requestkey:maxframesize:automaticerrorhandling:upgradepipelinehandler:)","title":"init(requestKey: String, maxFrameSize: Int, automaticErrorHandling: Bool, upgradePipelineHandler: (Channel, HTTPResponseHead) -> EventLoopFuture<Void>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/requiredupgradeheaders","title":"let requiredUpgradeHeaders: [String]","type":"property"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/supportedprotocol","title":"let supportedProtocol: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/addcustom(upgraderequestheaders:)","title":"func addCustom(upgradeRequestHeaders: inout HTTPHeaders)","type":"method"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/shouldallowupgrade(upgraderesponse:)","title":"func shouldAllowUpgrade(upgradeResponse: HTTPResponseHead) -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/upgrade(context:upgraderesponse:)","title":"func upgrade(context: ChannelHandlerContext, upgradeResponse: HTTPResponseHead) -> EventLoopFuture<Void>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/randomrequestkey()","title":"static func randomRequestKey() -> String","type":"method"},{"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader\/randomrequestkey(using:)","title":"static func randomRequestKey<Generator>(using: inout Generator) -> String","type":"method"}],"path":"\/documentation\/niowebsocket\/niowebsocketclientupgrader","title":"NIOWebSocketClientUpgrader","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/init(minnonfinalfragmentsize:maxaccumulatedframecount:maxaccumulatedframesize:)","title":"init(minNonFinalFragmentSize: Int, maxAccumulatedFrameCount: Int, maxAccumulatedFrameSize: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/channelread(context:data:)","title":"func channelRead(context: ChannelHandlerContext, data: NIOAny)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/inboundin","title":"NIOWebSocketFrameAggregator.InboundIn","type":"typealias"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/inboundout","title":"NIOWebSocketFrameAggregator.InboundOut","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error\/accumulatedframesizeistoolarge","title":"case accumulatedFrameSizeIsTooLarge","type":"case"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error\/didreceivefragmentbeforereceivingtextorbinaryframe","title":"case didReceiveFragmentBeforeReceivingTextOrBinaryFrame","type":"case"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error\/nonfinalfragmentsizeistoosmall","title":"case nonFinalFragmentSizeIsTooSmall","type":"case"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error\/receivednewframewithoutfinishingprevious","title":"case receivedNewFrameWithoutFinishingPrevious","type":"case"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error\/toomanyfragments","title":"case tooManyFragments","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/error","title":"NIOWebSocketFrameAggregator.Error","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/niowebsocketframeaggregator","title":"NIOWebSocketFrameAggregator","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketserverupgrader\/init(automaticerrorhandling:shouldupgrade:upgradepipelinehandler:)","title":"convenience init(automaticErrorHandling: Bool, shouldUpgrade: (Channel, HTTPRequestHead) -> EventLoopFuture<HTTPHeaders?>, upgradePipelineHandler: (Channel, HTTPRequestHead) -> EventLoopFuture<Void>)","type":"init"},{"path":"\/documentation\/niowebsocket\/niowebsocketserverupgrader\/init(maxframesize:automaticerrorhandling:shouldupgrade:upgradepipelinehandler:)","title":"init(maxFrameSize: Int, automaticErrorHandling: Bool, shouldUpgrade: (Channel, HTTPRequestHead) -> EventLoopFuture<HTTPHeaders?>, upgradePipelineHandler: (Channel, HTTPRequestHead) -> EventLoopFuture<Void>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketserverupgrader\/requiredupgradeheaders","title":"let requiredUpgradeHeaders: [String]","type":"property"},{"path":"\/documentation\/niowebsocket\/niowebsocketserverupgrader\/supportedprotocol","title":"let supportedProtocol: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketserverupgrader\/buildupgraderesponse(channel:upgraderequest:initialresponseheaders:)","title":"func buildUpgradeResponse(channel: Channel, upgradeRequest: HTTPRequestHead, initialResponseHeaders: HTTPHeaders) -> EventLoopFuture<HTTPHeaders>","type":"method"},{"path":"\/documentation\/niowebsocket\/niowebsocketserverupgrader\/upgrade(context:upgraderequest:)","title":"func upgrade(context: ChannelHandlerContext, upgradeRequest: HTTPRequestHead) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/niowebsocket\/niowebsocketserverupgrader","title":"NIOWebSocketServerUpgrader","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/init(maxframesize:)","title":"init(maxFrameSize: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/decode(context:buffer:)","title":"func decode(context: ChannelHandlerContext, buffer: inout ByteBuffer) throws -> DecodingState","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/inboundin","title":"WebSocketFrameDecoder.InboundIn","type":"typealias"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/inboundout","title":"WebSocketFrameDecoder.InboundOut","type":"typealias"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/outboundout","title":"WebSocketFrameDecoder.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/decodelast(context:buffer:seeneof:)","title":"func decodeLast(context: ChannelHandlerContext, buffer: inout ByteBuffer, seenEOF: Bool) throws -> DecodingState","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/decoderadded(context:)","title":"func decoderAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/decoderremoved(context:)","title":"func decoderRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/shouldreclaimbytes(buffer:)","title":"func shouldReclaimBytes(buffer: ByteBuffer) -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketframedecoder\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niowebsocket\/websocketframedecoder\/bytetomessagedecoder-implementations","title":"ByteToMessageDecoder Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/websocketframedecoder","title":"WebSocketFrameDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframeencoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframeencoder\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketframeencoder\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketframeencoder\/write(context:data:promise:)","title":"func write(context: ChannelHandlerContext, data: NIOAny, promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframeencoder\/outboundin","title":"WebSocketFrameEncoder.OutboundIn","type":"typealias"},{"path":"\/documentation\/niowebsocket\/websocketframeencoder\/outboundout","title":"WebSocketFrameEncoder.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframeencoder\/unwrapoutboundin(_:)","title":"func unwrapOutboundIn(NIOAny) -> Self.OutboundIn","type":"method"}],"path":"\/documentation\/niowebsocket\/websocketframeencoder\/channeloutboundhandler-implementations","title":"ChannelOutboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/websocketframeencoder","title":"WebSocketFrameEncoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/errorcaught(context:error:)","title":"func errorCaught(context: ChannelHandlerContext, error: Error)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/inboundin","title":"WebSocketProtocolErrorHandler.InboundIn","type":"typealias"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/outboundout","title":"WebSocketProtocolErrorHandler.OutboundOut","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/handleradded(context:)","title":"func handlerAdded(context: ChannelHandlerContext)","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/handlerremoved(context:)","title":"func handlerRemoved(context: ChannelHandlerContext)","type":"method"}],"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/channelhandler-implementations","title":"ChannelHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/unwrapinboundin(_:)","title":"func unwrapInboundIn(NIOAny) -> Self.InboundIn","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/wrapinboundout(_:)","title":"func wrapInboundOut(Self.InboundOut) -> NIOAny","type":"method"}],"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler\/channelinboundhandler-implementations","title":"ChannelInboundHandler Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/websocketprotocolerrorhandler","title":"WebSocketProtocolErrorHandler","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketupgradeerror\/invalidupgradeheader","title":"static let invalidUpgradeHeader: NIOWebSocketUpgradeError","type":"property"},{"path":"\/documentation\/niowebsocket\/niowebsocketupgradeerror\/unsupportedwebsockettarget","title":"static let unsupportedWebSocketTarget: NIOWebSocketUpgradeError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketupgradeerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niowebsocket\/niowebsocketupgradeerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/niowebsocketupgradeerror","title":"NIOWebSocketUpgradeError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframe\/init(allocator:)","title":"init(allocator: ByteBufferAllocator)","type":"init"},{"path":"\/documentation\/niowebsocket\/websocketframe\/init(fin:rsv1:rsv2:rsv3:opcode:maskkey:data:extensiondata:)","title":"init(fin: Bool, rsv1: Bool, rsv2: Bool, rsv3: Bool, opcode: WebSocketOpcode, maskKey: WebSocketMaskingKey?, data: ByteBuffer, extensionData: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframe\/data","title":"var data: ByteBuffer","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/extensiondata","title":"var extensionData: ByteBuffer?","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/fin","title":"var fin: Bool","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/length","title":"var length: Int","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/maskkey","title":"var maskKey: WebSocketMaskingKey?","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/opcode","title":"var opcode: WebSocketOpcode","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/rsv1","title":"var rsv1: Bool","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/rsv2","title":"var rsv2: Bool","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/rsv3","title":"var rsv3: Bool","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/unmaskeddata","title":"var unmaskedData: ByteBuffer","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketframe\/unmaskedextensiondata","title":"var unmaskedExtensionData: ByteBuffer?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketframe\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niowebsocket\/websocketframe\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/websocketframe","title":"WebSocketFrame","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/init(_:)","title":"init?<T>(T)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/random()","title":"static func random() -> WebSocketMaskingKey","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/random(using:)","title":"static func random<Generator>(using: inout Generator) -> WebSocketMaskingKey","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/underestimatedcount-1o8yf","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/map(_:)-6x7ty","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/subscript(_:)-6s2oh","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/subscript(_:)-75cig","title":"subscript(Int) -> UInt8","type":"subscript"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/subscript(_:)-8fw0w","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/subscript(_:)-8jkcf","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/index","title":"WebSocketMaskingKey.Index","type":"typealias"}],"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/==(_:_:)","title":"static func == (WebSocketMaskingKey, WebSocketMaskingKey) -> Bool","type":"op"}],"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/init(arrayliteral:)","title":"init(arrayLiteral: UInt8...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/arrayliteralelement","title":"WebSocketMaskingKey.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/underestimatedcount-4vgw1","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/flatmap(_:)-12gfa","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/flatmap(_:)-3phhd","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/map(_:)-94dt1","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/withcontiguousstorageifavailable(_:)-2gwv6","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/withcontiguousstorageifavailable(_:)-9y2ya","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<UInt8>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/element","title":"WebSocketMaskingKey.Element","type":"typealias"}],"path":"\/documentation\/niowebsocket\/websocketmaskingkey\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/websocketmaskingkey","title":"WebSocketMaskingKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/init(encodedwebsocketopcode:)","title":"init?(encodedWebSocketOpcode: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/iscontrolopcode","title":"var isControlOpcode: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/binary","title":"static let binary: WebSocketOpcode","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/connectionclose","title":"static let connectionClose: WebSocketOpcode","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/continuation","title":"static let continuation: WebSocketOpcode","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/ping","title":"static let ping: WebSocketOpcode","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/pong","title":"static let pong: WebSocketOpcode","type":"property"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/text","title":"static let text: WebSocketOpcode","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/allcases","title":"static var allCases: [WebSocketOpcode]","type":"property"}],"path":"\/documentation\/niowebsocket\/websocketopcode\/caseiterable-implementations","title":"CaseIterable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/niowebsocket\/websocketopcode\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketopcode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niowebsocket\/websocketopcode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/websocketopcode","title":"WebSocketOpcode","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebclientsocketupgrader","title":"NIOWebClientSocketUpgrader","type":"typealias"},{"path":"\/documentation\/niowebsocket\/websocketupgrader","title":"WebSocketUpgrader","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketerror\/fragmentedcontrolframe","title":"case fragmentedControlFrame","type":"case"},{"path":"\/documentation\/niowebsocket\/niowebsocketerror\/invalidframelength","title":"case invalidFrameLength","type":"case"},{"path":"\/documentation\/niowebsocket\/niowebsocketerror\/multibytecontrolframelength","title":"case multiByteControlFrameLength","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/niowebsocketerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niowebsocket\/niowebsocketerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/niowebsocketerror","title":"NIOWebSocketError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/datainconsistentwithmessage","title":"case dataInconsistentWithMessage","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/goingaway","title":"case goingAway","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/messagetoolarge","title":"case messageTooLarge","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/missingextension","title":"case missingExtension","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/normalclosure","title":"case normalClosure","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/policyviolation","title":"case policyViolation","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/protocolerror","title":"case protocolError","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/unacceptabledata","title":"case unacceptableData","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/unexpectedservererror","title":"case unexpectedServerError","type":"case"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/unknown(_:)","title":"case unknown(UInt16)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/init(codenumber:)","title":"init(codeNumber: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/niowebsocket\/websocketerrorcode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/niowebsocket\/websocketerrorcode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/niowebsocket\/websocketerrorcode","title":"WebSocketErrorCode","type":"enum"}],"path":"\/documentation\/niowebsocket","title":"NIOWebSocket","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/init(createparser:)","title":"init(createParser: () -> LazyParser)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/createparser","title":"let createParser: () -> LazyParser","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/parse(_:)","title":"func parse(inout LazyParser.Input) rethrows -> LazyParser.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/map(_:)-1qdbq","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/map(_:)-4dwf5","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/map(_:)-67m3i","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/pipe(_:)-1h3eq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/pipe(_:)-5wsyo","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/lazy\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/lazy\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/lazy\/print(_:into:)","title":"func print(LazyParser.Output, into: inout LazyParser.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/lazy\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/lazy\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/lazy","title":"Lazy","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversion\/input","title":"Input","type":"associatedtype"},{"path":"\/documentation\/parsing\/conversion\/output","title":"Output","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversion\/data-swift.property-56xlw","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/data-swift.property-m5u1","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/double-swift.property","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/int-swift.property","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/string-swift.property-61iba","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/string-swift.property-7zxma","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/substring-swift.property-1vwon","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/substring-swift.property-3v4cl","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/utf8-swift.property","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversion\/apply(_:)","title":"func apply(Self.Input) throws -> Self.Output","type":"method"},{"path":"\/documentation\/parsing\/conversion\/json(_:decoder:encoder:)-swift.method","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversion\/lossless(_:)-swift.method","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversion\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversion\/representing(_:)-swift.method","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversion\/unapply(_:)","title":"func unapply(Self.Output) throws -> Self.Input","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversion\/data-swift.type.property-7g9sj","title":"static var data: Conversions.BytesToData<Substring.UTF8View>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/data-swift.type.property-8z7qz","title":"static var data: Conversions.BytesToData<ArraySlice<UInt8>>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/double-swift.type.property","title":"static var double: Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/int-swift.type.property","title":"static var int: Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/string-swift.type.property-3u2b5","title":"static var string: Conversions.SubstringToString","type":"property"},{"path":"\/documentation\/parsing\/conversion\/string-swift.type.property-9owth","title":"static var string: Conversions.BytesToString<Substring.UTF8View>","type":"property"},{"path":"\/documentation\/parsing\/conversion\/substring-swift.type.property-1y3u3","title":"static var substring: Conversions.UTF8ViewToSubstring","type":"property"},{"path":"\/documentation\/parsing\/conversion\/substring-swift.type.property-4r1aj","title":"static var substring: Conversions.UnicodeScalarViewToSubstring","type":"property"},{"path":"\/documentation\/parsing\/conversion\/utf8-swift.type.property","title":"static var utf8: Conversions.SubstringToUTF8View","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversion\/case(_:)-9bxz4","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversion\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversion\/json(_:decoder:encoder:)-swift.type.method","title":"static func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversion\/lossless(_:)-swift.type.method","title":"static func lossless<NewOutput>(NewOutput.Type) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversion\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversion\/representing(_:)-swift.type.method","title":"static func representing<NewOutput>(NewOutput.Type) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversion","title":"Conversion","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/countingrange\/maximum","title":"var maximum: Int?","type":"property"},{"path":"\/documentation\/parsing\/countingrange\/minimum","title":"var minimum: Int","type":"property"}],"path":"\/documentation\/parsing\/countingrange","title":"CountingRange","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/input","title":"Input","type":"associatedtype"},{"path":"\/documentation\/parsing\/parser\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parser\/map(_:)-18m9d","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parser\/map(_:)-2e6si","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parser\/map(_:)-4hsj5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parser\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/parsing\/parser\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/parsing\/parser\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"children":[{"children":[{"path":"\/documentation\/parsing\/parser\/parse(_:)-717qw","title":"func parse(Self.Input) rethrows -> Self.Output","type":"method"},{"path":"\/documentation\/parsing\/parser\/parse(_:)-6h1d0","title":"func parse<C>(C) rethrows -> Self.Output","type":"method"},{"path":"\/documentation\/parsing\/parser\/parse(_:)-2wzcq","title":"func parse<S>(S) rethrows -> Self.Output","type":"method"}],"title":"Parser Implementations","type":"groupMarker"}],"path":"\/documentation\/parsing\/parser\/parse(_:)-76tcw","title":"func parse(inout Self.Input) throws -> Self.Output","type":"method"},{"path":"\/documentation\/parsing\/parser\/pipe(_:)-2zck4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parser\/pipe(_:)-8ih26","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parser\/printing(_:)-1lyhy","title":"func printing<P>(P) -> Parsers.OverridePrinting<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parser\/printing(_:)-2biou","title":"func printing((Self.Output, inout Self.Input) throws -> Void) -> Parsers.TryPrint<Self>","type":"method"},{"path":"\/documentation\/parsing\/parser\/printing(_:)-5ci2d","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parser","title":"Parser","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserprinter\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/print(_:into:)","title":"func print(Self.Output, into: inout Self.Input) throws","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/parsing\/parserprinter\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/parsing\/parserprinter","title":"ParserPrinter","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/prependablecollection\/init(_:)","title":"init<S>(S)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prependablecollection\/prepend(_:)","title":"func prepend(Self.Element)","type":"method"},{"path":"\/documentation\/parsing\/prependablecollection\/prepend(contentsof:)","title":"func prepend<S>(contentsOf: S)","type":"method"}],"path":"\/documentation\/parsing\/prependablecollection","title":"PrependableCollection","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/init(_:)-2spg2","title":"init(Output)","type":"init"},{"path":"\/documentation\/parsing\/always\/init(_:)-56hez","title":"init(Output)","type":"init"},{"path":"\/documentation\/parsing\/always\/init(_:)-fdjh","title":"init(Output)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/output","title":"let output: Output","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/parse(_:)","title":"func parse(inout Input) -> Output","type":"method"},{"path":"\/documentation\/parsing\/always\/print(_:into:)","title":"func print(Output, into: inout Input)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/always\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/always\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/always\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/always\/map(_:)-4hzpk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/always\/map(_:)-77rpm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/always\/map(_:)-crwv","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/always\/pipe(_:)-2x77w","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/always\/pipe(_:)-5x2dd","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/always\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/always\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/always\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/always\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/always\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/always\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/always\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/always\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/always","title":"Always","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyconversion\/init(_:)","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/parsing\/anyconversion\/init(apply:unapply:)","title":"init(apply: (Input) -> Output?, unapply: (Output) -> Input?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyconversion\/apply(_:)","title":"func apply(Input) throws -> Output","type":"method"},{"path":"\/documentation\/parsing\/anyconversion\/unapply(_:)","title":"func unapply(Output) throws -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyconversion\/data-3otsh","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/data-4wywp","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/string-50wfm","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/string-70sob","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/substring-5uao2","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/substring-gubc","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/anyconversion\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyconversion\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/anyconversion\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/anyconversion\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/anyconversion\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyconversion\/case(_:)-3kuct","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/anyconversion\/case(_:)-8w7uv","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/anyconversion\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/anyconversion\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/anyconversion\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/anyconversion","title":"AnyConversion","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparser\/init(_:)-1pdke","title":"init((inout Input) throws -> Output)","type":"init"},{"path":"\/documentation\/parsing\/anyparser\/init(_:)-71nto","title":"init<P>(P)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Input, Output>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/parse(_:)","title":"func parse(inout Input) throws -> Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/map(_:)-4i3ic","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/map(_:)-5up5l","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/map(_:)-n870","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/pipe(_:)-85ica","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/pipe(_:)-95mx6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/anyparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/anyparser","title":"AnyParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparserprinter\/init(_:)","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/parsing\/anyparserprinter\/init(parse:print:)","title":"init(parse: (inout Input) throws -> Output, print: (Output, inout Input) throws -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparserprinter\/parse(_:)","title":"func parse(inout Input) throws -> Output","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/print(_:into:)","title":"func print(Output, into: inout Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparserprinter\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/map(_:)-3o14a","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/map(_:)-41foo","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/map(_:)-uv02","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/pipe(_:)-1ulbw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/pipe(_:)-7e8a3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/anyparserprinter\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparserprinter\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/anyparserprinter\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/anyparserprinter\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/anyparserprinter","title":"AnyParserPrinter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/consumed\/init(_:)","title":"init(() -> Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/consumed\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/consumed\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> Upstream.Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/consumed\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/map(_:)-4shef","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/map(_:)-8cnm1","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/map(_:)-9win6","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/pipe(_:)-4o1uo","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/pipe(_:)-6bc2e","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/consumed\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/consumed\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/consumed\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/consumed\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/consumed\/print(_:into:)","title":"func print(Upstream.Input, into: inout Upstream.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/consumed\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/consumed\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/consumed","title":"Consumed","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/digits\/init()-1vm8z","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/digits\/init()-77axf","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/digits\/init()-l9xc","title":"init<C>()","type":"init"},{"path":"\/documentation\/parsing\/digits\/init(_:)-6bmup","title":"init<C>(Length)","type":"init"},{"path":"\/documentation\/parsing\/digits\/init(_:)-6dgjs","title":"init(Length)","type":"init"},{"path":"\/documentation\/parsing\/digits\/init(_:)-7xl97","title":"init(Length)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/digits\/parse(_:)","title":"func parse(inout InputToBytes.Input) throws -> Int","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/digits\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/digits\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/digits\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/digits\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/digits\/map(_:)-4o5y2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/digits\/map(_:)-8oytx","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/digits\/map(_:)-9mjx6","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/digits\/pipe(_:)-3uy22","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/digits\/pipe(_:)-550m7","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/digits\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/digits\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/digits\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/digits\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/digits\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/digits\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/digits\/print(_:into:)","title":"func print(Int, into: inout InputToBytes.Input) throws","type":"method"}],"path":"\/documentation\/parsing\/digits\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/digits","title":"Digits","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/init()-2egll","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/end\/init()-7gmzt","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/end\/init()-8lvil","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/parse(_:)","title":"func parse(inout Input) throws","type":"method"},{"path":"\/documentation\/parsing\/end\/print(_:into:)","title":"func print((), into: inout Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/end\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/end\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/end\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/end\/map(_:)-1aghx","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/end\/map(_:)-4f3vn","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/end\/map(_:)-85pes","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/end\/pipe(_:)-57yz8","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/end\/pipe(_:)-u4v0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/end\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/end\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/end\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/end\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/end\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/end\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/end\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/end\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/end","title":"End","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/init()","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/fail\/init(throwing:)","title":"init(throwing: Error)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/parse(_:)","title":"func parse(inout Input) throws -> Output","type":"method"},{"path":"\/documentation\/parsing\/fail\/print(_:into:)","title":"func print(Output, into: inout Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fail\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/fail\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/fail\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/fail\/map(_:)-5k8mi","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fail\/map(_:)-8fzlx","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/fail\/map(_:)-io4b","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fail\/pipe(_:)-6xfdd","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/fail\/pipe(_:)-8by0h","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/fail\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/fail\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/fail\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/fail\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/fail\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/fail\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/fail\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/fail\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/fail","title":"Fail","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/init()-1y770","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/first\/init()-7nnzb","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/first\/init()-9rmtu","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/parse(_:)","title":"func parse(inout Input) throws -> Input.Element","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/first\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/first\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/first\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/first\/map(_:)-2ispo","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/first\/map(_:)-4q3my","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/first\/map(_:)-8dunv","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/first\/pipe(_:)-3lj9r","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/first\/pipe(_:)-7t8m2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/first\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/first\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/first\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/first\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/first\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/first\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/first\/print(_:into:)","title":"func print(Input.Element, into: inout Input)","type":"method"},{"path":"\/documentation\/parsing\/first\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/first\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/first","title":"First","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/from\/init(_:)","title":"init(Upstream)","type":"init"},{"path":"\/documentation\/parsing\/from\/init(_:_:)","title":"init(Upstream, () -> Downstream)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/from\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> Downstream.Output","type":"method"},{"path":"\/documentation\/parsing\/from\/print(_:into:)","title":"func print(Downstream.Output, into: inout Upstream.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/from\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/from\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/from\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/from\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/from\/map(_:)-50mg7","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/from\/map(_:)-876w5","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/from\/map(_:)-8hy02","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/from\/pipe(_:)-2r2ai","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/from\/pipe(_:)-3ccre","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/from\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/from\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/from\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/from\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/from\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/from\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/from\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/from\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/from\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/from","title":"From","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromsubstring\/init(_:)-1o4e0","title":"init(() -> SubstringParser)","type":"init"},{"path":"\/documentation\/parsing\/fromsubstring\/init(_:)-4m4bp","title":"init(() -> SubstringParser)","type":"init"},{"path":"\/documentation\/parsing\/fromsubstring\/init(_:)-5n0la","title":"init(() -> SubstringParser)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromsubstring\/fromsubstring","title":"let fromSubstring: (Substring) -> Input","type":"property"},{"path":"\/documentation\/parsing\/fromsubstring\/substringparser","title":"let substringParser: SubstringParser","type":"property"},{"path":"\/documentation\/parsing\/fromsubstring\/tosubstring","title":"let toSubstring: (Input) -> Substring","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromsubstring\/parse(_:)","title":"func parse(inout Input) rethrows -> SubstringParser.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromsubstring\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/map(_:)-53djw","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/map(_:)-6kzxd","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/map(_:)-y8nn","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/pipe(_:)-7q0of","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/pipe(_:)-8pdy9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/fromsubstring\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/fromsubstring\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/fromsubstring","title":"FromSubstring","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromutf8view\/init(_:)-17p1p","title":"init(() -> UTF8Parser)","type":"init"},{"path":"\/documentation\/parsing\/fromutf8view\/init(_:)-1pqrg","title":"init(() -> UTF8Parser)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromutf8view\/fromutf8","title":"let fromUTF8: (Substring.UTF8View) -> Input","type":"property"},{"path":"\/documentation\/parsing\/fromutf8view\/toutf8","title":"let toUTF8: (Input) -> Substring.UTF8View","type":"property"},{"path":"\/documentation\/parsing\/fromutf8view\/utf8parser","title":"let utf8Parser: UTF8Parser","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromutf8view\/parse(_:)","title":"func parse(inout Input) rethrows -> UTF8Parser.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromutf8view\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/map(_:)-7rr60","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/map(_:)-i1g8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/map(_:)-nmuo","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/pipe(_:)-2tra6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/pipe(_:)-2ub8l","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/fromutf8view\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/fromutf8view\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/fromutf8view","title":"FromUTF8View","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/init(_:)-2fkxl","title":"init(() -> UnicodeScalarsParser)","type":"init"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/init(_:)-766i4","title":"init(() -> UnicodeScalarsParser)","type":"init"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/init(_:)-7w4so","title":"init(() -> UnicodeScalarsParser)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/fromunicodescalars","title":"let fromUnicodeScalars: (Substring.UnicodeScalarView) -> Input","type":"property"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/tounicodescalars","title":"let toUnicodeScalars: (Input) -> Substring.UnicodeScalarView","type":"property"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/unicodescalarsparser","title":"let unicodeScalarsParser: UnicodeScalarsParser","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/parse(_:)","title":"func parse(inout Input) rethrows -> UnicodeScalarsParser.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/map(_:)-40j90","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/map(_:)-6jue2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/map(_:)-6lwj4","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/pipe(_:)-47brg","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/pipe(_:)-6r9v9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/fromunicodescalarview\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/fromunicodescalarview\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/fromunicodescalarview","title":"FromUnicodeScalarView","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/init(_:element:)","title":"init<R>(R, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:element:separator:)","title":"init<R>(R, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:element:separator:terminator:)","title":"init<R>(R, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:element:terminator:)","title":"init<R>(R, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:decumulator:element:)","title":"init<R, I>(R, into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:decumulator:element:separator:)","title":"init<R, I>(R, into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:decumulator:element:separator:terminator:)","title":"init<R, I>(R, into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:decumulator:element:terminator:)","title":"init<R, I>(R, into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:element:)","title":"init<R>(R, into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:element:separator:)","title":"init<R>(R, into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:element:separator:terminator:)","title":"init<R>(R, into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:_:element:terminator:)","title":"init<R>(R, into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:atmost:element:)","title":"init(atLeast: Int, atMost: Int, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:atmost:element:separator:)","title":"init(atLeast: Int, atMost: Int, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:atmost:element:separator:terminator:)","title":"init(atLeast: Int, atMost: Int, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:atmost:element:terminator:)","title":"init(atLeast: Int, atMost: Int, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:element:)","title":"init(atLeast: Int, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:element:separator:)","title":"init(atLeast: Int, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:element:separator:terminator:)","title":"init(atLeast: Int, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atleast:element:terminator:)","title":"init(atLeast: Int, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atmost:element:)","title":"init(atMost: Int, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atmost:element:separator:)","title":"init(atMost: Int, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atmost:element:separator:terminator:)","title":"init(atMost: Int, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(atmost:element:terminator:)","title":"init(atMost: Int, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(element:)","title":"init(element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(element:separator:)","title":"init(element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(element:separator:terminator:)","title":"init(element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(element:terminator:)","title":"init(element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:decumulator:element:)","title":"init<I>(into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:decumulator:element:separator:)","title":"init<I>(into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:decumulator:element:separator:terminator:)","title":"init<I>(into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:decumulator:element:terminator:)","title":"init<I>(into: Result, (inout Result, Element.Output) throws -> Void, decumulator: (Result) throws -> I, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:element:)","title":"init(into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:element:separator:)","title":"init(into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:element:separator:terminator:)","title":"init(into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:_:element:terminator:)","title":"init(into: Result, (inout Result, Element.Output) throws -> Void, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:_:element:)","title":"init(into: Result, atLeast: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:_:element:separator:)","title":"init(into: Result, atLeast: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:_:element:separator:terminator:)","title":"init(into: Result, atLeast: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:_:element:terminator:)","title":"init(into: Result, atLeast: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:)","title":"init(into: Result, atLeast: Int, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:separator:)","title":"init(into: Result, atLeast: Int, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:separator:terminator:)","title":"init(into: Result, atLeast: Int, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:terminator:)","title":"init(into: Result, atLeast: Int, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atmost:_:element:)","title":"init(into: Result, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atmost:_:element:separator:)","title":"init(into: Result, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atmost:_:element:separator:terminator:)","title":"init(into: Result, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, separator: () -> Separator, terminator: () -> Terminator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(into:atmost:_:element:terminator:)","title":"init(into: Result, atMost: Int, (inout Result, Element.Output) throws -> Void, element: () -> Element, terminator: () -> Terminator)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/decumulator","title":"let decumulator: (Result) throws -> AnyIterator<Element.Output>","type":"property"},{"path":"\/documentation\/parsing\/many\/element","title":"let element: Element","type":"property"},{"path":"\/documentation\/parsing\/many\/initialresult","title":"let initialResult: Result","type":"property"},{"path":"\/documentation\/parsing\/many\/maximum","title":"let maximum: Int?","type":"property"},{"path":"\/documentation\/parsing\/many\/minimum","title":"let minimum: Int","type":"property"},{"path":"\/documentation\/parsing\/many\/separator","title":"let separator: Separator","type":"property"},{"path":"\/documentation\/parsing\/many\/terminator","title":"let terminator: Terminator","type":"property"},{"path":"\/documentation\/parsing\/many\/updateaccumulatingresult","title":"let updateAccumulatingResult: (inout Result, Element.Output) throws -> Void","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/parse(_:)","title":"func parse(inout Element.Input) throws -> Result","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/many\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/many\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/many\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/many\/map(_:)-83wor","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/many\/map(_:)-8ltoj","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/many\/map(_:)-9287s","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/many\/pipe(_:)-2fbf2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/many\/pipe(_:)-74fr0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/many\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/many\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/many\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/many\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/many\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/many\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/many\/print(_:into:)","title":"func print(Result, into: inout Element.Input) throws","type":"method"},{"path":"\/documentation\/parsing\/many\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/many\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/many","title":"Many","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/init()-3hk4u","title":"init<C>()","type":"init"},{"path":"\/documentation\/parsing\/newline\/init()-4xfjf","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/newline\/init()-9v1iv","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/parse(_:)","title":"func parse(inout InputToBytes.Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/newline\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/newline\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/newline\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/newline\/map(_:)-2n0hj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/newline\/map(_:)-5c1lh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/newline\/map(_:)-78lba","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/newline\/pipe(_:)-2q6kk","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/newline\/pipe(_:)-6j96l","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/newline\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/newline\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/newline\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/newline\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/newline\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/newline\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/newline\/print(_:into:)","title":"func print((), into: inout Newline<InputToBytes>.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/newline\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/newline\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/newline","title":"Newline","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/not\/init(_:)","title":"init(() -> Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/not\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/not\/parse(_:)","title":"func parse(inout Upstream.Input) throws","type":"method"},{"path":"\/documentation\/parsing\/not\/print(_:into:)","title":"func print((), into: inout Upstream.Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/not\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/not\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/not\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/not\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/not\/map(_:)-6hhbf","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/not\/map(_:)-7vzxo","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/not\/map(_:)-9iyzr","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/not\/pipe(_:)-8klpt","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/not\/pipe(_:)-9iyeq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/not\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/not\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/not\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/not\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/not\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/not\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/not\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/not\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/not\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/not","title":"Not","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneof\/init(_:)","title":"init(() -> Parsers)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneof\/parsers","title":"let parsers: Parsers","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneof\/parse(_:)","title":"func parse(inout Parsers.Input) rethrows -> Parsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneof\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/map(_:)-31l44","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/map(_:)-6y3ew","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/map(_:)-qbcj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/pipe(_:)-836qj","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/pipe(_:)-87t5f","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneof\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneof\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneof\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneof\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneof\/print(_:into:)","title":"func print(Parsers.Output, into: inout Parsers.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneof\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneof\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneof","title":"OneOf","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/optionally\/init(_:)","title":"init(() -> Wrapped)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/optionally\/wrapped","title":"let wrapped: Wrapped","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/optionally\/parse(_:)","title":"func parse(inout Wrapped.Input) -> Wrapped.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/optionally\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/map(_:)-1xvzk","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/map(_:)-3tjne","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/map(_:)-4kwq3","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/pipe(_:)-21emy","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/pipe(_:)-9qtxq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/optionally\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/optionally\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/optionally\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/optionally\/print(_:into:)","title":"func print(Wrapped.Output?, into: inout Wrapped.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/optionally\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/optionally","title":"Optionally","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parse\/init(_:)","title":"init<Downstream>(Downstream)","type":"init"},{"path":"\/documentation\/parsing\/parse\/init(_:with:)-3vq0d","title":"init<Upstream, NewOutput>((Upstream.Output) -> NewOutput, with: () -> Upstream)","type":"init"},{"path":"\/documentation\/parsing\/parse\/init(_:with:)-7mnz8","title":"init<Upstream, Downstream>(Downstream, with: () -> Upstream)","type":"init"},{"path":"\/documentation\/parsing\/parse\/init(_:with:)-87urg","title":"init<Upstream, NewOutput>(NewOutput, with: () -> Upstream)","type":"init"},{"path":"\/documentation\/parsing\/parse\/init(with:)","title":"init(with: () -> Parsers)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parse\/parsers","title":"let parsers: Parsers","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parse\/parse(_:)","title":"func parse(inout Parsers.Input) rethrows -> Parsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parse\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parse\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parse\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parse\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parse\/map(_:)-4gu1q","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parse\/map(_:)-mmhd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parse\/map(_:)-y46w","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parse\/pipe(_:)-65woq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parse\/pipe(_:)-6g8fh","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parse\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parse\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parse\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parse\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parse\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parse\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parse\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parse\/print(_:into:)","title":"func print(Parsers.Output, into: inout Parsers.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parse\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parse\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parse","title":"Parse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parseprint\/init(_:with:)-4k2am","title":"init<Upstream, Downstream>(Downstream, with: () -> Upstream)","type":"init"},{"path":"\/documentation\/parsing\/parseprint\/init(_:with:)-8nbrc","title":"init<Upstream, NewOutput>(NewOutput, with: () -> Upstream)","type":"init"},{"path":"\/documentation\/parsing\/parseprint\/init(with:)","title":"init(with: () -> ParserPrinters)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parseprint\/parserprinters","title":"let parserPrinters: ParserPrinters","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parseprint\/parse(_:)","title":"func parse(inout ParserPrinters.Input) rethrows -> ParserPrinters.Output","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/print(_:into:)","title":"func print(ParserPrinters.Output, into: inout ParserPrinters.Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parseprint\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/map(_:)-7rgfs","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/map(_:)-7x8c0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/map(_:)-98v2q","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/pipe(_:)-3m3gw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/pipe(_:)-9ze1j","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parseprint\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parseprint\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parseprint\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parseprint\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parseprint","title":"ParsePrint","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/peek\/init(_:)","title":"init(() -> Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/peek\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/peek\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/peek\/print(_:into:)","title":"func print((), into: inout Upstream.Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/peek\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/peek\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/peek\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/peek\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/peek\/map(_:)-443ic","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/peek\/map(_:)-7uwlo","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/peek\/map(_:)-r5kk","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/peek\/pipe(_:)-359li","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/peek\/pipe(_:)-70zqf","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/peek\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/peek\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/peek\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/peek\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/peek\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/peek\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/peek\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/peek\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/peek\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/peek","title":"Peek","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/init(_:while:)-472tv","title":"init<R>(R, while: ((Input.Element) -> Bool)?)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(_:while:)-4kn0k","title":"init<R>(R, while: ((Substring.UTF8View.Element) -> Bool)?)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(_:while:)-99fro","title":"init<R>(R, while: ((Substring.Element) -> Bool)?)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(maxlength:while:)-548tz","title":"init(maxLength: Int, while: (Input.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(maxlength:while:)-70enw","title":"init(maxLength: Int?, while: (Substring.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(maxlength:while:)-7dsyo","title":"init(maxLength: Int?, while: (Substring.UTF8View.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(minlength:maxlength:while:)-29h8i","title":"init(minLength: Int, maxLength: Int?, while: (Substring.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(minlength:maxlength:while:)-2dygj","title":"init(minLength: Int, maxLength: Int?, while: (Input.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(minlength:maxlength:while:)-3u32v","title":"init(minLength: Int, maxLength: Int?, while: (Substring.UTF8View.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(minlength:while:)-3efj0","title":"init(minLength: Int, while: (Substring.UTF8View.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(minlength:while:)-5bxwl","title":"init(minLength: Int, while: (Input.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(minlength:while:)-x1nu","title":"init(minLength: Int, while: (Substring.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(while:)-5r6r0","title":"init(while: (Substring.UTF8View.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(while:)-7fzba","title":"init(while: (Substring.Element) -> Bool)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(while:)-8u42b","title":"init(while: (Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/maxlength","title":"var maxLength: Int?","type":"property"},{"path":"\/documentation\/parsing\/prefix\/maximum","title":"let maximum: Int?","type":"property"},{"path":"\/documentation\/parsing\/prefix\/minlength","title":"var minLength: Int","type":"property"},{"path":"\/documentation\/parsing\/prefix\/minimum","title":"let minimum: Int","type":"property"},{"path":"\/documentation\/parsing\/prefix\/predicate","title":"let predicate: ((Input.Element) -> Bool)?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/parse(_:)","title":"func parse(inout Input) throws -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/map(_:)-15mz","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/map(_:)-2465y","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/map(_:)-56sal","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/pipe(_:)-1f7zf","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/pipe(_:)-7xv2d","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/prefix\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/prefix\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/prefix\/print(_:into:)","title":"func print(Input, into: inout Input) throws","type":"method"},{"path":"\/documentation\/parsing\/prefix\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/prefix\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/prefix","title":"Prefix","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:)-52m64","title":"init(String.UTF8View)","type":"init"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:)-67yf7","title":"init(String)","type":"init"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:)-8iizp","title":"init(Input)","type":"init"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:by:)","title":"init(Input, by: (Input.Element, Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/areequivalent","title":"let areEquivalent: (Input.Element, Input.Element) -> Bool","type":"property"},{"path":"\/documentation\/parsing\/prefixthrough\/possiblematch","title":"let possibleMatch: Input","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/parse(_:)","title":"func parse(inout Input) throws -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/map(_:)-1lhwk","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/map(_:)-5gy0k","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/map(_:)-94b05","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/pipe(_:)-34vlb","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/pipe(_:)-49vt0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/prefixthrough\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/print(_:into:)","title":"func print(Input, into: inout Input) throws","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/prefixthrough\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/prefixthrough","title":"PrefixThrough","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:)-7b2he","title":"init(String)","type":"init"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:)-8sywj","title":"init(Input)","type":"init"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:)-9kyot","title":"init(String.UTF8View)","type":"init"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:by:)","title":"init(Input, by: (Input.Element, Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/areequivalent","title":"let areEquivalent: (Input.Element, Input.Element) -> Bool","type":"property"},{"path":"\/documentation\/parsing\/prefixupto\/possiblematch","title":"let possibleMatch: Input","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/parse(_:)","title":"func parse(inout Input) throws -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/map(_:)-3o3m","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/map(_:)-8wf17","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/map(_:)-9kof9","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/pipe(_:)-25byk","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/pipe(_:)-8ebu9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/prefixupto\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/print(_:into:)","title":"func print(Input, into: inout Input) throws","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/prefixupto\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/prefixupto","title":"PrefixUpTo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/init()-3wugv","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/rest\/init()-41jf5","title":"init()","type":"init"},{"path":"\/documentation\/parsing\/rest\/init()-9bc09","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/parse(_:)","title":"func parse(inout Input) throws -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/rest\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/rest\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/rest\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/rest\/map(_:)-4czd9","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/rest\/map(_:)-5waxf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/rest\/map(_:)-u52m","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/rest\/pipe(_:)-7ovit","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/rest\/pipe(_:)-jcs6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/rest\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/rest\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/rest\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/rest\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/rest\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/rest\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/rest\/print(_:into:)","title":"func print(Input, into: inout Input) throws","type":"method"},{"path":"\/documentation\/parsing\/rest\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/rest\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/rest","title":"Rest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/init(_:)","title":"init(() -> Parsers)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/parsers","title":"let parsers: Parsers","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/parse(_:)","title":"func parse(inout Parsers.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/skip\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/skip\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/skip\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/skip\/map(_:)-1o57m","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/skip\/map(_:)-67gt8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/skip\/map(_:)-99tng","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/skip\/pipe(_:)-1l0l6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/skip\/pipe(_:)-9adou","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/skip\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/skip\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/skip\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/skip\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/skip\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/skip\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/skip\/print(_:into:)","title":"func print((), into: inout Parsers.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/skip\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/skip\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/skip","title":"Skip","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/init(_:)","title":"init<PossiblePrefix>(PossiblePrefix)","type":"init"},{"path":"\/documentation\/parsing\/startswith\/init(_:by:)","title":"init<PossiblePrefix>(PossiblePrefix, by: (Input.Element, Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/count","title":"let count: Int","type":"property"},{"path":"\/documentation\/parsing\/startswith\/possibleprefix","title":"let possiblePrefix: AnyCollection<Input.Element>","type":"property"},{"path":"\/documentation\/parsing\/startswith\/startswith","title":"let startsWith: (Input) -> Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/parse(_:)","title":"func parse(inout Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/map(_:)-1ixi9","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/map(_:)-2bqqn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/map(_:)-2ybh0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/pipe(_:)-3qz6x","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/pipe(_:)-768zr","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/startswith\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/startswith\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/startswith\/print(_:into:)","title":"func print((), into: inout Input)","type":"method"},{"path":"\/documentation\/parsing\/startswith\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/startswith\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/startswith","title":"StartsWith","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/stream\/init(build:)","title":"init(build: () -> Parsers)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/stream\/parsers","title":"let parsers: Parsers","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/stream\/parse(_:)","title":"func parse(inout AnyIterator<Parsers.Input>) rethrows -> [Parsers.Output]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/stream\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/stream\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/stream\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/stream\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/stream\/map(_:)-1fqyh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/stream\/map(_:)-1r5sz","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/stream\/map(_:)-4w7uy","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/stream\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/stream\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/stream\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/stream\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/stream\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/stream","title":"Stream","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/init(_:)-5mvhf","title":"init(Whitespace<Length, InputToBytes>.Configuration)","type":"init"},{"path":"\/documentation\/parsing\/whitespace\/init(_:)-7y3zp","title":"init<C>(Whitespace<Length, InputToBytes>.Configuration)","type":"init"},{"path":"\/documentation\/parsing\/whitespace\/init(_:)-hfmk","title":"init(Whitespace<Length, InputToBytes>.Configuration)","type":"init"},{"path":"\/documentation\/parsing\/whitespace\/init(_:_:)-2i1mj","title":"init(Length, Whitespace<Length, InputToBytes>.Configuration)","type":"init"},{"path":"\/documentation\/parsing\/whitespace\/init(_:_:)-47o7f","title":"init<C>(Length, Whitespace<Length, InputToBytes>.Configuration)","type":"init"},{"path":"\/documentation\/parsing\/whitespace\/init(_:_:)-6vmf6","title":"init(Length, Whitespace<Length, InputToBytes>.Configuration)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/configuration-swift.property","title":"let configuration: Whitespace<Length, InputToBytes>.Configuration","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/parse(_:)","title":"func parse(inout InputToBytes.Input) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/configuration-swift.enum\/all","title":"case all","type":"case"},{"path":"\/documentation\/parsing\/whitespace\/configuration-swift.enum\/horizontal","title":"case horizontal","type":"case"},{"path":"\/documentation\/parsing\/whitespace\/configuration-swift.enum\/vertical","title":"case vertical","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/configuration-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/parsing\/whitespace\/configuration-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/whitespace\/configuration-swift.enum","title":"Whitespace.Configuration","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/map(_:)-12i89","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/map(_:)-6wm7w","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/map(_:)-8lsu0","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/pipe(_:)-2big7","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/pipe(_:)-2wgh9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/whitespace\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/print(_:into:)","title":"func print((), into: inout Whitespace<Length, InputToBytes>.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/whitespace\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/whitespace","title":"Whitespace","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/parsing\/conditional","title":"Conditional","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/apply(_:)","title":"func apply(Input) -> Output","type":"method"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/unapply(_:)","title":"func unapply(Output) -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/data-93cm1","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/data-lawj","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/int-swift.property","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/string-4tfig","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/string-4yc8w","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/substring-1dspe","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/substring-31cup","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/int-swift.type.property","title":"static var int: Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/case(_:)-5hkd4","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/case(_:)-qck7","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger","title":"Conversions.BinaryFloatingPointToFixedWidthInteger","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/apply(_:)","title":"func apply(Input) -> Data","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/unapply(_:)","title":"func unapply(Data) -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/data-6aah6","title":"static var data: Conversions.BytesToData<Substring.UTF8View>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/data-fq1i","title":"static var data: Conversions.BytesToData<ArraySlice<UInt8>>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/case(_:)-1rax7","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/case(_:)-7aheb","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestodata\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/bytestodata\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/bytestodata","title":"Conversions.BytesToData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/apply(_:)","title":"func apply(Input) -> String","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/unapply(_:)","title":"func unapply(String) -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/string","title":"static var string: Conversions.BytesToString<Substring.UTF8View>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/case(_:)-261iz","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/case(_:)-5ubdq","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/bytestostring\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/bytestostring\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/bytestostring","title":"Conversions.BytesToString","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/apply(_:)","title":"func apply(Input) -> Output","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/unapply(_:)","title":"func unapply(Output) -> Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/data-18im7","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/data-9p01q","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/double-swift.property","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/string-3rofx","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/string-shll","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/substring-634ag","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/substring-7s3yb","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/double-swift.type.property","title":"static var double: Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/case(_:)-3qrud","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/case(_:)-6rwn3","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint","title":"Conversions.FixedWidthIntegerToBinaryFloatingPoint","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/apply(_:)","title":"func apply(String) throws -> Output","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/unapply(_:)","title":"func unapply(Output) -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/data-4ta4c","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/data-7yxlo","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/string-22hto","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/string-2uyg5","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/substring-1doqd","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/substring-5ax0x","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/case(_:)-3tsue","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/case(_:)-4dlno","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/fromlosslessstring\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/fromlosslessstring","title":"Conversions.FromLosslessString","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/apply(_:)","title":"func apply(Output.RawValue) throws -> Output","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/unapply(_:)","title":"func unapply(Output) -> Output.RawValue","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/data-18z47","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/data-9gca7","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/string-6rsy0","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/string-7zvdr","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/substring-4xc29","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/substring-ab2g","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/case(_:)-69hih","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/case(_:)-74rg6","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/fromrawvalue\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/fromrawvalue","title":"Conversions.FromRawValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/identity\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/identity\/apply(_:)","title":"func apply(Value) -> Value","type":"method"},{"path":"\/documentation\/parsing\/conversions\/identity\/unapply(_:)","title":"func unapply(Value) -> Value","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/identity\/data-2pkqa","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/data-97ak6","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/string-3h7go","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/string-9j77x","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/substring-1aopx","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/substring-5usp6","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/identity\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/identity\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/identity\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/identity\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/identity\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/identity\/case(_:)-47r7w","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/identity\/case(_:)-9hhrp","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/identity\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/identity\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/identity\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/identity","title":"Conversions.Identity","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/json\/init(_:decoder:encoder:)","title":"init(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/json\/apply(_:)","title":"func apply(Data) throws -> Value","type":"method"},{"path":"\/documentation\/parsing\/conversions\/json\/unapply(_:)","title":"func unapply(Value) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/json\/data-5qvnb","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/data-87b59","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/string-19hro","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/string-8gtbl","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/substring-5moax","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/substring-91zw0","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/json\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/json\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/json\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/json\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/json\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/json\/case(_:)-2xywi","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/json\/case(_:)-5f60f","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/json\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/json\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/json\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/json","title":"Conversions.JSON","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/map\/downstream","title":"let downstream: Downstream","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/map\/apply(_:)","title":"func apply(Upstream.Input) rethrows -> Downstream.Output","type":"method"},{"path":"\/documentation\/parsing\/conversions\/map\/unapply(_:)","title":"func unapply(Downstream.Output) rethrows -> Upstream.Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/map\/data-3cvdh","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/data-40bbu","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/string-1zrno","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/string-920ur","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/substring-3u6e1","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/substring-z208","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/map\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/map\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/map\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/map\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/map\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/map\/case(_:)-33v3o","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/map\/case(_:)-3lmy1","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/map\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/map\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/map\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/map","title":"Conversions.Map","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/apply(_:)","title":"func apply(Values) -> Struct","type":"method"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/unapply(_:)","title":"func unapply(Struct) throws -> Values","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/data-19v0w","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/data-7miwo","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/string-1oszp","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/string-td0e","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/substring-8xkhj","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/substring-99n9m","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/case(_:)-3ccl7","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/case(_:)-8mr5p","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/memberwise\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/memberwise\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/memberwise","title":"Conversions.Memberwise","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/parser\/init(parser:)","title":"init(parser: Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/parser\/parser","title":"let parser: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/parser\/apply(_:)","title":"func apply(Upstream.Input) rethrows -> Upstream.Output","type":"method"},{"path":"\/documentation\/parsing\/conversions\/parser\/unapply(_:)","title":"func unapply(Upstream.Output) rethrows -> Upstream.Input","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/parser\/data-2lqh1","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/data-5h03k","title":"var data: Conversions.Map<Self, Conversions.BytesToData<ArraySlice<UInt8>>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/double","title":"var double: Conversions.Map<Self, Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/int","title":"var int: Conversions.Map<Self, Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/string-5mjcg","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/string-7789r","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/substring-7zjdz","title":"var substring: Conversions.Map<Self, Conversions.UnicodeScalarViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/substring-i57w","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/parser\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/parser\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/parser\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/parser\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/parser\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/parser\/case(_:)-2his0","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/parser\/case(_:)-56av9","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/parser\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/parser\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/parser\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/parser","title":"Conversions.Parser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/apply(_:)","title":"func apply(Substring) -> String","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/unapply(_:)","title":"func unapply(String) -> Substring","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/string","title":"static var string: Conversions.SubstringToString","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/case(_:)-43wfu","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/case(_:)-4xr88","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtostring\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/substringtostring\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/substringtostring","title":"Conversions.SubstringToString","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/apply(_:)","title":"func apply(Substring) -> Substring.UTF8View","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/unapply(_:)","title":"func unapply(Substring.UTF8View) -> Substring","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/data","title":"var data: Conversions.Map<Self, Conversions.BytesToData<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/string","title":"var string: Conversions.Map<Self, Conversions.BytesToString<Substring.UTF8View>>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/substring","title":"var substring: Conversions.Map<Self, Conversions.UTF8ViewToSubstring>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/utf8","title":"static var utf8: Conversions.SubstringToUTF8View","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/case(_:)-3sodz","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/case(_:)-7lvo5","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/substringtoutf8view\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/substringtoutf8view","title":"Conversions.SubstringToUTF8View","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/apply(_:)","title":"func apply(Substring.UTF8View) -> Substring","type":"method"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/unapply(_:)","title":"func unapply(Substring) -> Substring.UTF8View","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/string","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/substring","title":"static var substring: Conversions.UTF8ViewToSubstring","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/case(_:)-51j22","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/case(_:)-7o8yh","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/utf8viewtosubstring","title":"Conversions.UTF8ViewToSubstring","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/apply(_:)","title":"func apply(Substring.UnicodeScalarView) -> Substring","type":"method"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/unapply(_:)","title":"func unapply(Substring) -> Substring.UnicodeScalarView","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/string","title":"var string: Conversions.Map<Self, Conversions.SubstringToString>","type":"property"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/utf8","title":"var utf8: Conversions.Map<Self, Conversions.SubstringToUTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/json(_:decoder:encoder:)","title":"func json<Value>(Value.Type, decoder: JSONDecoder, encoder: JSONEncoder) -> Conversions.Map<Self, Conversions.JSON<Value>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/lossless(_:)","title":"func lossless<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromLosslessString<NewOutput>>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/map(_:)","title":"func map<C>(C) -> Conversions.Map<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/representing(_:)","title":"func representing<NewOutput>(NewOutput.Type) -> Conversions.Map<Self, Conversions.FromRawValue<NewOutput>>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/substring","title":"static var substring: Conversions.UnicodeScalarViewToSubstring","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/case(_:)-4jxpt","title":"static func `case`<Enum>(Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/case(_:)-68ot9","title":"static func `case`<Values, Enum>((Values) -> Enum) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/convert(apply:unapply:)","title":"static func convert<Input, Output>(apply: (Input) -> Output?, unapply: (Output) -> Input?) -> Self","type":"method"},{"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/memberwise(_:)","title":"static func memberwise<Values, Struct>((Values) -> Struct) -> Self","type":"method"}],"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/conversion-implementations","title":"Conversion Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring","title":"Conversions.UnicodeScalarViewToSubstring","type":"struct"}],"path":"\/documentation\/parsing\/conversions","title":"Conversions","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/init(_:_:_:_:_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5, P6, P7, P8, P9)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p5","title":"let p5: P5","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p6","title":"let p6: P6","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p7","title":"let p7: P7","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p8","title":"let p8: P8","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/p9","title":"let p9: P9","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/map(_:)-2czni","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/map(_:)-8exuy","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/map(_:)-95wmn","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/pipe(_:)-1d0kh","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/pipe(_:)-5ohrg","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof10\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof10","title":"OneOfBuilder.OneOf10","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/map(_:)-15fif","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/map(_:)-1cnng","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/map(_:)-64rr2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/pipe(_:)-6uil3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/pipe(_:)-aegw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof2\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof2","title":"OneOfBuilder.OneOf2","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/map(_:)-15fmf","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/map(_:)-1co26","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/map(_:)-64rd8","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/pipe(_:)-6ui3r","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/pipe(_:)-aelu","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof3\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof3","title":"OneOfBuilder.OneOf3","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/map(_:)-15h83","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/map(_:)-1cpas","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/map(_:)-64tjm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/pipe(_:)-6ui0j","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/pipe(_:)-ag5k","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof4\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof4","title":"OneOfBuilder.OneOf4","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/map(_:)-15hkr","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/map(_:)-1cps2","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/map(_:)-64t8k","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/pipe(_:)-6uhjf","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/pipe(_:)-agny","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof5\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof5","title":"OneOfBuilder.OneOf5","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/map(_:)-15gkf","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/map(_:)-1cos4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/map(_:)-64sza","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/pipe(_:)-6uhgf","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/pipe(_:)-afj4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof6\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof6","title":"OneOfBuilder.OneOf6","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/init(_:_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5, P6)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/p5","title":"let p5: P5","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/p6","title":"let p6: P6","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/map(_:)-15h4f","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/map(_:)-1cp6u","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/map(_:)-64slg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/pipe(_:)-6ugz3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/pipe(_:)-ag1e","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof7\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof7","title":"OneOfBuilder.OneOf7","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/init(_:_:_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5, P6, P7)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p5","title":"let p5: P5","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p6","title":"let p6: P6","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/p7","title":"let p7: P7","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/map(_:)-15dg3","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/map(_:)-1cqu4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/map(_:)-64uua","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/pipe(_:)-6uls3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/pipe(_:)-acfs","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof8\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof8","title":"OneOfBuilder.OneOf8","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/init(_:_:_:_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5, P6, P7, P8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p5","title":"let p5: P5","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p6","title":"let p6: P6","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p7","title":"let p7: P7","type":"property"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/p8","title":"let p8: P8","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/map(_:)-15dt7","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/map(_:)-1cqwi","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/map(_:)-64uh8","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/pipe(_:)-6ulbv","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/pipe(_:)-acx2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof9\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/oneof9","title":"OneOfBuilder.OneOf9","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/parse(_:)","title":"func parse(inout Wrapped.Input) throws -> Wrapped.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/map(_:)-5cu1p","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/map(_:)-8lpk2","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/map(_:)-9gsyz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/pipe(_:)-69hk9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/pipe(_:)-8f19c","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/print(_:into:)","title":"func print(Wrapped.Output, into: inout Wrapped.Input) throws","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofbuilder\/optionaloneof","title":"OneOfBuilder.OptionalOneOf","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildarray(_:)","title":"static func buildArray<P>([P]) -> Parsers.OneOfMany<P>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:)","title":"static func buildBlock<P>(P) -> P","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:)","title":"static func buildBlock<P0, P1>(P0, P1) -> OneOfBuilder.OneOf2<P0, P1>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:)","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> OneOfBuilder.OneOf3<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:_:)","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> OneOfBuilder.OneOf4<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:_:_:)","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> OneOfBuilder.OneOf5<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:_:_:_:)","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> OneOfBuilder.OneOf6<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:_:_:_:_:)","title":"static func buildBlock<P0, P1, P2, P3, P4, P5, P6>(P0, P1, P2, P3, P4, P5, P6) -> OneOfBuilder.OneOf7<P0, P1, P2, P3, P4, P5, P6>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:_:_:_:_:_:)","title":"static func buildBlock<P0, P1, P2, P3, P4, P5, P6, P7>(P0, P1, P2, P3, P4, P5, P6, P7) -> OneOfBuilder.OneOf8<P0, P1, P2, P3, P4, P5, P6, P7>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:_:_:_:_:_:_:)","title":"static func buildBlock<P0, P1, P2, P3, P4, P5, P6, P7, P8>(P0, P1, P2, P3, P4, P5, P6, P7, P8) -> OneOfBuilder.OneOf9<P0, P1, P2, P3, P4, P5, P6, P7, P8>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildblock(_:_:_:_:_:_:_:_:_:_:)","title":"static func buildBlock<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>(P0, P1, P2, P3, P4, P5, P6, P7, P8, P9) -> OneOfBuilder.OneOf10<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildeither(first:)","title":"static func buildEither<TrueParser, FalseParser>(first: TrueParser) -> Parsers.Conditional<TrueParser, FalseParser>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildeither(second:)","title":"static func buildEither<TrueParser, FalseParser>(second: FalseParser) -> Parsers.Conditional<TrueParser, FalseParser>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildif(_:)","title":"static func buildIf<P>(P?) -> OneOfBuilder.OptionalOneOf<P>","type":"method"},{"path":"\/documentation\/parsing\/oneofbuilder\/buildlimitedavailability(_:)","title":"static func buildLimitedAvailability<P>(P?) -> OneOfBuilder.OptionalOneOf<P>","type":"method"}],"path":"\/documentation\/parsing\/oneofbuilder","title":"OneOfBuilder","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/map(_:)-2eoqr","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/map(_:)-5xdea","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/map(_:)-pxca","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/pipe(_:)-6h8f8","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/pipe(_:)-705a4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoo","title":"ParserBuilder.ZipOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/map(_:)-2qc66","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/map(_:)-3ibbt","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/map(_:)-9gbns","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/pipe(_:)-33xoq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/pipe(_:)-7varh","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooo","title":"ParserBuilder.ZipOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/map(_:)-1gk1i","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/map(_:)-30gtj","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/map(_:)-83pft","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/pipe(_:)-15onh","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/pipe(_:)-4jq6c","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooo","title":"ParserBuilder.ZipOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/map(_:)-56xy4","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/map(_:)-6snk4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/map(_:)-u84m","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/pipe(_:)-1kzvl","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/pipe(_:)-4cm6o","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooooo","title":"ParserBuilder.ZipOOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/map(_:)-2wel6","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/map(_:)-55z0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/map(_:)-utqs","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/pipe(_:)-42uz0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/pipe(_:)-63j5q","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooooo","title":"ParserBuilder.ZipOOOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/map(_:)-2wgqw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/map(_:)-535a","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/map(_:)-uwl6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/pipe(_:)-42su2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/pipe(_:)-63qa4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooooov","title":"ParserBuilder.ZipOOOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/map(_:)-5704q","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/map(_:)-6sviy","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/map(_:)-uf6o","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/pipe(_:)-1ksth","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/pipe(_:)-4cec6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooov","title":"ParserBuilder.ZipOOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/map(_:)-33wo5","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/map(_:)-5cmcb","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/map(_:)-zh2l","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/pipe(_:)-3ug8f","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/pipe(_:)-69qjh","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooovo","title":"ParserBuilder.ZipOOOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/map(_:)-33txd","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/map(_:)-5cp6b","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/map(_:)-zp2x","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/pipe(_:)-3udsv","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/pipe(_:)-69xpt","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoooovv","title":"ParserBuilder.ZipOOOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/map(_:)-1gr2s","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/map(_:)-30j0n","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/map(_:)-83ib9","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/pipe(_:)-15ri1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/pipe(_:)-4jnd2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooov","title":"ParserBuilder.ZipOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/map(_:)-4dtmt","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/map(_:)-7ko65","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/map(_:)-8mxzq","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/pipe(_:)-299z4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/pipe(_:)-3o241","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovo","title":"ParserBuilder.ZipOOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/map(_:)-6enk7","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/map(_:)-6ywjn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/map(_:)-7dcq5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/pipe(_:)-1myzk","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/pipe(_:)-cfy0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovoo","title":"ParserBuilder.ZipOOOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/map(_:)-6evhj","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/map(_:)-6yowb","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/map(_:)-7dfjt","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/pipe(_:)-1mwsi","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/pipe(_:)-cd5a","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovov","title":"ParserBuilder.ZipOOOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/map(_:)-4dloh","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/map(_:)-7klzl","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/map(_:)-8mqt0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/pipe(_:)-292aq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/pipe(_:)-3o9x1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovv","title":"ParserBuilder.ZipOOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/map(_:)-4pjw2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/map(_:)-4x4rw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/map(_:)-5jik6","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/pipe(_:)-16r0p","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/pipe(_:)-3u49d","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovvo","title":"ParserBuilder.ZipOOOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/map(_:)-4phps","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/map(_:)-4xbtu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/map(_:)-5jkqg","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/pipe(_:)-16tst","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/pipe(_:)-3twm5","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipooovvv","title":"ParserBuilder.ZipOOOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/map(_:)-2qeco","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/map(_:)-3iiz9","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/map(_:)-9g8xq","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/pipe(_:)-33vek","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/pipe(_:)-7v355","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoov","title":"ParserBuilder.ZipOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/map(_:)-5fkyu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/map(_:)-776ns","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/map(_:)-972hy","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/pipe(_:)-5g8yd","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/pipe(_:)-8p2a5","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovo","title":"ParserBuilder.ZipOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/map(_:)-1l9at","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/map(_:)-2y84r","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/map(_:)-8kmco","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/pipe(_:)-1d15b","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/pipe(_:)-k6sq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovoo","title":"ParserBuilder.ZipOOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/map(_:)-2qhls","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/map(_:)-528n6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/map(_:)-9k0bl","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/pipe(_:)-48s52","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/pipe(_:)-5h107","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovooo","title":"ParserBuilder.ZipOOVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/map(_:)-2qfeu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/map(_:)-520sg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/map(_:)-9k31h","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/pipe(_:)-48ub8","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/pipe(_:)-5gtx3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovoov","title":"ParserBuilder.ZipOOVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/map(_:)-1lgfd","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/map(_:)-2yfxv","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/map(_:)-8kf7i","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/pipe(_:)-1d43j","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/pipe(_:)-k90c","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovov","title":"ParserBuilder.ZipOOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/map(_:)-4zkj5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/map(_:)-74w9s","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/map(_:)-7h2kj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/pipe(_:)-65bcm","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/pipe(_:)-6ms6v","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovovo","title":"ParserBuilder.ZipOOVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/map(_:)-4zrit","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/map(_:)-74yde","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/map(_:)-7hafv","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/pipe(_:)-653ec","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/pipe(_:)-6mv9z","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovovv","title":"ParserBuilder.ZipOOVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/map(_:)-5fnkw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/map(_:)-77doq","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/map(_:)-9705c","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/pipe(_:)-5ggwh","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/pipe(_:)-8p4gh","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovv","title":"ParserBuilder.ZipOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/map(_:)-23x16","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/map(_:)-41h90","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/map(_:)-98weh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/pipe(_:)-304ob","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/pipe(_:)-8yma7","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvo","title":"ParserBuilder.ZipOOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/map(_:)-7sqzs","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/map(_:)-8zno5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/map(_:)-kkrw","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/pipe(_:)-3fv44","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/pipe(_:)-4g7wk","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvoo","title":"ParserBuilder.ZipOOVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/map(_:)-7sj7i","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/map(_:)-8zkxd","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/map(_:)-knpa","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/pipe(_:)-3fy4m","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/pipe(_:)-4ga5e","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvov","title":"ParserBuilder.ZipOOVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/map(_:)-23u7c","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/map(_:)-41jxy","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/map(_:)-98oot","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/pipe(_:)-302hn","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/pipe(_:)-8yogv","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvv","title":"ParserBuilder.ZipOOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/map(_:)-7472h","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/map(_:)-9puzi","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/map(_:)-9w6g4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/pipe(_:)-11v2d","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/pipe(_:)-6ty85","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvo","title":"ParserBuilder.ZipOOVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/map(_:)-74eql","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/map(_:)-9ps88","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/map(_:)-9w98m","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/pipe(_:)-12249","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/pipe(_:)-6tw21","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipoovvvv","title":"ParserBuilder.ZipOOVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/map(_:)-2eqxv","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/map(_:)-5xl7w","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/map(_:)-pumw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/pipe(_:)-6h682","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/pipe(_:)-6zxla","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipov","title":"ParserBuilder.ZipOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/map(_:)-14kwo","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/map(_:)-569zz","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/map(_:)-d932","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/pipe(_:)-5d0nv","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/pipe(_:)-76qvw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovo","title":"ParserBuilder.ZipOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/map(_:)-2ko68","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/map(_:)-6zlcr","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/map(_:)-9ua55","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/pipe(_:)-8hgfi","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/pipe(_:)-9cx5p","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoo","title":"ParserBuilder.ZipOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/map(_:)-14ada","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/map(_:)-4n0ny","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/map(_:)-oayw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/pipe(_:)-3qy7d","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/pipe(_:)-97c8m","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovooo","title":"ParserBuilder.ZipOVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/map(_:)-3annk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/map(_:)-3imqt","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/map(_:)-3na42","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/pipe(_:)-3ehi1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/pipe(_:)-98rmr","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoooo","title":"ParserBuilder.ZipOVOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/map(_:)-3akv2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/map(_:)-3ipgh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/map(_:)-3n7xs","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/pipe(_:)-3e9xp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/pipe(_:)-98kgz","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovooov","title":"ParserBuilder.ZipOVOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/map(_:)-14he4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/map(_:)-4n3ho","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/map(_:)-o8u2","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/pipe(_:)-3qqsd","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/pipe(_:)-97jh0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoov","title":"ParserBuilder.ZipOVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/map(_:)-14mhw","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/map(_:)-2mdlt","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/map(_:)-5wmwz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/pipe(_:)-2pxq0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/pipe(_:)-9x1qa","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoovo","title":"ParserBuilder.ZipOVOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/map(_:)-14tne","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/map(_:)-2m6gd","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/map(_:)-5wf2j","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/pipe(_:)-2q5ca","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/pipe(_:)-9wyxo","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovoovv","title":"ParserBuilder.ZipOVOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/map(_:)-2kqcu","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/map(_:)-6zj63","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/map(_:)-9ucz9","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/pipe(_:)-8ho4c","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/pipe(_:)-9cp6x","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovov","title":"ParserBuilder.ZipOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/map(_:)-20t5b","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/map(_:)-3qi27","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/map(_:)-8a64q","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/pipe(_:)-5xti0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/pipe(_:)-70gx3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovo","title":"ParserBuilder.ZipOVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/map(_:)-2jyke","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/map(_:)-4bjgx","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/map(_:)-5puz1","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/pipe(_:)-1nebz","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/pipe(_:)-56ukw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovoo","title":"ParserBuilder.ZipOVOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/map(_:)-2jwds","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/map(_:)-4bln9","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/map(_:)-5q24h","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/pipe(_:)-1n6m7","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/pipe(_:)-56xbq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/print(_:into:)","title":"func print((P0.Output, P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovov","title":"ParserBuilder.ZipOVOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/map(_:)-20lzj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/map(_:)-3qfa7","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/map(_:)-8a8cc","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/pipe(_:)-5y0i6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/pipe(_:)-70err","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovv","title":"ParserBuilder.ZipOVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/map(_:)-37eov","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/map(_:)-3izto","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/map(_:)-6pjps","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/pipe(_:)-2qmtt","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/pipe(_:)-z4a6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovvo","title":"ParserBuilder.ZipOVOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/map(_:)-37gxb","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/map(_:)-3ixnu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/map(_:)-6pmnq","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/pipe(_:)-2qp05","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/pipe(_:)-yx4o","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovovvv","title":"ParserBuilder.ZipOVOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/map(_:)-14d56","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/map(_:)-567tb","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/map(_:)-dbv0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/pipe(_:)-5d7or","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/pipe(_:)-76yni","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovv","title":"ParserBuilder.ZipOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/map(_:)-3ft3l","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/map(_:)-7f5zs","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/map(_:)-96qne","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/pipe(_:)-7l7j3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/pipe(_:)-8oczg","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/print(_:into:)","title":"func print((P0.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvo","title":"ParserBuilder.ZipOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/map(_:)-4aj0u","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/map(_:)-78oi7","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/map(_:)-8l02m","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/pipe(_:)-51z9c","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/pipe(_:)-9iqau","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/print(_:into:)","title":"func print((P0.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvoo","title":"ParserBuilder.ZipOVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/map(_:)-1jfhb","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/map(_:)-46ifg","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/map(_:)-4qqy","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/pipe(_:)-272kd","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/pipe(_:)-5qcu1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/print(_:into:)","title":"func print((P0.Output, P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvooo","title":"ParserBuilder.ZipOVVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/map(_:)-1jncf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/map(_:)-46klu","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/map(_:)-4xt0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/pipe(_:)-26uqp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/pipe(_:)-5q5nx","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/print(_:into:)","title":"func print((P0.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvoov","title":"ParserBuilder.ZipOVVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/map(_:)-4ab98","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/map(_:)-78wgv","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/map(_:)-8kxak","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/pipe(_:)-521fm","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/pipe(_:)-9io3o","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/print(_:into:)","title":"func print((P0.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvov","title":"ParserBuilder.ZipOVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/map(_:)-2kyp7","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/map(_:)-51nel","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/map(_:)-n6pa","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/pipe(_:)-7zft4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/pipe(_:)-9xb0v","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/print(_:into:)","title":"func print((P0.Output, P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvovo","title":"ParserBuilder.ZipOVVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/map(_:)-2l1iz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/map(_:)-51v49","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/map(_:)-n8vk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/pipe(_:)-7zmxq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/pipe(_:)-9x8v3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/print(_:into:)","title":"func print((P0.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvovv","title":"ParserBuilder.ZipOVVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/map(_:)-3g0x9","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/map(_:)-7fdh2","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/map(_:)-96ivo","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/pipe(_:)-7l9pb","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/pipe(_:)-8okpa","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvv","title":"ParserBuilder.ZipOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/map(_:)-6d0vj","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/map(_:)-6pd5b","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/map(_:)-7x8q6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/pipe(_:)-1shsm","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/pipe(_:)-4cbc1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/print(_:into:)","title":"func print((P0.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvo","title":"ParserBuilder.ZipOVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/map(_:)-5c51r","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/map(_:)-7lat0","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/map(_:)-9pjql","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/pipe(_:)-1tqfp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/pipe(_:)-62l6h","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/print(_:into:)","title":"func print((P0.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvoo","title":"ParserBuilder.ZipOVVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/map(_:)-5cczz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/map(_:)-7l7yu","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/map(_:)-9pci9","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/pipe(_:)-1tslt","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/pipe(_:)-62nz9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/print(_:into:)","title":"func print((P0.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvov","title":"ParserBuilder.ZipOVVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/map(_:)-6d3lb","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/map(_:)-6pkpb","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/map(_:)-7x0u0","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/pipe(_:)-1sa1k","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/pipe(_:)-4c97h","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvv","title":"ParserBuilder.ZipOVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P0.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/map(_:)-2xb4e","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/map(_:)-8htid","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/map(_:)-8t0yk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/pipe(_:)-16ab8","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/pipe(_:)-8bo3s","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/print(_:into:)","title":"func print((P0.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvo","title":"ParserBuilder.ZipOVVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P0.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/map(_:)-2x35o","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/map(_:)-8i1a9","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/map(_:)-8t86m","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/pipe(_:)-1684q","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/pipe(_:)-8blbu","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/print(_:into:)","title":"func print(P0.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipovvvvv","title":"ParserBuilder.ZipOVVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P1.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/map(_:)-1k8ij","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/map(_:)-3ij9v","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/map(_:)-4tsoy","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/pipe(_:)-6bv8d","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/pipe(_:)-8o3ud","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/print(_:into:)","title":"func print(P1.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvo","title":"ParserBuilder.ZipVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/map(_:)-1ea5o","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/map(_:)-375ml","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/map(_:)-8aif5","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/pipe(_:)-6z4zg","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/pipe(_:)-9nnsc","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoo","title":"ParserBuilder.ZipVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/map(_:)-2ujqr","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/map(_:)-833g4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/map(_:)-u1zz","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/pipe(_:)-4p2ww","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/pipe(_:)-97q9r","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooo","title":"ParserBuilder.ZipVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/map(_:)-3zqoy","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/map(_:)-8l8hp","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/map(_:)-8p6ch","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/pipe(_:)-6at0i","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/pipe(_:)-7hkrd","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoooo","title":"ParserBuilder.ZipVOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/map(_:)-3atu2","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/map(_:)-3jb6c","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/map(_:)-9l9x5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/pipe(_:)-94hmg","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/pipe(_:)-nh61","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooooo","title":"ParserBuilder.ZipVOOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/map(_:)-3b1lo","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/map(_:)-3jiie","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/map(_:)-9lcnh","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/pipe(_:)-94ff2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/pipe(_:)-no7x","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoooov","title":"ParserBuilder.ZipVOOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/map(_:)-3ziss","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/map(_:)-8lga1","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/map(_:)-8p95x","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/pipe(_:)-6aq78","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/pipe(_:)-7hilp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooov","title":"ParserBuilder.ZipVOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/map(_:)-2eazf","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/map(_:)-4dmcl","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/map(_:)-765vc","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/pipe(_:)-1dz54","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/pipe(_:)-8g79b","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooovo","title":"ParserBuilder.ZipVOOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/map(_:)-2e897","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/map(_:)-4df6x","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/map(_:)-76816","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/pipe(_:)-1e6je","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/pipe(_:)-8g53j","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvooovv","title":"ParserBuilder.ZipVOOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/map(_:)-2uhhn","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/map(_:)-835me","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/map(_:)-tuvj","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/pipe(_:)-4p03m","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/pipe(_:)-97t5b","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoov","title":"ParserBuilder.ZipVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/map(_:)-1qdlf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/map(_:)-6a2e8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/map(_:)-7opv0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/pipe(_:)-7545v","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/pipe(_:)-9qnm0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovo","title":"ParserBuilder.ZipVOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/map(_:)-15pqf","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/map(_:)-4vrhf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/map(_:)-7u0lc","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/pipe(_:)-5e2h8","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/pipe(_:)-yv8f","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovoo","title":"ParserBuilder.ZipVOOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/map(_:)-15wxz","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/map(_:)-4vzab","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/map(_:)-7tsyu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/pipe(_:)-5dzqy","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/pipe(_:)-yt1r","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/print(_:into:)","title":"func print((P1.Output, P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovov","title":"ParserBuilder.ZipVOOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/map(_:)-1qbf7","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/map(_:)-6a4le","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/map(_:)-7omym","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/pipe(_:)-756yb","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/pipe(_:)-9qv3u","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovv","title":"ParserBuilder.ZipVOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/map(_:)-5kbia","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/map(_:)-75gkh","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/map(_:)-8yfu9","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/pipe(_:)-387xq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/pipe(_:)-6ala5","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvo","title":"ParserBuilder.ZipVOOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/map(_:)-5k3s4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/map(_:)-75odh","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/map(_:)-8y8lx","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/pipe(_:)-380cw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/pipe(_:)-6ao1t","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvoovvv","title":"ParserBuilder.ZipVOOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P1.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/map(_:)-1e30a","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/map(_:)-373ex","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/map(_:)-8apj1","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/pipe(_:)-6z1u2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/pipe(_:)-9nql6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/print(_:into:)","title":"func print(P1.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvov","title":"ParserBuilder.ZipVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/map(_:)-1ic8u","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/map(_:)-51f1e","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/map(_:)-7dfpx","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/pipe(_:)-5jdzl","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/pipe(_:)-6tq7y","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/print(_:into:)","title":"func print((P1.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovo","title":"ParserBuilder.ZipVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/map(_:)-1o25p","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/map(_:)-6h8a4","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/map(_:)-7v94k","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/pipe(_:)-3r5mb","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/pipe(_:)-7n99l","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/print(_:into:)","title":"func print((P1.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovoo","title":"ParserBuilder.ZipVOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/map(_:)-27tz8","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/map(_:)-4njph","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/map(_:)-6fk4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/pipe(_:)-30q7d","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/pipe(_:)-9aesi","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/print(_:into:)","title":"func print((P1.Output, P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovooo","title":"ParserBuilder.ZipVOVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/map(_:)-281ui","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/map(_:)-4nbqx","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/map(_:)-6cqu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/pipe(_:)-30j5p","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/pipe(_:)-9agxs","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/print(_:into:)","title":"func print((P1.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovoov","title":"ParserBuilder.ZipVOVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/map(_:)-1nugp","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/map(_:)-6hfga","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/map(_:)-7vbve","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/pipe(_:)-3r2u3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/pipe(_:)-7n74t","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/print(_:into:)","title":"func print((P1.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovov","title":"ParserBuilder.ZipVOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/map(_:)-10qqd","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/map(_:)-3z9es","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/map(_:)-9slfm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/pipe(_:)-1r15o","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/pipe(_:)-3p0aw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/print(_:into:)","title":"func print((P1.Output, P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovovo","title":"ParserBuilder.ZipVOVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/map(_:)-10yoh","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/map(_:)-3z28y","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/map(_:)-9sdkw","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/pipe(_:)-1r3ze","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/pipe(_:)-3osmy","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/print(_:into:)","title":"func print((P1.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovovv","title":"ParserBuilder.ZipVOVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P1.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/map(_:)-1i4cs","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/map(_:)-51me8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/map(_:)-7ddjd","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/pipe(_:)-5jlud","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/pipe(_:)-6tsdo","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/print(_:into:)","title":"func print(P1.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovv","title":"ParserBuilder.ZipVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/map(_:)-485ct","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/map(_:)-4qkk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/map(_:)-zi4s","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/pipe(_:)-4noea","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/pipe(_:)-9u4l4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/print(_:into:)","title":"func print((P1.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvo","title":"ParserBuilder.ZipVOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/map(_:)-6fx2n","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/map(_:)-7013q","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/map(_:)-9uxzw","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/pipe(_:)-1zwuq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/pipe(_:)-3rrde","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/print(_:into:)","title":"func print((P1.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvoo","title":"ParserBuilder.ZipVOVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/map(_:)-6g53z","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/map(_:)-708bs","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/map(_:)-9uqlq","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/pipe(_:)-1zzbo","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/pipe(_:)-3ru5s","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/print(_:into:)","title":"func print((P1.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvov","title":"ParserBuilder.ZipVOVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P1.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/map(_:)-47ydd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/map(_:)-4nvq","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/map(_:)-zpwe","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/pipe(_:)-4nr4w","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/pipe(_:)-9ubt6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/print(_:into:)","title":"func print(P1.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvv","title":"ParserBuilder.ZipVOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P1.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/map(_:)-5ks7y","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/map(_:)-9e1cn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/map(_:)-jmpo","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/pipe(_:)-1bjmb","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/pipe(_:)-4fuz7","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/print(_:into:)","title":"func print((P1.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvo","title":"ParserBuilder.ZipVOVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P1.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/map(_:)-5kue8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/map(_:)-9e453","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/map(_:)-jjma","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/pipe(_:)-1bquj","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/pipe(_:)-4fssz","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/print(_:into:)","title":"func print(P1.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvovvvv","title":"ParserBuilder.ZipVOVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/map(_:)-1kgcj","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/map(_:)-3ibmb","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/map(_:)-4tvgk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/pipe(_:)-6bo3t","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/pipe(_:)-8oaxl","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/print(_:into:)","title":"func print(Void, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvv","title":"ParserBuilder.ZipVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P2.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/map(_:)-22k7h","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/map(_:)-5g8j0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/map(_:)-q0w1","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/pipe(_:)-77g8d","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/pipe(_:)-7vnpp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/print(_:into:)","title":"func print(P2.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvo","title":"ParserBuilder.ZipVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/map(_:)-1i3go","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/map(_:)-6s2e5","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/map(_:)-9sudp","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/pipe(_:)-27ptz","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/pipe(_:)-3cy09","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/print(_:into:)","title":"func print((P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoo","title":"ParserBuilder.ZipVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/map(_:)-11uaf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/map(_:)-6ztap","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/map(_:)-7jzb3","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/pipe(_:)-2k470","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/pipe(_:)-7nhx9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/print(_:into:)","title":"func print((P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvooo","title":"ParserBuilder.ZipVVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/map(_:)-19x9p","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/map(_:)-6bsn8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/map(_:)-6d3oz","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/pipe(_:)-1c4nw","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/pipe(_:)-5zj3l","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/print(_:into:)","title":"func print((P2.Output, P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoooo","title":"ParserBuilder.ZipVVOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/map(_:)-1a035","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/map(_:)-6bzr6","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/map(_:)-6d5or","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/pipe(_:)-1bxbi","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/pipe(_:)-5zbat","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/print(_:into:)","title":"func print((P2.Output, P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvooov","title":"ParserBuilder.ZipVVOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/map(_:)-11n93","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/map(_:)-6zqph","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/map(_:)-7jrkf","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/pipe(_:)-2kbym","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/pipe(_:)-7nk2p","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/print(_:into:)","title":"func print((P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoov","title":"ParserBuilder.ZipVVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/map(_:)-42ppx","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/map(_:)-8t1de","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/map(_:)-deho","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/pipe(_:)-20et9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/pipe(_:)-5az0w","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/print(_:into:)","title":"func print((P2.Output, P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovo","title":"ParserBuilder.ZipVVOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/map(_:)-42icp","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/map(_:)-8sz74","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/map(_:)-dbqi","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/pipe(_:)-20byp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/pipe(_:)-5b6s2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/print(_:into:)","title":"func print((P2.Output, P3.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvoovv","title":"ParserBuilder.ZipVVOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P2.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/map(_:)-1i0se","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/map(_:)-6rv7l","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/map(_:)-9swjd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/pipe(_:)-27i1z","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/pipe(_:)-3d5sl","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/print(_:into:)","title":"func print(P2.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvov","title":"ParserBuilder.ZipVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/map(_:)-1q4c6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/map(_:)-6vp7i","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/map(_:)-7wc1s","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/pipe(_:)-38o7x","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/pipe(_:)-44al","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/print(_:into:)","title":"func print((P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovo","title":"ParserBuilder.ZipVVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/map(_:)-7dwjs","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/map(_:)-8fsr9","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/map(_:)-xfer","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/pipe(_:)-2zy3y","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/pipe(_:)-8iakl","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/print(_:into:)","title":"func print((P2.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovoo","title":"ParserBuilder.ZipVVOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/map(_:)-7dpge","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/map(_:)-8g0ep","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/map(_:)-x7nn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/pipe(_:)-300wo","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/pipe(_:)-8i321","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/print(_:into:)","title":"func print((P2.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovov","title":"ParserBuilder.ZipVVOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P2.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/map(_:)-1q1m0","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/map(_:)-6vi2w","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/map(_:)-7wjty","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/pipe(_:)-38gjt","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/pipe(_:)-472h","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/print(_:into:)","title":"func print(P2.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovv","title":"ParserBuilder.ZipVVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/map(_:)-3c9j6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/map(_:)-7j9z8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/map(_:)-826p5","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/pipe(_:)-7u0is","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/pipe(_:)-lxv3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/print(_:into:)","title":"func print((P2.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvo","title":"ParserBuilder.ZipVVOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P2.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/map(_:)-3chb0","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/map(_:)-7j72e","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/map(_:)-81yxp","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/pipe(_:)-7ttk2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/pipe(_:)-m01r","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/print(_:into:)","title":"func print(P2.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvovvv","title":"ParserBuilder.ZipVVOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/map(_:)-22chd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/map(_:)-5gfq6","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/map(_:)-q3pp","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/pipe(_:)-77iep","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/pipe(_:)-7vqhd","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/print(_:into:)","title":"func print(Void, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvv","title":"ParserBuilder.ZipVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P3.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/map(_:)-26z7x","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/map(_:)-2cet5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/map(_:)-8yxrg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/pipe(_:)-1j5ye","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/pipe(_:)-2iwt4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/print(_:into:)","title":"func print(P3.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvo","title":"ParserBuilder.ZipVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/map(_:)-3bx4r","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/map(_:)-3g268","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/map(_:)-55re8","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/pipe(_:)-17o1v","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/pipe(_:)-24uib","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/print(_:into:)","title":"func print((P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoo","title":"ParserBuilder.ZipVVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/map(_:)-1tuip","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/map(_:)-65vfy","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/map(_:)-9b3le","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/pipe(_:)-5dv2g","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/pipe(_:)-79ro0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/print(_:into:)","title":"func print((P3.Output, P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvooo","title":"ParserBuilder.ZipVVVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/map(_:)-1twpx","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/map(_:)-65tb0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/map(_:)-9b6c0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/pipe(_:)-5dnqy","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/pipe(_:)-79jxa","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/print(_:into:)","title":"func print((P3.Output, P4.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvoov","title":"ParserBuilder.ZipVVVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P3.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/map(_:)-3c4qz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/map(_:)-3fujm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/map(_:)-55k9e","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/pipe(_:)-17v37","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/pipe(_:)-24x77","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/print(_:into:)","title":"func print(P3.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvov","title":"ParserBuilder.ZipVVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/map(_:)-3pxnz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/map(_:)-47kqo","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/map(_:)-8gs8z","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/pipe(_:)-52mld","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/pipe(_:)-7kqgp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/print(_:into:)","title":"func print((P3.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovo","title":"ParserBuilder.ZipVVVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P3.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/map(_:)-3pztr","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/map(_:)-47iki","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/map(_:)-8gpl7","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/pipe(_:)-52kfx","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/pipe(_:)-7kxf1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/print(_:into:)","title":"func print(P3.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvovv","title":"ParserBuilder.ZipVVVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/map(_:)-26x1d","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/map(_:)-2chjh","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/map(_:)-8z4xm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/pipe(_:)-1jdno","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/pipe(_:)-2iz1i","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/print(_:into:)","title":"func print(Void, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvv","title":"ParserBuilder.ZipVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P4.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/map(_:)-2gs5m","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/map(_:)-2rs4h","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/map(_:)-5u1ap","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/pipe(_:)-21z8y","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/pipe(_:)-9o84z","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/print(_:into:)","title":"func print(P4.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvo","title":"ParserBuilder.ZipVVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> (P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/map(_:)-40rn7","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/map(_:)-57ixn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/map(_:)-8zplu","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/pipe(_:)-5zul5","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/pipe(_:)-6ow4h","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/print(_:into:)","title":"func print((P4.Output, P5.Output), into: inout P0.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo","title":"ParserBuilder.ZipVVVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P4.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/map(_:)-40our","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/map(_:)-57blf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/map(_:)-8zhpc","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/pipe(_:)-5zxad","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/pipe(_:)-6oyb1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/print(_:into:)","title":"func print(P4.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvov","title":"ParserBuilder.ZipVVVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/map(_:)-2guc4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/map(_:)-2rl2d","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/map(_:)-5tyod","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/pipe(_:)-21s0s","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/pipe(_:)-9of9n","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/print(_:into:)","title":"func print(Void, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvv","title":"ParserBuilder.ZipVVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/parse(_:)","title":"func parse(inout P0.Input) rethrows -> P5.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/map(_:)-1g204","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/map(_:)-1ssci","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/map(_:)-5vt16","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/pipe(_:)-5z874","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/pipe(_:)-86pwo","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/print(_:into:)","title":"func print(P5.Output, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvo","title":"ParserBuilder.ZipVVVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/parse(_:)","title":"func parse(inout P0.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/map(_:)-1g9tm","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/map(_:)-1sv64","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/map(_:)-5vkzs","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/pipe(_:)-5z62m","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/pipe(_:)-86n2y","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/print(_:into:)","title":"func print(Void, into: inout P0.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parserbuilder\/zipvvvvvv","title":"ParserBuilder.ZipVVVVVV","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:)","title":"static func buildBlock<P>(P) -> P","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:)-1ti0t","title":"static func buildBlock<P0, P1>(P0, P1) -> ParserBuilder.ZipOO<P0, P1>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:)-34wdz","title":"static func buildBlock<P0, P1>(P0, P1) -> ParserBuilder.ZipVO<P0, P1>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:)-6y86e","title":"static func buildBlock<P0, P1>(P0, P1) -> ParserBuilder.ZipVV<P0, P1>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:)-90ozy","title":"static func buildBlock<P0, P1>(P0, P1) -> ParserBuilder.ZipOV<P0, P1>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-13gxx","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipOVO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-55thg","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipVOO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-6jmii","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipVVO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-6pzs","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipVVV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-7b8l3","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipVOV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-7fqvz","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipOOV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-9nhme","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipOOO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:)-pagr","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> ParserBuilder.ZipOVV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-1lmft","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOVOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-3ynya","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVOVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-44k77","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOVVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-4npoh","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVOOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-59omv","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOOVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-6k5p1","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVVOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-80pyd","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOVVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-8ier7","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVOVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-982sw","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOOOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-9cfwt","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOOOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-9ppxy","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOVOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-9vsqv","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVVOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-9zfpv","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVVVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-n40c","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipOOVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-ruyy","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVOOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:)-suvb","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> ParserBuilder.ZipVVVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-11qti","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-16q5y","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-1cv80","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-1gjmy","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-1i59i","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-1jtyl","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-1k5bg","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-29umo","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-2c1fs","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-2lq0i","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-2qnsk","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-374ic","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-438w1","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-5gz5r","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-5hvxh","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-5i4po","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-5scc0","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-68y7g","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-6az56","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-6zvk6","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-76ev9","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-7ea26","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-7gsdi","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-7q4c","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-7qjne","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-7zydn","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-82h8x","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOOVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-87ivh","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-8waug","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipOVOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-967k4","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-9uw2g","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVOOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:)-qf59","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> ParserBuilder.ZipVVVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-11x2a","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-12opr","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-14oue","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-160d8","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-16jnu","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-1d9k7","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-1nrn5","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-1w9i8","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-2a6v7","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-2bzz5","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-2dpat","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-2km4n","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-2pgaq","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-2q76q","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-2xxcr","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-33233","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-3egqg","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-3krlx","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-49oi0","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4c3gm","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4hnq1","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4hw60","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4jbvb","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4t396","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4tp0c","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4y81n","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-4ze55","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-579l7","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-59kqz","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-5h59o","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-63f78","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-69d2i","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-6oc17","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-6pw4d","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-6svc5","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-6uh6i","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-6v640","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-6vw5b","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-71gaj","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7469y","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7b539","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7hbn5","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7j87m","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7kz46","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7pyzj","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7uek9","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-7yhjz","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-8006h","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-858ok","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-85fp7","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-87vpq","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-887jn","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-8dx38","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-8jbit","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-8loqh","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-8pslj","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-8zffk","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-9a5i","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOOOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-9bv0i","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-9ju9z","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-9m3yu","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-9pf1j","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVOVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-9zggn","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipOVOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildblock(_:_:_:_:_:_:)-t3ax","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> ParserBuilder.ZipVVOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildeither(first:)","title":"static func buildEither<TrueParser, FalseParser>(first: TrueParser) -> Parsers.Conditional<TrueParser, FalseParser>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildeither(second:)","title":"static func buildEither<TrueParser, FalseParser>(second: FalseParser) -> Parsers.Conditional<TrueParser, FalseParser>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildif(_:)-4fmt7","title":"static func buildIf<P>(P?) -> Parsers.OptionalVoid<P>","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildif(_:)-96a4s","title":"static func buildIf<P>(P?) -> P?","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildlimitedavailability(_:)-8ez25","title":"static func buildLimitedAvailability<P>(P?) -> P?","type":"method"},{"path":"\/documentation\/parsing\/parserbuilder\/buildlimitedavailability(_:)-8o1cq","title":"static func buildLimitedAvailability<P>(P?) -> Parsers.OptionalVoid<P>","type":"method"}],"path":"\/documentation\/parsing\/parserbuilder","title":"ParserBuilder","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/parse(_:)","title":"func parse(inout Input) throws -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/map(_:)-192bk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/map(_:)-5n6ah","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/map(_:)-6it14","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/pipe(_:)-3hp7h","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/pipe(_:)-8yr63","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/boolparser\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/print(_:into:)","title":"func print(Bool, into: inout Input)","type":"method"}],"path":"\/documentation\/parsing\/parsers\/boolparser\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/boolparser","title":"Parsers.BoolParser","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/parse(_:)","title":"func parse(inout Input) throws -> Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/map(_:)-4jyrs","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/map(_:)-5o6ql","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/map(_:)-7molb","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/pipe(_:)-2u83q","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/pipe(_:)-7e97g","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/print(_:into:)","title":"func print(Output, into: inout Input)","type":"method"},{"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser","title":"Parsers.CaseIterableRawRepresentableParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/init(upstream:transform:)","title":"init(upstream: Upstream, transform: (Upstream.Output) -> Output?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/transform","title":"let transform: (Upstream.Output) -> Output?","type":"property"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/parse(_:)","title":"func parse(inout Upstream.Input) throws -> Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/map(_:)-19wqa","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/map(_:)-9gjmh","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/map(_:)-9x9fl","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/pipe(_:)-2dwgm","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/pipe(_:)-35ngr","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/compactmap\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/compactmap","title":"Parsers.CompactMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/init(upstream:predicate:)","title":"init(upstream: Upstream, predicate: (Upstream.Output) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/predicate","title":"let predicate: (Upstream.Output) -> Bool","type":"property"},{"path":"\/documentation\/parsing\/parsers\/filter\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/parse(_:)","title":"func parse(inout Upstream.Input) throws -> Upstream.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/map(_:)-49lgp","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/map(_:)-4zhok","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/map(_:)-9mrgp","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/pipe(_:)-1phcr","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/pipe(_:)-5wo0z","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/filter\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/print(_:into:)","title":"func print(Upstream.Output, into: inout Upstream.Input) throws","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/filter\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/filter","title":"Parsers.Filter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/init(upstream:transform:)","title":"init(upstream: Upstream, transform: (Upstream.Output) -> NewParser)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/transform","title":"let transform: (Upstream.Output) -> NewParser","type":"property"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> NewParser.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/map(_:)-1waxv","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/map(_:)-505e3","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/map(_:)-8vyx7","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/pipe(_:)-5rglq","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/pipe(_:)-7r1v5","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/flatmap\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/flatmap","title":"Parsers.FlatMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/parse(_:)","title":"func parse(inout Input) throws -> Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/map(_:)-33rf8","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/map(_:)-7jzv2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/map(_:)-l33","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/pipe(_:)-1wn9a","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/pipe(_:)-24swp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/floatparser\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/print(_:into:)","title":"func print(Output, into: inout Input)","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/floatparser\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/floatparser","title":"Parsers.FloatParser","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/identity\/parse(_:)","title":"func parse(inout InputOutput) -> InputOutput","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/print(_:into:)","title":"func print(InputOutput, into: inout InputOutput)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/identity\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/map(_:)-4sep3","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/map(_:)-5xsyg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/map(_:)-xubg","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/pipe(_:)-5l5ht","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/pipe(_:)-5pp2k","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/identity\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/identity\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/identity\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/identity\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/identity","title":"Parsers.Identity","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/init(radix:)","title":"init(radix: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/radix","title":"let radix: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/parse(_:)","title":"func parse(inout Input) throws -> Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/map(_:)-12eju","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/map(_:)-6uql5","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/map(_:)-80tkq","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/pipe(_:)-2c52r","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/pipe(_:)-45j87","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/intparser\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/print(_:into:)","title":"func print(Output, into: inout Input)","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/intparser\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/intparser","title":"Parsers.IntParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/init(upstream:transform:)","title":"init(upstream: Upstream, transform: (Upstream.Output) -> NewOutput)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/transform","title":"let transform: (Upstream.Output) -> NewOutput","type":"property"},{"path":"\/documentation\/parsing\/parsers\/map\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> NewOutput","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/map(_:)-3hzye","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/map(_:)-3tkg4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/map(_:)-6hmca","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/pipe(_:)-3d3m8","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/pipe(_:)-43ncv","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/map\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/map","title":"Parsers.Map","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/init(upstream:output:)","title":"init(upstream: Upstream, output: Output)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/output","title":"let output: Output","type":"property"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/map(_:)-1997o","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/map(_:)-1b1co","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/map(_:)-ndlj","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/pipe(_:)-13fwx","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/pipe(_:)-4gvx1","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/mapconstant\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/print(_:into:)","title":"func print(Output, into: inout Upstream.Input) throws","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconstant\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/mapconstant\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/mapconstant","title":"Parsers.MapConstant","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/init(upstream:downstream:)","title":"init(upstream: Upstream, downstream: Downstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/downstream","title":"let downstream: Downstream","type":"property"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> Downstream.Output","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/print(_:into:)","title":"func print(Downstream.Output, into: inout Upstream.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/map(_:)-2zn5y","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/map(_:)-7p9p2","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/map(_:)-nyxk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/pipe(_:)-44nf7","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/pipe(_:)-8h9rx","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/mapconversion\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/mapconversion\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/mapconversion\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/mapconversion","title":"Parsers.MapConversion","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/init(_:)","title":"init([Parsers])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/parsers","title":"let parsers: [Parsers]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/parse(_:)","title":"func parse(inout Parsers.Input) throws -> Parsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/map(_:)-1o0ph","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/map(_:)-9xov3","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/map(_:)-tgs7","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/pipe(_:)-8adfn","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/pipe(_:)-kopm","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/oneofmany\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/print(_:into:)","title":"func print(Parsers.Output, into: inout Parsers.Input) throws","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneofmany\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/oneofmany\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/oneofmany","title":"Parsers.OneOfMany","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/init(wrapped:)","title":"init(wrapped: Wrapped?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/parse(_:)","title":"func parse(inout Wrapped.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/map(_:)-1xzxn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/map(_:)-2zbxu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/map(_:)-6ngtt","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/pipe(_:)-5x3p3","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/pipe(_:)-7sujz","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/optionalvoid\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/print(_:into:)","title":"func print((), into: inout Wrapped.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalvoid\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/optionalvoid\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/optionalvoid","title":"Parsers.OptionalVoid","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/init(parser:printer:)","title":"init(parser: Parser, printer: Printer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/parser","title":"let parser: Parser","type":"property"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/printer","title":"let printer: Printer","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/parse(_:)","title":"func parse(inout Parser.Input) rethrows -> Parser.Output","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/print(_:into:)","title":"func print(Parser.Output, into: inout Parser.Input) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/map(_:)-2ntlv","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/map(_:)-87kts","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/map(_:)-904cs","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/pipe(_:)-25tr2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/pipe(_:)-4tdat","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/overrideprinting\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/overrideprinting\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/overrideprinting\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/overrideprinting","title":"Parsers.OverridePrinting","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/init(upstream:downstream:)","title":"init(upstream: Upstream, downstream: Downstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/downstream","title":"let downstream: Downstream","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pipe\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> Downstream.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/map(_:)-15cfg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/map(_:)-5fky4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/map(_:)-810vk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/pipe(_:)-10zjp","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/pipe(_:)-1u00b","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/pipe\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/print(_:into:)","title":"func print(Downstream.Output, into: inout Upstream.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/pipe\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/pipe","title":"Parsers.Pipe","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/parse(_:)","title":"func parse(inout Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/map(_:)-4cq8m","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/map(_:)-50emp","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/map(_:)-9opyh","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/pipe(_:)-1euft","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/pipe(_:)-991rt","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipeend\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/pipeend\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/pipeend","title":"Parsers.PipeEnd","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/print\/init(parser:printer:)","title":"init(parser: Upstream, printer: (Upstream.Output, inout Upstream.Input) -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/print\/parser","title":"let parser: Upstream","type":"property"},{"path":"\/documentation\/parsing\/parsers\/print\/printer","title":"let printer: (Upstream.Output, inout Upstream.Input) -> Void","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/print\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> Upstream.Output","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/print(_:into:)","title":"func print(Upstream.Output, into: inout Upstream.Input)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/print\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/map(_:)-17c8f","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/map(_:)-4higi","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/map(_:)-805dm","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/pipe(_:)-4yt","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/pipe(_:)-9gud6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/print\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/print\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/print\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/print\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/print","title":"Parsers.Print","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/init(downstream:keypath:)","title":"init(downstream: Downstream, keyPath: WritableKeyPath<Input, Downstream.Input>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/downstream","title":"let downstream: Downstream","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pullback\/keypath","title":"let keyPath: WritableKeyPath<Input, Downstream.Input>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/parse(_:)","title":"func parse(inout Input) rethrows -> Downstream.Output","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/pullback(_:)-1910g","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Input>) -> Parsers.Pullback<Downstream, NewInput>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/map(_:)-7mh8f","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/map(_:)-8i9oe","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/map(_:)-99i5n","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/pipe(_:)-1qj2y","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/pipe(_:)-1qsv4","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/pullback(_:)-9x3bo","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/pullback\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/print(_:into:)","title":"func print(Downstream.Output, into: inout Input) throws","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/pullback\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/pullback","title":"Parsers.Pullback","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/parse(_:)","title":"func parse(inout Upstream.Input) -> Upstream.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/map(_:)-25znd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/map(_:)-8im7h","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/map(_:)-93mqb","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/pipe(_:)-4ltg6","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/pipe(_:)-8e84q","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/replaceerror\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/print(_:into:)","title":"func print(Upstream.Output, into: inout Upstream.Input)","type":"method"},{"path":"\/documentation\/parsing\/parsers\/replaceerror\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/replaceerror\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/replaceerror","title":"Parsers.ReplaceError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/init(parser:printer:)","title":"init(parser: Upstream, printer: (Upstream.Output, inout Upstream.Input) throws -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/parser","title":"let parser: Upstream","type":"property"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/printer","title":"let printer: (Upstream.Output, inout Upstream.Input) throws -> Void","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/parse(_:)","title":"func parse(inout Upstream.Input) rethrows -> Upstream.Output","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/print(_:into:)","title":"func print(Upstream.Output, into: inout Upstream.Input) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/map(_:)-15tln","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/map(_:)-1is3d","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/map(_:)-98dzv","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/pipe(_:)-28g3w","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/pipe(_:)-297da","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/tryprint\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/tryprint\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/tryprint\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/tryprint","title":"Parsers.TryPrint","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/parse(_:)","title":"func parse(inout Input) throws -> UUID","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/map(_:)-301p0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/map(_:)-53qyt","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/map(_:)-99ngg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/pipe(_:)-30q5x","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/pipe(_:)-4oqr9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/uuidparser\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/uuidparser\/print(_:into:)","title":"func print(UUID, into: inout Input)","type":"method"}],"path":"\/documentation\/parsing\/parsers\/uuidparser\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/uuidparser","title":"Parsers.UUIDParser","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/always","title":"Parsers.Always","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/anyparser","title":"Parsers.AnyParser","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/end","title":"Parsers.End","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/fail","title":"Parsers.Fail","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/first","title":"Parsers.First","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/lazy","title":"Parsers.Lazy","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/many","title":"Parsers.Many","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/newline","title":"Parsers.Newline","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/prefix","title":"Parsers.Prefix","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/prefixthrough","title":"Parsers.PrefixThrough","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/prefixupto","title":"Parsers.PrefixUpTo","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/rest","title":"Parsers.Rest","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/skip","title":"Parsers.Skip","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/startswith","title":"Parsers.StartsWith","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/stream","title":"Parsers.Stream","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/whitespace","title":"Parsers.Whitespace","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/conditional\/first(_:)","title":"case first(First)","type":"case"},{"path":"\/documentation\/parsing\/parsers\/conditional\/second(_:)","title":"case second(Second)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/conditional\/parse(_:)","title":"func parse(inout First.Input) rethrows -> First.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/conditional\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/map(_:)-1wc4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/map(_:)-475u8","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/map(_:)-5zv8i","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/pipe(_:)-6ber2","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/pipe(_:)-9b541","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/conditional\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/conditional\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/print(_:into:)","title":"func print(First.Output, into: inout First.Input) rethrows","type":"method"},{"path":"\/documentation\/parsing\/parsers\/conditional\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/parsing\/parsers\/conditional\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/conditional","title":"Parsers.Conditional","type":"enum"}],"path":"\/documentation\/parsing\/parsers","title":"Parsers","type":"enum"}],"path":"\/documentation\/parsing","title":"Parsing","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/routingkit\/trierouter\/init(_:options:)","title":"init(Output.Type, options: Set<TrieRouter<Output>.ConfigurationOption>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/routingkit\/trierouter\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/routingkit\/trierouter\/options","title":"var options: Set<TrieRouter<Output>.ConfigurationOption>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/routingkit\/trierouter\/register(_:at:)","title":"func register(Output, at: [PathComponent])","type":"method"},{"path":"\/documentation\/routingkit\/trierouter\/route(path:parameters:)","title":"func route(path: [String], parameters: inout Parameters) -> Output?","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/routingkit\/trierouter\/configurationoption\/caseinsensitive","title":"case caseInsensitive","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/routingkit\/trierouter\/configurationoption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/routingkit\/trierouter\/configurationoption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/routingkit\/trierouter\/configurationoption","title":"TrieRouter.ConfigurationOption","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/routingkit\/trierouter\/erasetoanyrouter()","title":"func eraseToAnyRouter() -> AnyRouter<Self.Output>","type":"method"}],"path":"\/documentation\/routingkit\/trierouter\/router-implementations","title":"Router Implementations","type":"symbol"}],"path":"\/documentation\/routingkit\/trierouter","title":"TrieRouter","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/routingkit\/router\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/routingkit\/router\/erasetoanyrouter()","title":"func eraseToAnyRouter() -> AnyRouter<Self.Output>","type":"method"},{"path":"\/documentation\/routingkit\/router\/register(_:at:)","title":"func register(Self.Output, at: [PathComponent])","type":"method"},{"path":"\/documentation\/routingkit\/router\/route(path:parameters:)","title":"func route(path: [String], parameters: inout Parameters) -> Self.Output?","type":"method"}],"path":"\/documentation\/routingkit\/router","title":"Router","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/routingkit\/anyrouter\/init(_:)","title":"init<Router>(Router)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/routingkit\/anyrouter\/register(_:at:)","title":"func register(Output, at: [PathComponent])","type":"method"},{"path":"\/documentation\/routingkit\/anyrouter\/route(path:parameters:)","title":"func route(path: [String], parameters: inout Parameters) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/routingkit\/anyrouter\/erasetoanyrouter()","title":"func eraseToAnyRouter() -> AnyRouter<Self.Output>","type":"method"}],"path":"\/documentation\/routingkit\/anyrouter\/router-implementations","title":"Router Implementations","type":"symbol"}],"path":"\/documentation\/routingkit\/anyrouter","title":"AnyRouter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/routingkit\/parameters\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/routingkit\/parameters\/get(_:)","title":"func get(String) -> String?","type":"method"},{"path":"\/documentation\/routingkit\/parameters\/get(_:as:)","title":"func get<T>(String, as: T.Type) -> T?","type":"method"},{"path":"\/documentation\/routingkit\/parameters\/getcatchall()","title":"func getCatchall() -> [String]","type":"method"},{"path":"\/documentation\/routingkit\/parameters\/require(_:)","title":"func require(String) throws -> String","type":"method"},{"path":"\/documentation\/routingkit\/parameters\/require(_:as:)","title":"func require<T>(String, as: T.Type) throws -> T","type":"method"},{"path":"\/documentation\/routingkit\/parameters\/set(_:to:)","title":"func set(String, to: String?)","type":"method"},{"path":"\/documentation\/routingkit\/parameters\/setcatchall(matched:)","title":"func setCatchall(matched: [String])","type":"method"}],"path":"\/documentation\/routingkit\/parameters","title":"Parameters","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/routingkit\/pathcomponent\/anything","title":"case anything","type":"case"},{"path":"\/documentation\/routingkit\/pathcomponent\/catchall","title":"case catchall","type":"case"},{"path":"\/documentation\/routingkit\/pathcomponent\/constant(_:)","title":"case constant(String)","type":"case"},{"path":"\/documentation\/routingkit\/pathcomponent\/parameter(_:)","title":"case parameter(String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/routingkit\/pathcomponent\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/routingkit\/pathcomponent\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/routingkit\/pathcomponent\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/routingkit\/pathcomponent\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/routingkit\/pathcomponent\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/routingkit\/pathcomponent\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/routingkit\/pathcomponent\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/routingkit\/pathcomponent\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/routingkit\/pathcomponent","title":"PathComponent","type":"enum"}],"path":"\/documentation\/routingkit","title":"RoutingKit","type":"module"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/parse(_:)","title":"func parse(inout URLRequestData) rethrows -> Upstream.Output","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/print(_:into:)","title":"func print(Upstream.Output, into: inout URLRequestData) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/map(_:)-1ob4j","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/map(_:)-2b1n","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/map(_:)-vp7d","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/baseurlprinter\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/baseurlprinter\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/baseurlprinter\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/baseurlprinter","title":"BaseURLPrinter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/body\/init()","title":"init()","type":"init"},{"path":"\/documentation\/urlrouting\/body\/init(_:)-19x80","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/urlrouting\/body\/init(_:)-8t1z6","title":"init(() -> Bytes)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/body\/parse(_:)","title":"func parse(inout URLRequestData) throws -> Bytes.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/body\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/map(_:)-1p955","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/map(_:)-6fayp","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/map(_:)-88t5d","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/body\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/body\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/body\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/body\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/body\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/body\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/body\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/body\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/body\/print(_:into:)","title":"func print(Bytes.Output, into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/body\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/body\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/body\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/body\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/body","title":"Body","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/cookies\/init(build:)","title":"init(build: () -> Parsers)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/cookies\/parse(_:)","title":"func parse(inout URLRequestData) throws -> Parsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/cookies\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/map(_:)-7nkpf","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/map(_:)-8f28m","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/map(_:)-8jkjs","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/cookies\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/cookies\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/print(_:into:)","title":"func print(Parsers.Output, into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/cookies\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/cookies\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/cookies","title":"Cookies","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/field\/init(_:_:default:)","title":"init<C>(String, C, default: Parsers.MapConversion<Parsers.ReplaceError<Rest<Substring>>, τ_1_0>.Output?)","type":"init"},{"path":"\/documentation\/urlrouting\/field\/init(_:default:)","title":"init(String, default: Parsers.MapConversion<Parsers.ReplaceError<Rest<Substring>>, Conversions.SubstringToString>.Output?)","type":"init"},{"path":"\/documentation\/urlrouting\/field\/init(_:default:_:)","title":"init(String, default: Value.Output?, () -> Value)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/field\/parse(_:)","title":"func parse(inout URLRequestData.Fields) throws -> Value.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/field\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/map(_:)-79q6d","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/map(_:)-84yas","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/map(_:)-8lpmi","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/pipe(_:)-6lagv","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/pipe(_:)-9ce7a","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/field\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/field\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/field\/print(_:into:)","title":"func print(Value.Output, into: inout URLRequestData.Fields) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/field\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/urlrouting\/field\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/field","title":"Field","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/formdata\/init(build:)","title":"init(build: () -> FieldParsers)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/formdata\/parse(_:)","title":"func parse(inout Data) rethrows -> FieldParsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/formdata\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/map(_:)-502z0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/map(_:)-5yg9t","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/map(_:)-7107w","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/pipe(_:)-35biv","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Parse<ParserBuilder.ZipOV<Downstream, Parsers.PipeEnd<Self.Input>>>>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/pipe(_:)-3eqb0","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/formdata\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/formdata\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/print(_:into:)","title":"func print(FieldParsers.Output, into: inout Data) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/formdata\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"}],"path":"\/documentation\/urlrouting\/formdata\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/formdata","title":"FormData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/headers\/init(build:)","title":"init(build: () -> FieldParsers)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/headers\/parse(_:)","title":"func parse(inout URLRequestData) rethrows -> FieldParsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/headers\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/map(_:)-24ks0","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/map(_:)-7othf","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/map(_:)-8vy0q","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/headers\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/headers\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/print(_:into:)","title":"func print(FieldParsers.Output, into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/headers\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/headers\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/headers","title":"Headers","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/method\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/method\/parse(_:)","title":"func parse(inout URLRequestData) throws","type":"method"},{"path":"\/documentation\/urlrouting\/method\/print(_:into:)","title":"func print((), into: inout URLRequestData)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/method\/delete","title":"static let delete: Method","type":"property"},{"path":"\/documentation\/urlrouting\/method\/get","title":"static let get: OneOf<OneOfBuilder.OneOf2<Method, Method>>","type":"property"},{"path":"\/documentation\/urlrouting\/method\/patch","title":"static let patch: Method","type":"property"},{"path":"\/documentation\/urlrouting\/method\/post","title":"static let post: Method","type":"property"},{"path":"\/documentation\/urlrouting\/method\/put","title":"static let put: Method","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/method\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/map(_:)-2r7o7","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/map(_:)-9ayhg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/map(_:)-9hzq3","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/method\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/method\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/method\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/method\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/method\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/method\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/method\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/method\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/method\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/method\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/method\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/method\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/method","title":"Method","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/path\/init(build:)","title":"init(build: () -> ComponentParsers)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/path\/parse(_:)","title":"func parse(inout URLRequestData) rethrows -> ComponentParsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/path\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/map(_:)-2jjd","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/map(_:)-4sha1","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/map(_:)-6vegr","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/path\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/path\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/path\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/path\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/path\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/path\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/path\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/path\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/path\/print(_:into:)","title":"func print(ComponentParsers.Output, into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/path\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/path\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/path\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/path\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/path","title":"Path","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathcomponent\/parse(_:)","title":"func parse(inout URLRequestData) throws -> ComponentParser.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathcomponent\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/map(_:)-312jc","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/map(_:)-3x8or","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/map(_:)-7f5w","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathcomponent\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathcomponent\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/print(_:into:)","title":"func print(ComponentParser.Output, into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathcomponent\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathcomponent\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathcomponent","title":"PathComponent","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathend\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathend\/parse(_:)","title":"func parse(inout URLRequestData) throws","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/print(_:into:)","title":"func print((), into: inout URLRequestData) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathend\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/map(_:)-7byrg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/map(_:)-8c2am","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/map(_:)-bskh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathend\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathend\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathend\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathend\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathend","title":"PathEnd","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoo\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoo\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/map(_:)-4k7rm","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/map(_:)-6ta4u","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/map(_:)-6ztti","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoo","title":"PathZipOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/map(_:)-1i4jc","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/map(_:)-340o0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/map(_:)-9tb7r","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooo","title":"PathZipOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/map(_:)-349h6","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/map(_:)-6mzk","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/map(_:)-oib2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoooo","title":"PathZipOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/map(_:)-2icbg","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/map(_:)-38gyr","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/map(_:)-41mnj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooooo","title":"PathZipOOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/map(_:)-1mnx6","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/map(_:)-56uza","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/map(_:)-59rl2","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoooooo","title":"PathZipOOOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/map(_:)-1mfyc","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/map(_:)-56s20","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/map(_:)-59z7c","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooooov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooooov","title":"PathZipOOOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/map(_:)-2i4ku","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/map(_:)-38e5f","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/map(_:)-41ujz","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoooov","title":"PathZipOOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/map(_:)-2uxev","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/map(_:)-4ikxj","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/map(_:)-9f3ze","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoooovo","title":"PathZipOOOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/map(_:)-2uplz","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/map(_:)-4idnb","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/map(_:)-9f1tk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoooovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoooovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoooovv","title":"PathZipOOOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/map(_:)-341r8","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/map(_:)-6jwe","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/map(_:)-opx4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooov","title":"PathZipOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/map(_:)-1lory","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/map(_:)-1u29p","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/map(_:)-44zoy","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooovo","title":"PathZipOOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/map(_:)-2dbn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/map(_:)-5kdwc","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/map(_:)-9llb9","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooovoo","title":"PathZipOOOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/map(_:)-2k97","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/map(_:)-5kgoy","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/map(_:)-9lj6h","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooovov","title":"PathZipOOOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/map(_:)-1lh0c","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/map(_:)-1tv3d","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/map(_:)-457hw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooovv","title":"PathZipOOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/map(_:)-2gdde","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/map(_:)-7sd65","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/map(_:)-bnuv","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooovvo","title":"PathZipOOOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/map(_:)-2gg9c","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/map(_:)-7sae1","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/map(_:)-bq13","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipooovvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipooovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipooovvv","title":"PathZipOOOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoov\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoov\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/map(_:)-1hwqy","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/map(_:)-347qa","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/map(_:)-9te2v","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoov","title":"PathZipOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/map(_:)-9hy9s","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/map(_:)-9rkvw","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/map(_:)-uwjv","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovo","title":"PathZipOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/map(_:)-447n","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/map(_:)-7670r","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/map(_:)-8ttl7","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovoo","title":"PathZipOOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/map(_:)-3amvs","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/map(_:)-3df51","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/map(_:)-6l8s6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovooo","title":"PathZipOOVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/map(_:)-3afsa","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/map(_:)-3dmtd","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/map(_:)-6lftg","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovoov","title":"PathZipOOVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/map(_:)-3x2r","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/map(_:)-76ewr","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/map(_:)-8u11f","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovov","title":"PathZipOOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/map(_:)-2jduc","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/map(_:)-3ywzd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/map(_:)-7fjuv","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovovo","title":"PathZipOOVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/map(_:)-2jg0q","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/map(_:)-3yu6t","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/map(_:)-7fcp3","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/print(_:into:)","title":"func print((P0.Output, P1.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovovv","title":"PathZipOOVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/map(_:)-9hqte","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/map(_:)-9ri5q","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/map(_:)-uue3","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovv","title":"PathZipOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/map(_:)-19ccr","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/map(_:)-69y9m","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/map(_:)-secy","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovvo","title":"PathZipOOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/map(_:)-4pk2k","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/map(_:)-7xozl","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/map(_:)-82tza","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovvoo","title":"PathZipOOVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/map(_:)-4pgy6","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/map(_:)-7xwn9","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/map(_:)-82mas","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/print(_:into:)","title":"func print((P0.Output, P1.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovvov","title":"PathZipOOVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/map(_:)-19f6j","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/map(_:)-6a0ec","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/map(_:)-sbjg","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovvv","title":"PathZipOOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/map(_:)-5jv0t","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/map(_:)-7ejvr","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/map(_:)-8m8ww","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/print(_:into:)","title":"func print((P0.Output, P1.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovvvo","title":"PathZipOOVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/map(_:)-5k2vt","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/map(_:)-7ectj","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/map(_:)-8m18m","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/print(_:into:)","title":"func print((P0.Output, P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipoovvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipoovvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipoovvvv","title":"PathZipOOVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipov\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipov\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/map(_:)-4k5lg","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/map(_:)-6th7g","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/map(_:)-6zmq8","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/print(_:into:)","title":"func print((P0.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipov","title":"PathZipOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/map(_:)-7d3nq","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/map(_:)-tue1","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/map(_:)-uxrl","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovo","title":"PathZipOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/map(_:)-4ldcr","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/map(_:)-6zs3g","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/map(_:)-8k3i4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovoo","title":"PathZipOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/map(_:)-3jlgc","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/map(_:)-7wgt0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/map(_:)-q4iy","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovooo","title":"PathZipOVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/map(_:)-55ovz","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/map(_:)-82yfn","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/map(_:)-afrm","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovoooo","title":"PathZipOVOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/map(_:)-55ha7","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/map(_:)-8363v","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/map(_:)-aim4","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovooov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovooov","title":"PathZipOVOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/map(_:)-3jt3e","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/map(_:)-7wjxu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/map(_:)-qbw8","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovoov","title":"PathZipOVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/map(_:)-2hb6r","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/map(_:)-2yjri","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/map(_:)-5p80i","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovoovo","title":"PathZipOVOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/map(_:)-2h88z","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/map(_:)-2yhlo","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/map(_:)-5p09c","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/print(_:into:)","title":"func print((P0.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovoovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovoovv","title":"PathZipOVOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/map(_:)-4lb6b","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/map(_:)-6zusi","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/map(_:)-8kane","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovov","title":"PathZipOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/map(_:)-1ljkr","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/map(_:)-2n2od","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/map(_:)-5igr9","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovovo","title":"PathZipOVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/map(_:)-1kcuf","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/map(_:)-2vk5i","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/map(_:)-3vrqy","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovovoo","title":"PathZipOVOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/map(_:)-1k56v","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/map(_:)-2vr94","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/map(_:)-3vun8","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/print(_:into:)","title":"func print((P0.Output, P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovovov","title":"PathZipOVOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/map(_:)-1lcgz","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/map(_:)-2mzy9","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/map(_:)-5iix5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovovv","title":"PathZipOVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/map(_:)-5ao07","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/map(_:)-62n63","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/map(_:)-9ct61","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/print(_:into:)","title":"func print((P0.Output, P2.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovovvo","title":"PathZipOVOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/map(_:)-5aqtj","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/map(_:)-62kaj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/map(_:)-9cr05","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/print(_:into:)","title":"func print((P0.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovovvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovovvv","title":"PathZipOVOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovv\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovv\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/map(_:)-7d5t0","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/map(_:)-tn9p","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/map(_:)-uvn9","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/print(_:into:)","title":"func print((P0.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovv","title":"PathZipOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/map(_:)-5b12y","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/map(_:)-6b0jx","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/map(_:)-98ux9","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/print(_:into:)","title":"func print((P0.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvo","title":"PathZipOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/map(_:)-1flcd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/map(_:)-4gjtm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/map(_:)-wggq","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/print(_:into:)","title":"func print((P0.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvoo","title":"PathZipOVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/map(_:)-71kea","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/map(_:)-97ncs","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/map(_:)-9nafz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/print(_:into:)","title":"func print((P0.Output, P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvooo","title":"PathZipOVVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/map(_:)-71rkw","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/map(_:)-97g0e","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/map(_:)-9n2of","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/print(_:into:)","title":"func print((P0.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvoov","title":"PathZipOVVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/map(_:)-1fsgp","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/map(_:)-4grl4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/map(_:)-w8ss","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/print(_:into:)","title":"func print((P0.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvov","title":"PathZipOVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/map(_:)-22j6n","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/map(_:)-7wzcj","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/map(_:)-9vxct","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/print(_:into:)","title":"func print((P0.Output, P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvovo","title":"PathZipOVVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/map(_:)-22qxr","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/map(_:)-7ws2j","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/map(_:)-9vui9","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/print(_:into:)","title":"func print((P0.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvovv","title":"PathZipOVVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/map(_:)-5b37s","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/map(_:)-6atdd","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/map(_:)-98s8p","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/print(_:into:)","title":"func print((P0.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvv","title":"PathZipOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/map(_:)-553wb","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/map(_:)-7wl7","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/map(_:)-963sv","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/print(_:into:)","title":"func print((P0.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvvo","title":"PathZipOVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/map(_:)-6e7vo","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/map(_:)-6we","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/map(_:)-se7n","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/print(_:into:)","title":"func print((P0.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvvoo","title":"PathZipOVVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/map(_:)-6e05i","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/map(_:)-9mk","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/map(_:)-slwz","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/print(_:into:)","title":"func print((P0.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvvov","title":"PathZipOVVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/map(_:)-54w2r","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/map(_:)-847f","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/map(_:)-95wmn","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/print(_:into:)","title":"func print((P0.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvvv","title":"PathZipOVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/map(_:)-1gy6q","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/map(_:)-5pxs5","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/map(_:)-939i0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/print(_:into:)","title":"func print((P0.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvvvo","title":"PathZipOVVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P0.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/map(_:)-1gqfo","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/map(_:)-5pqo1","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/map(_:)-936r2","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/print(_:into:)","title":"func print((P0.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipovvvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipovvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipovvvvv","title":"PathZipOVVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvo\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvo\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/map(_:)-6tapv","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/map(_:)-7o3vb","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/map(_:)-7oozj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/print(_:into:)","title":"func print((P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvo","title":"PathZipVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/map(_:)-6pisx","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/map(_:)-80ybu","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/map(_:)-8n26h","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoo","title":"PathZipVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/map(_:)-6d27","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/map(_:)-8csce","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/map(_:)-9mui7","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvooo","title":"PathZipVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/map(_:)-6nvtk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/map(_:)-7kxgf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/map(_:)-8dv7w","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoooo","title":"PathZipVOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/map(_:)-6hrcz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/map(_:)-8bwc0","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/map(_:)-8ewv3","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvooooo","title":"PathZipVOOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/map(_:)-6hu2r","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/map(_:)-8c4aa","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/map(_:)-8ez1r","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoooov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoooov","title":"PathZipVOOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/map(_:)-6o3je","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/map(_:)-7kpsv","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/map(_:)-8dy8u","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvooov","title":"PathZipVOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/map(_:)-41jlu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/map(_:)-7fnlt","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/map(_:)-7qcla","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvooovo","title":"PathZipVOOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/map(_:)-41qnw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/map(_:)-7fpsd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/map(_:)-7qaeo","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/print(_:into:)","title":"func print((P1.Output, P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvooovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvooovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvooovv","title":"PathZipVOOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/map(_:)-660f","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/map(_:)-8d00c","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/map(_:)-9mmsf","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoov","title":"PathZipVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/map(_:)-5bkq6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/map(_:)-5sqp5","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/map(_:)-5yr9p","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoovo","title":"PathZipVOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/map(_:)-20tf0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/map(_:)-2d1c4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/map(_:)-4e696","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoovoo","title":"PathZipVOOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/map(_:)-20vlq","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/map(_:)-2cucm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/map(_:)-4e3js","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/print(_:into:)","title":"func print((P1.Output, P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoovov","title":"PathZipVOOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/map(_:)-5bikc","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/map(_:)-5ssvp","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/map(_:)-5yyip","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoovv","title":"PathZipVOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/map(_:)-4h0z1","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/map(_:)-4jwvp","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/map(_:)-5ap2z","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/print(_:into:)","title":"func print((P1.Output, P2.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoovvo","title":"PathZipVOOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/map(_:)-4h3rt","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/map(_:)-4k3yp","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/map(_:)-5awv7","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/print(_:into:)","title":"func print((P1.Output, P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvoovvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvoovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvoovvv","title":"PathZipVOOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvov\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvov\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/map(_:)-6pbml","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/map(_:)-80ql8","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/map(_:)-8n00l","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/print(_:into:)","title":"func print((P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvov","title":"PathZipVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/map(_:)-7ir0v","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/map(_:)-8ykem","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/map(_:)-unb2","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/print(_:into:)","title":"func print((P1.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovo","title":"PathZipVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/map(_:)-1k248","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/map(_:)-68snu","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/map(_:)-c6lv","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/print(_:into:)","title":"func print((P1.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovoo","title":"PathZipVOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/map(_:)-1xunq","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/map(_:)-3jdu","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/map(_:)-43ocz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/print(_:into:)","title":"func print((P1.Output, P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovooo","title":"PathZipVOVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/map(_:)-1xnh4","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/map(_:)-3gl8","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/map(_:)-43qjf","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/print(_:into:)","title":"func print((P1.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovoov","title":"PathZipVOVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/map(_:)-1k4a2","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/map(_:)-68vgk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/map(_:)-c3tf","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/print(_:into:)","title":"func print((P1.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovov","title":"PathZipVOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/map(_:)-12flz","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/map(_:)-4yteq","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/map(_:)-9euo2","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/print(_:into:)","title":"func print((P1.Output, P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovovo","title":"PathZipVOVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/map(_:)-12mw7","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/map(_:)-4z1c0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/map(_:)-9eni8","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/print(_:into:)","title":"func print((P1.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovovv","title":"PathZipVOVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/map(_:)-7it73","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/map(_:)-8ydaw","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/map(_:)-ukcw","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/print(_:into:)","title":"func print((P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovv","title":"PathZipVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/map(_:)-18peq","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/map(_:)-3z62h","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/map(_:)-8grqj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/print(_:into:)","title":"func print((P1.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovvo","title":"PathZipVOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/map(_:)-1mgna","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/map(_:)-4f2l5","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/map(_:)-9cfdn","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/print(_:into:)","title":"func print((P1.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovvoo","title":"PathZipVOVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/map(_:)-1mitk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/map(_:)-4evfp","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/map(_:)-9cd77","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/print(_:into:)","title":"func print((P1.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovvov","title":"PathZipVOVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/map(_:)-18x50","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/map(_:)-3z8st","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/map(_:)-8goyj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/print(_:into:)","title":"func print((P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovvv","title":"PathZipVOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/map(_:)-2ipkn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/map(_:)-3krag","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/map(_:)-a7x","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/print(_:into:)","title":"func print((P1.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovvvo","title":"PathZipVOVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P1.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/map(_:)-2ix4n","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/map(_:)-3kyka","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/map(_:)-ccp","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/print(_:into:)","title":"func print((P1.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvovvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvovvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvovvvv","title":"PathZipVOVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvv\/init(_:_:)","title":"init(P0, P1)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvv\/p1","title":"let p1: P1","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvv\/parse(_:)","title":"func parse(inout URLRequestData) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/map(_:)-6thvn","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/map(_:)-7nw7r","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/map(_:)-7ohsv","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/print(_:into:)","title":"func print((), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvv","title":"PathZipVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/map(_:)-7cecr","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/map(_:)-7dsuo","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/map(_:)-ulwn","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/print(_:into:)","title":"func print((P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvo","title":"PathZipVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/map(_:)-2kl54","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/map(_:)-78mbk","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/map(_:)-9oxbf","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/print(_:into:)","title":"func print((P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvoo","title":"PathZipVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/map(_:)-61518","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/map(_:)-7105f","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/map(_:)-8ev4d","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/print(_:into:)","title":"func print((P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvooo","title":"PathZipVVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/map(_:)-4qi9r","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/map(_:)-6ooeb","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/map(_:)-7u13s","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/print(_:into:)","title":"func print((P2.Output, P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvoooo","title":"PathZipVVOOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/map(_:)-4qq1b","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/map(_:)-6ogf7","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/map(_:)-7tya2","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvooov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/print(_:into:)","title":"func print((P2.Output, P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvooov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvooov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvooov","title":"PathZipVVOOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/map(_:)-612aa","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/map(_:)-70t6r","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/map(_:)-8exap","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/print(_:into:)","title":"func print((P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvoov","title":"PathZipVVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/map(_:)-5f2am","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/map(_:)-60e3m","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/map(_:)-8qjux","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/print(_:into:)","title":"func print((P2.Output, P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvoovo","title":"PathZipVVOOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/map(_:)-5eufc","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/map(_:)-606xw","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/map(_:)-8qrml","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/print(_:into:)","title":"func print((P2.Output, P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvoovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvoovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvoovv","title":"PathZipVVOOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/map(_:)-2kdiy","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/map(_:)-78f9e","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/map(_:)-9oubf","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/print(_:into:)","title":"func print((P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvov","title":"PathZipVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/map(_:)-5cuzh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/map(_:)-7pa8y","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/map(_:)-98wjg","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/print(_:into:)","title":"func print((P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvovo","title":"PathZipVVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/map(_:)-1whav","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/map(_:)-464ww","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/map(_:)-8lpan","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/print(_:into:)","title":"func print((P2.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvovoo","title":"PathZipVVOVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/map(_:)-1w9x3","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/map(_:)-46cjm","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/map(_:)-8lwdb","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/print(_:into:)","title":"func print((P2.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvovov","title":"PathZipVVOVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/map(_:)-5cnqh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/map(_:)-7p7ng","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/map(_:)-9943y","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/print(_:into:)","title":"func print((P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvovv","title":"PathZipVVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/map(_:)-2kree","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/map(_:)-3azyp","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/map(_:)-9i83i","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/print(_:into:)","title":"func print((P2.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvovvo","title":"PathZipVVOVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P2.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/map(_:)-2kodk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/map(_:)-3b259","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/map(_:)-9i0xs","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/print(_:into:)","title":"func print((P2.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvovvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvovvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvovvv","title":"PathZipVVOVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/init(_:_:_:)","title":"init(P0, P1, P2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/p2","title":"let p2: P2","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/map(_:)-7clyz","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/map(_:)-7dq1a","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/map(_:)-ue7b","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/print(_:into:)","title":"func print((), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvv","title":"PathZipVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/map(_:)-1wb3d","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/map(_:)-7wwkh","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/map(_:)-jmuz","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/print(_:into:)","title":"func print((P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvo","title":"PathZipVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/map(_:)-1tlwu","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/map(_:)-3yb71","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/map(_:)-59bya","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/print(_:into:)","title":"func print((P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvoo","title":"PathZipVVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P3.Output, P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/map(_:)-5byj4","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/map(_:)-9jdzu","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/map(_:)-pi86","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvooo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/print(_:into:)","title":"func print((P3.Output, P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvooo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvooo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvooo","title":"PathZipVVVOOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P3.Output, P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/map(_:)-5c6ae","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/map(_:)-9jgrw","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/map(_:)-pf5s","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvoov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/print(_:into:)","title":"func print((P3.Output, P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvoov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvoov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvoov","title":"PathZipVVVOOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/map(_:)-1tecc","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/map(_:)-3y47l","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/map(_:)-599rw","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/print(_:into:)","title":"func print((P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvov","title":"PathZipVVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P3.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/map(_:)-1m12v","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/map(_:)-4ffnl","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/map(_:)-74a1n","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvovo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/print(_:into:)","title":"func print((P3.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvovo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvovo","title":"PathZipVVVOVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P3.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/map(_:)-1m3tj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/map(_:)-4fcxx","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/map(_:)-74c7f","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvovv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/print(_:into:)","title":"func print((P3.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvovv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvovv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvovv","title":"PathZipVVVOVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/init(_:_:_:_:)","title":"init(P0, P1, P2, P3)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/p3","title":"let p3: P3","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/map(_:)-1w41p","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/map(_:)-7wtod","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/map(_:)-juub","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/print(_:into:)","title":"func print((), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvv","title":"PathZipVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/map(_:)-15byn","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/map(_:)-32wgs","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/map(_:)-5xw0z","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/print(_:into:)","title":"func print((P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvvo","title":"PathZipVVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P4.Output, P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/map(_:)-2i9yc","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/map(_:)-36ufd","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/map(_:)-6twfr","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/print(_:into:)","title":"func print((P4.Output, P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvoo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvvoo","title":"PathZipVVVVOO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P4.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/map(_:)-2i1vm","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/map(_:)-371nh","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/map(_:)-6tu47","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvov\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/print(_:into:)","title":"func print((P4.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvov\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvov\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvvov","title":"PathZipVVVVOV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/init(_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/p4","title":"let p4: P4","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/map(_:)-154v3","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/map(_:)-333ji","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/map(_:)-5xy77","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/print(_:into:)","title":"func print((), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvvv","title":"PathZipVVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/parse(_:)","title":"func parse(inout URLRequestData) throws -> (P5.Output)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/map(_:)-1tpqd","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/map(_:)-92zc6","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/map(_:)-zz5k","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/print(_:into:)","title":"func print((P5.Output), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvvo\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvvvo","title":"PathZipVVVVVO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/init(_:_:_:_:_:_:)","title":"init(P0, P1, P2, P3, P4, P5)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/p0","title":"let p0: P0","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/p1","title":"let p1: P1","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/p2","title":"let p2: P2","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/p3","title":"let p3: P3","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/p4","title":"let p4: P4","type":"property"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/p5","title":"let p5: P5","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/parse(_:)","title":"func parse(inout URLRequestData) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/map(_:)-1txop","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/map(_:)-936ec","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/map(_:)-zrze","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/print(_:into:)","title":"func print((), into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/pathzipvvvvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/pathzipvvvvvv","title":"PathZipVVVVVV","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/query\/init(build:)","title":"init(build: () -> FieldParsers)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/query\/parse(_:)","title":"func parse(inout URLRequestData) rethrows -> FieldParsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/query\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/map(_:)-66a2n","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/map(_:)-66yuv","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/map(_:)-9io1m","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/query\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/query\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/query\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/query\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/query\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/query\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/query\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/query\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/query\/print(_:into:)","title":"func print(FieldParsers.Output, into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/query\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/query\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/query\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/query\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/query","title":"Query","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/route\/init(_:)-6z5cv","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/urlrouting\/route\/init(_:)-7q3hh","title":"init<NewOutput>(NewOutput)","type":"init"},{"path":"\/documentation\/urlrouting\/route\/init(_:with:)-2x8d3","title":"init<C, P>(C, with: () -> P)","type":"init"},{"path":"\/documentation\/urlrouting\/route\/init(_:with:)-6x6x2","title":"init<Upstream, NewOutput>((Upstream.Output) -> NewOutput, with: () -> Upstream)","type":"init"},{"path":"\/documentation\/urlrouting\/route\/init(_:with:)-y895","title":"init<Upstream, NewOutput>(NewOutput, with: () -> Upstream)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/route\/parse(_:)","title":"func parse(inout URLRequestData) throws -> Parsers.Output","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/route\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/map(_:)-21dpm","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/map(_:)-3wqgk","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/map(_:)-4dht0","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/match(path:)","title":"func match(path: String) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/route\/match(request:)","title":"func match(request: URLRequest) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/route\/match(url:)","title":"func match(url: URL) throws -> Self.Output","type":"method"},{"path":"\/documentation\/urlrouting\/route\/pipe(_:)","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/urlrouting\/route\/parser-implementations","title":"Parser Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/route\/baserequestdata(_:)","title":"func baseRequestData(URLRequestData) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/baseurl(_:)","title":"func baseURL(String) -> BaseURLPrinter<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/erasetoanyparserprinter()","title":"func eraseToAnyParserPrinter() -> AnyParserPrinter<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/urlrouting\/route\/path(for:)","title":"func path(for: Self.Output) -> String","type":"method"},{"path":"\/documentation\/urlrouting\/route\/print()","title":"func print() rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/route\/print(_:)","title":"func print(Self.Output) rethrows -> Self.Input","type":"method"},{"path":"\/documentation\/urlrouting\/route\/print(_:into:)","title":"func print(Parsers.Output, into: inout URLRequestData) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/route\/print(into:)","title":"func print(into: inout Self.Input) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/route\/request(for:)","title":"func request(for: Self.Output) throws -> URLRequest","type":"method"},{"path":"\/documentation\/urlrouting\/route\/url(for:)","title":"func url(for: Self.Output) -> URL","type":"method"}],"path":"\/documentation\/urlrouting\/route\/parserprinter-implementations","title":"ParserPrinter Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/route","title":"Route","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/init(_:isnamecasesensitive:)","title":"init([String : ArraySlice<Substring?>], isNameCaseSensitive: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/fields","title":"var fields: [String : ArraySlice<Substring?>]","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/subscript(_:)-625im","title":"subscript(String) -> ArraySlice<Substring?>?","type":"subscript"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/subscript(_:default:)","title":"subscript(String, default _: () -> ArraySlice<Substring?>) -> ArraySlice<Substring?>","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/endindex","title":"var endIndex: URLRequestData.Fields.Index","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/startindex","title":"var startIndex: URLRequestData.Fields.Index","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/underestimatedcount-54gzk","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/index(after:)","title":"func index(after: URLRequestData.Fields.Index) -> URLRequestData.Fields.Index","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/map(_:)-6oly1","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/subscript(_:)-2g7cm","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/subscript(_:)-43bei","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/subscript(_:)-6quwd","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/subscript(_:)-6xhef","title":"subscript(URLRequestData.Fields.Index) -> URLRequestData.Fields.Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/index","title":"URLRequestData.Fields.Index","type":"typealias"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/==(_:_:)","title":"static func == (URLRequestData.Fields, URLRequestData.Fields) -> Bool","type":"op"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, ArraySlice<Substring?>)...)","type":"init"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/underestimatedcount-6sx7k","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/flatmap(_:)-4enpc","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/flatmap(_:)-jkxa","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/map(_:)-23a8a","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/element","title":"URLRequestData.Fields.Element","type":"typealias"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/fields\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/fields","title":"URLRequestData.Fields","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/init()","title":"init()","type":"init"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/init(method:scheme:user:password:host:port:path:query:headers:body:)","title":"init(method: String?, scheme: String?, user: String?, password: String?, host: String?, port: Int?, path: String, query: [String : [String?]], headers: [String : [String?]], body: Data?)","type":"init"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/init(request:)-26kyr","title":"init?(request: URLRequest)","type":"init"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/init(request:)-5qj1","title":"init?(request: Request)","type":"init"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/init(string:)","title":"init?(string: String)","type":"init"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/init(url:)","title":"init?(url: URL)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/body","title":"var body: Data?","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/headers","title":"var headers: URLRequestData.Fields","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/host","title":"var host: String?","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/method","title":"var method: String?","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/password","title":"var password: String?","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/path","title":"var path: ArraySlice<Substring>","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/port","title":"var port: Int?","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/query","title":"var query: URLRequestData.Fields","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/scheme","title":"var scheme: String?","type":"property"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/user","title":"var user: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlrequestdata\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/urlrouting\/urlrequestdata\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/urlrequestdata","title":"URLRequestData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlroutingclient\/init(request:)","title":"init(request: (Route) async throws -> (Data, URLResponse))","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlroutingclient\/override(_:with:)-1wjyg","title":"func override(Route, with: () throws -> Result<(data: Data, response: URLResponse), URLError>) -> URLRoutingClient<Route>","type":"method"},{"path":"\/documentation\/urlrouting\/urlroutingclient\/override(_:with:)-2wagy","title":"func override<Value>((Route) -> Value?, with: (Value) throws -> Result<(data: Data, response: URLResponse), URLError>) -> URLRoutingClient<Route>","type":"method"},{"path":"\/documentation\/urlrouting\/urlroutingclient\/override(_:with:)-5ll8s","title":"func override((Route) -> Bool, with: () throws -> Result<(data: Data, response: URLResponse), URLError>) -> URLRoutingClient<Route>","type":"method"},{"path":"\/documentation\/urlrouting\/urlroutingclient\/request(_:as:decoder:)","title":"func request<Value>(Route, as: Value.Type, decoder: JSONDecoder) async throws -> (value: Value, response: URLResponse)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlroutingclient\/failing","title":"static var failing: URLRoutingClient<Route>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlroutingclient\/live(router:session:)","title":"static func live<R>(router: R, session: URLSession) -> URLRoutingClient<Route>","type":"method"}],"path":"\/documentation\/urlrouting\/urlroutingclient","title":"URLRoutingClient","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlroutingdecodingerror\/bytes","title":"let bytes: Data","type":"property"},{"path":"\/documentation\/urlrouting\/urlroutingdecodingerror\/response","title":"let response: URLResponse","type":"property"},{"path":"\/documentation\/urlrouting\/urlroutingdecodingerror\/underlyingerror","title":"let underlyingError: Error","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/urlroutingdecodingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/urlrouting\/urlroutingdecodingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/urlrouting\/urlroutingdecodingerror","title":"URLRoutingDecodingError","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:)","title":"static func buildBlock<P>(P) -> PathComponent<P>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:)-5g7h8","title":"static func buildBlock<P0, P1>(P0, P1) -> PathZipOO<P0, P1>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:)-8th7a","title":"static func buildBlock<P0, P1>(P0, P1) -> PathZipOV<P0, P1>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:)-9tjx7","title":"static func buildBlock<P0, P1>(P0, P1) -> PathZipVO<P0, P1>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:)-yfc5","title":"static func buildBlock<P0, P1>(P0, P1) -> PathZipVV<P0, P1>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-1d4ro","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipVVV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-2e104","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipVVO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-3r9sx","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipOOO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-3ym0y","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipOOV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-6j4ad","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipOVV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-7cu09","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipOVO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-804n1","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipVOV<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:)-9ynsr","title":"static func buildBlock<P0, P1, P2>(P0, P1, P2) -> PathZipVOO<P0, P1, P2>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-1fgpe","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOOOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-2p4aa","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOVVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-350uf","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVVOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-3opkv","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOVVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-5rzvf","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVOOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-6bfyz","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVOOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-6nwjf","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOOVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-6v6k5","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVVVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-6vllf","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVVOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-719lw","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVOVV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-76lx","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVOVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-7c8rj","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOVOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-7pe72","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOVOO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-8s7t1","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOOOV<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-9qprt","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipOOVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:)-9racu","title":"static func buildBlock<P0, P1, P2, P3>(P0, P1, P2, P3) -> PathZipVVVO<P0, P1, P2, P3>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-20uzk","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-25cgj","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-2b1ip","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-2d11t","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-2diei","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-2zxmf","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-3ctyd","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-4cxdn","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-4lrr7","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-4w1l3","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-5t8oe","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-5wqfn","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-6ceiy","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-6i0nw","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-6ihun","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-6rfyl","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-6yf7s","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-7fl72","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-7hrco","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOVVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-7rl5o","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-83ta0","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOOVOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-8c3h","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-8mgyg","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVOVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-92ohb","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-9ny53","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVVOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-9q2kb","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-epm0","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOOOV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-f0go","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVOOVO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-llew","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-qnao","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-rrx0","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipOVVVV<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:)-t31e","title":"static func buildBlock<P0, P1, P2, P3, P4>(P0, P1, P2, P3, P4) -> PathZipVVOOO<P0, P1, P2, P3, P4>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-11ijy","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-12vs3","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-1aurv","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-1bchw","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-1hgye","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-1ll1y","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-1qh10","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-22ugi","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-22yul","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-24pwq","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-28fdj","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-2catk","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-2efgy","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-2egra","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-2l2c8","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-2ns43","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-39g1m","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-3hhwn","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-3qsab","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-3y5pi","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-402h8","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-414sp","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-4nywu","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-4pvx8","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-4y2j2","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-52vyi","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-5adyc","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-5bo3c","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-5liaf","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-5m99x","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-5p24v","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-5vfqt","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-5xmde","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-62qvr","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-65ufb","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-6731y","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-67txf","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-6bnw9","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-6dqql","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-6hvp8","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-6i9y2","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-6k4hj","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7ac28","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7atzq","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7lkjj","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7lw5z","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVVVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7ts2j","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7twqd","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7vwiz","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVOVO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-7xsox","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-8j1yn","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-8ka0l","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-8lfme","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-8mezz","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOOOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-8pmw9","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-93vvo","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-9690l","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVVOVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-991x","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOOOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-9n7un","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVVOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-euam","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVVVV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-fy9x","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOVOVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-is3s","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipOOVOOO<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-vulc","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVVVVOV<P0, P1, P2, P3, P4, P5>","type":"method"},{"path":"\/documentation\/urlrouting\/pathbuilder\/buildblock(_:_:_:_:_:_:)-zhk2","title":"static func buildBlock<P0, P1, P2, P3, P4, P5>(P0, P1, P2, P3, P4, P5) -> PathZipVOOVOV<P0, P1, P2, P3, P4, P5>","type":"method"}],"path":"\/documentation\/urlrouting\/pathbuilder","title":"PathBuilder","type":"enum"}],"path":"\/documentation\/urlrouting","title":"URLRouting","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/locks-swift.class\/main","title":"let main: Lock","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/locks-swift.class\/lock(for:)","title":"func lock<Key>(for: Key.Type) -> Lock","type":"method"}],"path":"\/documentation\/vapor\/application\/locks-swift.class","title":"Application.Locks","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/caches-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/caches-swift.struct\/provider\/memory","title":"static var memory: Application.Caches.Provider","type":"property"}],"path":"\/documentation\/vapor\/application\/caches-swift.struct\/provider","title":"Application.Caches.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/caches-swift.struct\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/vapor\/application\/caches-swift.struct\/memory","title":"var memory: Cache","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/caches-swift.struct\/use(_:)-6wkpp","title":"func use(Application.Caches.Provider)","type":"method"},{"path":"\/documentation\/vapor\/application\/caches-swift.struct\/use(_:)-8hhlw","title":"func use((Application) -> (Cache))","type":"method"}],"path":"\/documentation\/vapor\/application\/caches-swift.struct","title":"Application.Caches","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/clients-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/clients-swift.struct\/provider\/http","title":"static var http: Application.Clients.Provider","type":"property"}],"path":"\/documentation\/vapor\/application\/clients-swift.struct\/provider","title":"Application.Clients.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/clients-swift.struct\/application","title":"let application: Application","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/clients-swift.struct\/use(_:)-1v01b","title":"func use((Application) -> (Client))","type":"method"},{"path":"\/documentation\/vapor\/application\/clients-swift.struct\/use(_:)-6efb6","title":"func use(Application.Clients.Provider)","type":"method"}],"path":"\/documentation\/vapor\/application\/clients-swift.struct","title":"Application.Clients","type":"struct"},{"path":"\/documentation\/vapor\/application\/core","title":"Application.Core","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/http-swift.struct\/client-swift.struct\/configuration","title":"var configuration: HTTPClient.Configuration","type":"property"},{"path":"\/documentation\/vapor\/application\/http-swift.struct\/client-swift.struct\/shared","title":"var shared: HTTPClient","type":"property"}],"path":"\/documentation\/vapor\/application\/http-swift.struct\/client-swift.struct","title":"Application.HTTP.Client","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/http-swift.struct\/server-swift.struct\/configuration","title":"var configuration: HTTPServer.Configuration","type":"property"},{"path":"\/documentation\/vapor\/application\/http-swift.struct\/server-swift.struct\/shared","title":"var shared: HTTPServer","type":"property"}],"path":"\/documentation\/vapor\/application\/http-swift.struct\/server-swift.struct","title":"Application.HTTP.Server","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/http-swift.struct\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/vapor\/application\/http-swift.struct\/client-swift.property","title":"var client: Application.HTTP.Client","type":"property"},{"path":"\/documentation\/vapor\/application\/http-swift.struct\/server-swift.property","title":"var server: Application.HTTP.Server","type":"property"}],"path":"\/documentation\/vapor\/application\/http-swift.struct","title":"Application.HTTP","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/lifecycle-swift.struct\/use(_:)","title":"func use(LifecycleHandler)","type":"method"}],"path":"\/documentation\/vapor\/application\/lifecycle-swift.struct","title":"Application.Lifecycle","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/password-swift.struct\/async","title":"var async: AsyncPasswordHasher","type":"property"},{"path":"\/documentation\/vapor\/application\/password-swift.struct\/sync","title":"var sync: PasswordHasher","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/password-swift.struct\/hash(_:)-69xra","title":"func hash<Password>(Password) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/vapor\/application\/password-swift.struct\/verify(_:created:)-8510b","title":"func verify<Password, Digest>(Password, created: Digest) throws -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/password-swift.struct\/async(on:hopto:)","title":"func async(on: NIOThreadPool, hopTo: EventLoop) -> AsyncPasswordHasher","type":"method"},{"path":"\/documentation\/vapor\/application\/password-swift.struct\/hash(_:)-4qc4e","title":"func hash(String) throws -> String","type":"method"},{"path":"\/documentation\/vapor\/application\/password-swift.struct\/verify(_:created:)-2lvpn","title":"func verify(String, created: String) throws -> Bool","type":"method"}],"path":"\/documentation\/vapor\/application\/password-swift.struct\/passwordhasher-implementations","title":"PasswordHasher Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/application\/password-swift.struct","title":"Application.Password","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/passwords-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/passwords-swift.struct\/provider\/bcrypt","title":"static var bcrypt: Application.Passwords.Provider","type":"property"},{"path":"\/documentation\/vapor\/application\/passwords-swift.struct\/provider\/plaintext","title":"static var plaintext: Application.Passwords.Provider","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/passwords-swift.struct\/provider\/bcrypt(cost:)","title":"static func bcrypt(cost: Int) -> Application.Passwords.Provider","type":"method"}],"path":"\/documentation\/vapor\/application\/passwords-swift.struct\/provider","title":"Application.Passwords.Provider","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/passwords-swift.struct\/use(_:)-41s0t","title":"func use((Application) -> (PasswordHasher))","type":"method"},{"path":"\/documentation\/vapor\/application\/passwords-swift.struct\/use(_:)-f94y","title":"func use(Application.Passwords.Provider)","type":"method"}],"path":"\/documentation\/vapor\/application\/passwords-swift.struct","title":"Application.Passwords","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/provider\/default","title":"static var `default`: Application.Responder.Provider","type":"property"}],"path":"\/documentation\/vapor\/application\/responder-swift.struct\/provider","title":"Application.Responder.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/current","title":"var current: Responder","type":"property"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/default","title":"var `default`: Responder","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/use(_:)-1ubuf","title":"func use((Application) -> (Responder))","type":"method"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/use(_:)-38wem","title":"func use(Application.Responder.Provider)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/responder-swift.struct\/respond(to:)","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/application\/responder-swift.struct\/responder-implementations","title":"Responder Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/application\/responder-swift.struct","title":"Application.Responder","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/running-swift.struct\/onstop","title":"var onStop: EventLoopFuture<Void>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/running-swift.struct\/stop()","title":"func stop()","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/running-swift.struct\/start(using:)","title":"static func start(using: EventLoopPromise<Void>) -> Application.Running","type":"method"}],"path":"\/documentation\/vapor\/application\/running-swift.struct","title":"Application.Running","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/servers-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/servers-swift.struct\/provider\/http","title":"static var http: Application.Servers.Provider","type":"property"}],"path":"\/documentation\/vapor\/application\/servers-swift.struct\/provider","title":"Application.Servers.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/servers-swift.struct\/command","title":"var command: ServeCommand","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/servers-swift.struct\/use(_:)-37uq","title":"func use(Application.Servers.Provider)","type":"method"},{"path":"\/documentation\/vapor\/application\/servers-swift.struct\/use(_:)-67bcc","title":"func use((Application) -> (Server))","type":"method"}],"path":"\/documentation\/vapor\/application\/servers-swift.struct","title":"Application.Servers","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/provider\/memory","title":"static var memory: Application.Sessions.Provider","type":"property"}],"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/provider","title":"Application.Sessions.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/configuration","title":"var configuration: SessionsConfiguration","type":"property"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/driver","title":"var driver: SessionDriver","type":"property"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/memory","title":"var memory: MemorySessions","type":"property"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/middleware","title":"var middleware: SessionsMiddleware","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/use(_:)-5zgha","title":"func use((Application) -> (SessionDriver))","type":"method"},{"path":"\/documentation\/vapor\/application\/sessions-swift.struct\/use(_:)-8bhi","title":"func use(Application.Sessions.Provider)","type":"method"}],"path":"\/documentation\/vapor\/application\/sessions-swift.struct","title":"Application.Sessions","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/views-swift.struct\/provider\/init(_:)","title":"init((Application) -> ())","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/views-swift.struct\/provider\/plaintext","title":"static var plaintext: Application.Views.Provider","type":"property"}],"path":"\/documentation\/vapor\/application\/views-swift.struct\/provider","title":"Application.Views.Provider","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/views-swift.struct\/plaintext","title":"var plaintext: PlaintextRenderer","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/views-swift.struct\/use(_:)-5ob1b","title":"func use((Application) -> (ViewRenderer))","type":"method"},{"path":"\/documentation\/vapor\/application\/views-swift.struct\/use(_:)-83aby","title":"func use(Application.Views.Provider)","type":"method"}],"path":"\/documentation\/vapor\/application\/views-swift.struct","title":"Application.Views","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/init(_:_:)","title":"init(Environment, Application.EventLoopGroupProvider)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/allocator","title":"var allocator: ByteBufferAllocator","type":"property"},{"path":"\/documentation\/vapor\/application\/cache","title":"var cache: Cache","type":"property"},{"path":"\/documentation\/vapor\/application\/caches-swift.property","title":"var caches: Application.Caches","type":"property"},{"path":"\/documentation\/vapor\/application\/client","title":"var client: Client","type":"property"},{"path":"\/documentation\/vapor\/application\/clients-swift.property","title":"var clients: Application.Clients","type":"property"},{"path":"\/documentation\/vapor\/application\/commands","title":"var commands: Commands","type":"property"},{"path":"\/documentation\/vapor\/application\/console","title":"var console: Console","type":"property"},{"path":"\/documentation\/vapor\/application\/didshutdown","title":"var didShutdown: Bool","type":"property"},{"path":"\/documentation\/vapor\/application\/directory","title":"var directory: DirectoryConfiguration","type":"property"},{"path":"\/documentation\/vapor\/application\/environment","title":"var environment: Environment","type":"property"},{"path":"\/documentation\/vapor\/application\/eventloopgroup","title":"let eventLoopGroup: EventLoopGroup","type":"property"},{"path":"\/documentation\/vapor\/application\/eventloopgroupprovider-swift.property","title":"let eventLoopGroupProvider: Application.EventLoopGroupProvider","type":"property"},{"path":"\/documentation\/vapor\/application\/fileio","title":"var fileio: NonBlockingFileIO","type":"property"},{"path":"\/documentation\/vapor\/application\/http-swift.property","title":"var http: Application.HTTP","type":"property"},{"path":"\/documentation\/vapor\/application\/lifecycle-swift.property","title":"var lifecycle: Application.Lifecycle","type":"property"},{"path":"\/documentation\/vapor\/application\/locks-swift.property","title":"var locks: Application.Locks","type":"property"},{"path":"\/documentation\/vapor\/application\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/vapor\/application\/middleware","title":"var middleware: Middlewares","type":"property"},{"path":"\/documentation\/vapor\/application\/password-swift.property","title":"var password: Application.Password","type":"property"},{"path":"\/documentation\/vapor\/application\/passwords-swift.property","title":"var passwords: Application.Passwords","type":"property"},{"path":"\/documentation\/vapor\/application\/responder-swift.property","title":"var responder: Application.Responder","type":"property"},{"path":"\/documentation\/vapor\/application\/routes","title":"var routes: Routes","type":"property"},{"path":"\/documentation\/vapor\/application\/running-swift.property","title":"var running: Application.Running?","type":"property"},{"path":"\/documentation\/vapor\/application\/server","title":"var server: Server","type":"property"},{"path":"\/documentation\/vapor\/application\/servers-swift.property","title":"var servers: Application.Servers","type":"property"},{"path":"\/documentation\/vapor\/application\/sessions-swift.property","title":"var sessions: Application.Sessions","type":"property"},{"path":"\/documentation\/vapor\/application\/storage","title":"var storage: Storage","type":"property"},{"path":"\/documentation\/vapor\/application\/sync","title":"var sync: Lock","type":"property"},{"path":"\/documentation\/vapor\/application\/threadpool","title":"var threadPool: NIOThreadPool","type":"property"},{"path":"\/documentation\/vapor\/application\/view","title":"var view: ViewRenderer","type":"property"},{"path":"\/documentation\/vapor\/application\/views-swift.property","title":"var views: Application.Views","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/boot()","title":"func boot() throws","type":"method"},{"path":"\/documentation\/vapor\/application\/mount(_:use:)","title":"func mount<R>(R, use: (Request, R.Output) async throws -> AsyncResponseEncodable)","type":"method"},{"path":"\/documentation\/vapor\/application\/run()","title":"func run() throws","type":"method"},{"path":"\/documentation\/vapor\/application\/shutdown()","title":"func shutdown()","type":"method"},{"path":"\/documentation\/vapor\/application\/start()","title":"func start() throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/eventloopgroupprovider-swift.enum\/createnew","title":"case createNew","type":"case"},{"path":"\/documentation\/vapor\/application\/eventloopgroupprovider-swift.enum\/shared(_:)","title":"case shared(EventLoopGroup)","type":"case"}],"path":"\/documentation\/vapor\/application\/eventloopgroupprovider-swift.enum","title":"Application.EventLoopGroupProvider","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/application\/add(_:)","title":"func add(Route)","type":"method"},{"path":"\/documentation\/vapor\/application\/delete(_:use:)-2nqii","title":"func delete<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/delete(_:use:)-3wew0","title":"func delete<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/delete(_:use:)-804x0","title":"func delete<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/delete(_:use:)-9ax43","title":"func delete<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/get(_:use:)-3kvhd","title":"func get<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/get(_:use:)-5wni0","title":"func get<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/get(_:use:)-6y4oo","title":"func get<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/get(_:use:)-8qdtg","title":"func get<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/group(_:configure:)-1cucf","title":"func group(Middleware..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/application\/group(_:configure:)-4ksqn","title":"func group([Middleware], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/application\/group(_:configure:)-4qtxd","title":"func group([PathComponent], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/application\/group(_:configure:)-865xu","title":"func group(PathComponent..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/application\/grouped(_:)-2d4v3","title":"func grouped(Middleware...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/application\/grouped(_:)-3viua","title":"func grouped(PathComponent...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/application\/grouped(_:)-48i6h","title":"func grouped([Middleware]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/application\/grouped(_:)-4t3k3","title":"func grouped([PathComponent]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/application\/on(_:_:body:use:)-2k8bb","title":"func on<Response>(HTTPMethod, PathComponent..., body: HTTPBodyStreamStrategy, use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/on(_:_:body:use:)-6nvn2","title":"func on<Response>(HTTPMethod, PathComponent..., body: HTTPBodyStreamStrategy, use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/on(_:_:body:use:)-753ex","title":"func on<Response>(HTTPMethod, [PathComponent], body: HTTPBodyStreamStrategy, use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/on(_:_:body:use:)-7i4r6","title":"func on<Response>(HTTPMethod, [PathComponent], body: HTTPBodyStreamStrategy, use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/patch(_:use:)-5fft3","title":"func patch<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/patch(_:use:)-5he7z","title":"func patch<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/patch(_:use:)-5sbdc","title":"func patch<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/patch(_:use:)-86oiz","title":"func patch<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/post(_:use:)-23opy","title":"func post<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/post(_:use:)-5qj2j","title":"func post<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/post(_:use:)-5scp5","title":"func post<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/post(_:use:)-80c39","title":"func post<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/put(_:use:)-2idhr","title":"func put<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/put(_:use:)-3pky","title":"func put<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/put(_:use:)-4jtjs","title":"func put<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/put(_:use:)-63wt6","title":"func put<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/register(collection:)","title":"func register(collection: RouteCollection) throws","type":"method"},{"path":"\/documentation\/vapor\/application\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-135cs","title":"func webSocket(PathComponent..., maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) async throws -> HTTPHeaders?), onUpgrade: (Request, WebSocket) async -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-1ga3w","title":"func webSocket([PathComponent], maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) -> EventLoopFuture<HTTPHeaders?>), onUpgrade: (Request, WebSocket) -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-1ht09","title":"func webSocket([PathComponent], maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) async throws -> HTTPHeaders?), onUpgrade: (Request, WebSocket) async -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/application\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-4tpbz","title":"func webSocket(PathComponent..., maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) -> EventLoopFuture<HTTPHeaders?>), onUpgrade: (Request, WebSocket) -> ()) -> Route","type":"method"}],"path":"\/documentation\/vapor\/application\/routesbuilder-implementations","title":"RoutesBuilder Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/application","title":"Application","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcryptdigest\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcryptdigest\/hash(_:cost:)","title":"func hash(String, cost: Int) throws -> String","type":"method"},{"path":"\/documentation\/vapor\/bcryptdigest\/hash(_:salt:)","title":"func hash(String, salt: String) throws -> String","type":"method"},{"path":"\/documentation\/vapor\/bcryptdigest\/verify(_:created:)","title":"func verify(String, created: String) throws -> Bool","type":"method"}],"path":"\/documentation\/vapor\/bcryptdigest","title":"BCryptDigest","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/signature\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/signature\/init(from:)","title":"init(from: inout CommandInput) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/signature\/outputhelp(help:using:)","title":"func outputHelp(help: String, using: inout CommandContext)","type":"method"}],"path":"\/documentation\/vapor\/bootcommand\/signature\/commandsignature-implementations","title":"CommandSignature Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/bootcommand\/signature","title":"BootCommand.Signature","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/help","title":"var help: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/run(using:signature:)","title":"func run(using: CommandContext, signature: BootCommand.Signature) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/vapor\/bootcommand\/rendercompletionscript(using:shell:)","title":"func renderCompletionScript(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/vapor\/bootcommand\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"path":"\/documentation\/vapor\/bootcommand\/anycommand-implementations","title":"AnyCommand Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/bootcommand\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"},{"path":"\/documentation\/vapor\/bootcommand\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"path":"\/documentation\/vapor\/bootcommand\/command-implementations","title":"Command Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/bootcommand","title":"BootCommand","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/init(allowedorigin:allowedmethods:allowedheaders:allowcredentials:cacheexpiration:exposedheaders:)-4pxvt","title":"init(allowedOrigin: CORSMiddleware.AllowOriginSetting, allowedMethods: [HTTPMethod], allowedHeaders: [HTTPHeaders.Name], allowCredentials: Bool, cacheExpiration: Int?, exposedHeaders: [String])","type":"init"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/init(allowedorigin:allowedmethods:allowedheaders:allowcredentials:cacheexpiration:exposedheaders:)-7bjzo","title":"init(allowedOrigin: CORSMiddleware.AllowOriginSetting, allowedMethods: [HTTPMethod], allowedHeaders: [HTTPHeaders.Name], allowCredentials: Bool, cacheExpiration: Int?, exposedHeaders: [HTTPHeaders.Name]?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/allowcredentials","title":"let allowCredentials: Bool","type":"property"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/allowedheaders","title":"let allowedHeaders: String","type":"property"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/allowedmethods","title":"let allowedMethods: String","type":"property"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/allowedorigin","title":"let allowedOrigin: CORSMiddleware.AllowOriginSetting","type":"property"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/cacheexpiration","title":"let cacheExpiration: Int?","type":"property"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/exposedheaders","title":"let exposedHeaders: String?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct\/default()","title":"static func `default`() -> CORSMiddleware.Configuration","type":"method"}],"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.struct","title":"CORSMiddleware.Configuration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/init(configuration:)","title":"init(configuration: CORSMiddleware.Configuration)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/configuration-swift.property","title":"let configuration: CORSMiddleware.Configuration","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting\/all","title":"case all","type":"case"},{"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting\/any(_:)","title":"case any([String])","type":"case"},{"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting\/custom(_:)","title":"case custom(String)","type":"case"},{"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting\/none","title":"case none","type":"case"},{"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting\/originbased","title":"case originBased","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting\/header(forrequest:)","title":"func header(forRequest: Request) -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting\/whitelist(_:)","title":"static func whitelist([String]) -> CORSMiddleware.AllowOriginSetting","type":"method"}],"path":"\/documentation\/vapor\/corsmiddleware\/alloworiginsetting","title":"CORSMiddleware.AllowOriginSetting","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/corsmiddleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: Responder) -> Responder","type":"method"}],"path":"\/documentation\/vapor\/corsmiddleware\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/corsmiddleware","title":"CORSMiddleware","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/endpointcache\/init(uri:)","title":"init(uri: URI)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/endpointcache\/get(on:logger:)","title":"func get(on: Request, logger: Logger?) -> EventLoopFuture<T>","type":"method"},{"path":"\/documentation\/vapor\/endpointcache\/get(using:logger:on:)","title":"func get(using: Client, logger: Logger?, on: EventLoop) -> EventLoopFuture<T>","type":"method"}],"path":"\/documentation\/vapor\/endpointcache","title":"EndpointCache","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/errormiddleware\/init(_:)","title":"init((Request, Error) -> (Response))","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/errormiddleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/errormiddleware\/default(environment:)","title":"static func `default`(environment: Environment) -> ErrorMiddleware","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/errormiddleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: Responder) -> Responder","type":"method"}],"path":"\/documentation\/vapor\/errormiddleware\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/errormiddleware","title":"ErrorMiddleware","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/filemiddleware\/init(publicdirectory:defaultfile:)","title":"init(publicDirectory: String, defaultFile: String?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/filemiddleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/filemiddleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: Responder) -> Responder","type":"method"}],"path":"\/documentation\/vapor\/filemiddleware\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/filemiddleware","title":"FileMiddleware","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/compressionconfiguration\/disabled","title":"static var disabled: HTTPServer.Configuration.CompressionConfiguration","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/compressionconfiguration\/enabled","title":"static var enabled: HTTPServer.Configuration.CompressionConfiguration","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/compressionconfiguration\/enabled(initialbytebuffercapacity:)","title":"static func enabled(initialByteBufferCapacity: Int) -> HTTPServer.Configuration.CompressionConfiguration","type":"method"}],"path":"\/documentation\/vapor\/httpserver\/configuration\/compressionconfiguration","title":"HTTPServer.Configuration.CompressionConfiguration","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/decompressionconfiguration\/disabled","title":"static var disabled: HTTPServer.Configuration.DecompressionConfiguration","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/decompressionconfiguration\/enabled","title":"static var enabled: HTTPServer.Configuration.DecompressionConfiguration","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/decompressionconfiguration\/enabled(limit:)","title":"static func enabled(limit: NIOHTTPDecompression.DecompressionLimit) -> HTTPServer.Configuration.DecompressionConfiguration","type":"method"}],"path":"\/documentation\/vapor\/httpserver\/configuration\/decompressionconfiguration","title":"HTTPServer.Configuration.DecompressionConfiguration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/init(address:backlog:reuseaddress:tcpnodelay:responsecompression:requestdecompression:supportpipelining:supportversions:tlsconfiguration:servername:logger:shutdowntimeout:)","title":"init(address: BindAddress, backlog: Int, reuseAddress: Bool, tcpNoDelay: Bool, responseCompression: HTTPServer.Configuration.CompressionConfiguration, requestDecompression: HTTPServer.Configuration.DecompressionConfiguration, supportPipelining: Bool, supportVersions: Set<HTTPVersionMajor>?, tlsConfiguration: TLSConfiguration?, serverName: String?, logger: Logger?, shutdownTimeout: TimeAmount)","type":"init"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/init(hostname:port:backlog:reuseaddress:tcpnodelay:responsecompression:requestdecompression:supportpipelining:supportversions:tlsconfiguration:servername:logger:shutdowntimeout:)","title":"init(hostname: String, port: Int, backlog: Int, reuseAddress: Bool, tcpNoDelay: Bool, responseCompression: HTTPServer.Configuration.CompressionConfiguration, requestDecompression: HTTPServer.Configuration.DecompressionConfiguration, supportPipelining: Bool, supportVersions: Set<HTTPVersionMajor>?, tlsConfiguration: TLSConfiguration?, serverName: String?, logger: Logger?, shutdownTimeout: TimeAmount)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/address","title":"var address: BindAddress","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/backlog","title":"var backlog: Int","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/hostname","title":"var hostname: String","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/port","title":"var port: Int","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/requestdecompression","title":"var requestDecompression: HTTPServer.Configuration.DecompressionConfiguration","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/responsecompression","title":"var responseCompression: HTTPServer.Configuration.CompressionConfiguration","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/reuseaddress","title":"var reuseAddress: Bool","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/servername","title":"var serverName: String?","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/shutdowntimeout","title":"var shutdownTimeout: TimeAmount","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/supportpipelining","title":"var supportPipelining: Bool","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/supportversions","title":"var supportVersions: Set<HTTPVersionMajor>","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/tcpnodelay","title":"var tcpNoDelay: Bool","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/tlsconfiguration","title":"var tlsConfiguration: TLSConfiguration?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/defaulthostname","title":"static let defaultHostname: String","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/configuration\/defaultport","title":"static let defaultPort: Int","type":"property"}],"path":"\/documentation\/vapor\/httpserver\/configuration","title":"HTTPServer.Configuration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/init(application:responder:configuration:on:)","title":"init(application: Application, responder: Responder, configuration: HTTPServer.Configuration, on: EventLoopGroup)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/localaddress","title":"var localAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/vapor\/httpserver\/onshutdown","title":"var onShutdown: EventLoopFuture<Void>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/shutdown()","title":"func shutdown()","type":"method"},{"path":"\/documentation\/vapor\/httpserver\/start(address:)","title":"func start(address: BindAddress?) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpserver\/start()","title":"func start() throws","type":"method"},{"path":"\/documentation\/vapor\/httpserver\/start(hostname:port:)","title":"func start(hostname: String?, port: Int?) throws","type":"method"}],"path":"\/documentation\/vapor\/httpserver\/server-implementations","title":"Server Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/httpserver","title":"HTTPServer","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/authentication\/get(_:)","title":"func get<A>(A.Type) -> A?","type":"method"},{"path":"\/documentation\/vapor\/request\/authentication\/has(_:)","title":"func has<A>(A.Type) -> Bool","type":"method"},{"path":"\/documentation\/vapor\/request\/authentication\/login(_:)","title":"func login<A>(A)","type":"method"},{"path":"\/documentation\/vapor\/request\/authentication\/logout(_:)","title":"func logout<A>(A.Type)","type":"method"},{"path":"\/documentation\/vapor\/request\/authentication\/require(_:)","title":"func require<A>(A.Type) throws -> A","type":"method"}],"path":"\/documentation\/vapor\/request\/authentication","title":"Request.Authentication","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/body-swift.struct\/data","title":"var data: ByteBuffer?","type":"property"},{"path":"\/documentation\/vapor\/request\/body-swift.struct\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/request\/body-swift.struct\/string","title":"var string: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/body-swift.struct\/collect(max:)","title":"func collect(max: Int?) -> EventLoopFuture<ByteBuffer?>","type":"method"},{"path":"\/documentation\/vapor\/request\/body-swift.struct\/drain(_:)","title":"func drain((BodyStreamResult) -> EventLoopFuture<Void>)","type":"method"}],"path":"\/documentation\/vapor\/request\/body-swift.struct","title":"Request.Body","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/password-swift.struct\/async","title":"var async: AsyncPasswordHasher","type":"property"},{"path":"\/documentation\/vapor\/request\/password-swift.struct\/sync","title":"var sync: PasswordHasher","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/password-swift.struct\/hash(_:)-2hskg","title":"func hash<Password>(Password) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/vapor\/request\/password-swift.struct\/verify(_:created:)-1roxr","title":"func verify<Password, Digest>(Password, created: Digest) throws -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/password-swift.struct\/async(on:hopto:)","title":"func async(on: NIOThreadPool, hopTo: EventLoop) -> AsyncPasswordHasher","type":"method"},{"path":"\/documentation\/vapor\/request\/password-swift.struct\/hash(_:)-1vwd7","title":"func hash(String) throws -> String","type":"method"},{"path":"\/documentation\/vapor\/request\/password-swift.struct\/verify(_:created:)-5nrxz","title":"func verify(String, created: String) throws -> Bool","type":"method"}],"path":"\/documentation\/vapor\/request\/password-swift.struct\/passwordhasher-implementations","title":"PasswordHasher Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/request\/password-swift.struct","title":"Request.Password","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/init(application:method:url:version:headers:collectedbody:remoteaddress:logger:on:)","title":"convenience init(application: Application, method: HTTPMethod, url: URI, version: HTTPVersion, headers: HTTPHeaders, collectedBody: ByteBuffer?, remoteAddress: SocketAddress?, logger: Logger, on: EventLoop)","type":"init"},{"path":"\/documentation\/vapor\/request\/init(application:method:url:version:headersnoupdate:collectedbody:remoteaddress:logger:on:)","title":"init(application: Application, method: HTTPMethod, url: URI, version: HTTPVersion, headersNoUpdate: HTTPHeaders, collectedBody: ByteBuffer?, remoteAddress: SocketAddress?, logger: Logger, on: EventLoop)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/application","title":"let application: Application","type":"property"},{"path":"\/documentation\/vapor\/request\/auth","title":"var auth: Request.Authentication","type":"property"},{"path":"\/documentation\/vapor\/request\/body-swift.property","title":"var body: Request.Body","type":"property"},{"path":"\/documentation\/vapor\/request\/cache","title":"var cache: Cache","type":"property"},{"path":"\/documentation\/vapor\/request\/client","title":"var client: Client","type":"property"},{"path":"\/documentation\/vapor\/request\/content","title":"var content: ContentContainer","type":"property"},{"path":"\/documentation\/vapor\/request\/cookies","title":"var cookies: HTTPCookies","type":"property"},{"path":"\/documentation\/vapor\/request\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/request\/eventloop","title":"let eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/vapor\/request\/fileio","title":"var fileio: FileIO","type":"property"},{"path":"\/documentation\/vapor\/request\/hassession","title":"var hasSession: Bool","type":"property"},{"path":"\/documentation\/vapor\/request\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/request\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/vapor\/request\/method","title":"var method: HTTPMethod","type":"property"},{"path":"\/documentation\/vapor\/request\/parameters","title":"var parameters: Parameters","type":"property"},{"path":"\/documentation\/vapor\/request\/password-swift.property","title":"var password: Request.Password","type":"property"},{"path":"\/documentation\/vapor\/request\/query","title":"var query: URLQueryContainer","type":"property"},{"path":"\/documentation\/vapor\/request\/remoteaddress","title":"let remoteAddress: SocketAddress?","type":"property"},{"path":"\/documentation\/vapor\/request\/route","title":"var route: Route?","type":"property"},{"path":"\/documentation\/vapor\/request\/session","title":"var session: Session","type":"property"},{"path":"\/documentation\/vapor\/request\/storage","title":"var storage: Storage","type":"property"},{"path":"\/documentation\/vapor\/request\/url","title":"var url: URI","type":"property"},{"path":"\/documentation\/vapor\/request\/version","title":"var version: HTTPVersion","type":"property"},{"path":"\/documentation\/vapor\/request\/view","title":"var view: ViewRenderer","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/redirect(to:type:)","title":"func redirect(to: String, type: RedirectType) -> Response","type":"method"},{"path":"\/documentation\/vapor\/request\/websocket(maxframesize:shouldupgrade:onupgrade:)-363b2","title":"func webSocket(maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) async throws -> HTTPHeaders?), onUpgrade: (Request, WebSocket) async -> ()) -> Response","type":"method"},{"path":"\/documentation\/vapor\/request\/websocket(maxframesize:shouldupgrade:onupgrade:)-3uk5o","title":"func webSocket(maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) -> EventLoopFuture<HTTPHeaders?>), onUpgrade: (Request, WebSocket) -> ()) -> Response","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/decoderequest(_:)-8oscf","title":"static func decodeRequest(Request) async throws -> Request","type":"method"}],"path":"\/documentation\/vapor\/request\/asyncrequestdecodable-implementations","title":"AsyncRequestDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/request\/decoderequest(_:)-2j1ub","title":"static func decodeRequest(Request) -> EventLoopFuture<Request>","type":"method"}],"path":"\/documentation\/vapor\/request\/requestdecodable-implementations","title":"RequestDecodable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/request","title":"Request","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init()","title":"init()","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(buffer:)","title":"init(buffer: ByteBuffer)","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(data:)","title":"init(data: Data)","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(dispatchdata:)","title":"init(dispatchData: DispatchData)","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(staticstring:)","title":"init(staticString: StaticString)","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(stream:)","title":"init(stream: (BodyStreamWriter) -> ())","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(stream:count:)","title":"init(stream: (BodyStreamWriter) -> (), count: Int)","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(string:)","title":"init(string: String)","type":"init"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/buffer","title":"var buffer: ByteBuffer?","type":"property"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/data","title":"var data: Data?","type":"property"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/string","title":"var string: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/collect(on:)","title":"func collect(on: EventLoop) -> EventLoopFuture<ByteBuffer?>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/empty","title":"static let empty: Response.Body","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/response\/body-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/body-swift.struct\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/response\/body-swift.struct\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/response\/body-swift.struct","title":"Response.Body","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/init(status:version:headers:body:)","title":"convenience init(status: HTTPResponseStatus, version: HTTPVersion, headers: HTTPHeaders, body: Response.Body)","type":"init"},{"path":"\/documentation\/vapor\/response\/init(status:version:headersnoupdate:body:)","title":"init(status: HTTPResponseStatus, version: HTTPVersion, headersNoUpdate: HTTPHeaders, body: Response.Body)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/body-swift.property","title":"var body: Response.Body","type":"property"},{"path":"\/documentation\/vapor\/response\/content","title":"var content: ContentContainer","type":"property"},{"path":"\/documentation\/vapor\/response\/cookies","title":"var cookies: HTTPCookies","type":"property"},{"path":"\/documentation\/vapor\/response\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/response\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/response\/status","title":"var status: HTTPResponseStatus","type":"property"},{"path":"\/documentation\/vapor\/response\/storage","title":"var storage: Storage","type":"property"},{"path":"\/documentation\/vapor\/response\/version","title":"var version: HTTPVersion","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/encoderesponse(for:)-1m2xt","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/response\/asyncresponseencodable-implementations","title":"AsyncResponseEncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/response\/encoderesponse(for:)-9vrva","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"path":"\/documentation\/vapor\/response\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/response\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/response","title":"Response","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/route\/init(method:path:responder:requesttype:responsetype:)","title":"init(method: HTTPMethod, path: [PathComponent], responder: Responder, requestType: Any.Type, responseType: Any.Type)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/route\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/route\/method","title":"var method: HTTPMethod","type":"property"},{"path":"\/documentation\/vapor\/route\/path","title":"var path: [PathComponent]","type":"property"},{"path":"\/documentation\/vapor\/route\/requesttype","title":"var requestType: Any.Type","type":"property"},{"path":"\/documentation\/vapor\/route\/responder","title":"var responder: Responder","type":"property"},{"path":"\/documentation\/vapor\/route\/responsetype","title":"var responseType: Any.Type","type":"property"},{"path":"\/documentation\/vapor\/route\/userinfo","title":"var userInfo: [AnyHashable : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/route\/description(_:)","title":"func description(String) -> Route","type":"method"}],"path":"\/documentation\/vapor\/route","title":"Route","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/routeloggingmiddleware\/init(loglevel:)","title":"init(logLevel: Logger.Level)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/routeloggingmiddleware\/loglevel","title":"let logLevel: Logger.Level","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routeloggingmiddleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routeloggingmiddleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: Responder) -> Responder","type":"method"}],"path":"\/documentation\/vapor\/routeloggingmiddleware\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/routeloggingmiddleware","title":"RouteLoggingMiddleware","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/routes\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/routes\/all","title":"var all: [Route]","type":"property"},{"path":"\/documentation\/vapor\/routes\/caseinsensitive","title":"var caseInsensitive: Bool","type":"property"},{"path":"\/documentation\/vapor\/routes\/caseinsenstive","title":"var caseInsenstive: Bool","type":"property"},{"path":"\/documentation\/vapor\/routes\/defaultmaxbodysize","title":"var defaultMaxBodySize: ByteCount","type":"property"},{"path":"\/documentation\/vapor\/routes\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routes\/add(_:)","title":"func add(Route)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routes\/delete(_:use:)-3gmhr","title":"func delete<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/delete(_:use:)-6w33f","title":"func delete<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/delete(_:use:)-7pr4f","title":"func delete<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/delete(_:use:)-f7cf","title":"func delete<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/get(_:use:)-5zhs4","title":"func get<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/get(_:use:)-6jz3h","title":"func get<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/get(_:use:)-9u7d7","title":"func get<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/get(_:use:)-u04w","title":"func get<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/group(_:configure:)-2bd3m","title":"func group([Middleware], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routes\/group(_:configure:)-3jxn6","title":"func group(PathComponent..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routes\/group(_:configure:)-4b8ow","title":"func group(Middleware..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routes\/group(_:configure:)-4csb4","title":"func group([PathComponent], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routes\/grouped(_:)-4eiql","title":"func grouped([PathComponent]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routes\/grouped(_:)-8yqa0","title":"func grouped(Middleware...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routes\/grouped(_:)-9cxyg","title":"func grouped([Middleware]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routes\/grouped(_:)-9ushy","title":"func grouped(PathComponent...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routes\/on(_:_:body:use:)-4as1r","title":"func on<Response>(HTTPMethod, [PathComponent], body: HTTPBodyStreamStrategy, use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/on(_:_:body:use:)-6l1x0","title":"func on<Response>(HTTPMethod, PathComponent..., body: HTTPBodyStreamStrategy, use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/on(_:_:body:use:)-8go42","title":"func on<Response>(HTTPMethod, PathComponent..., body: HTTPBodyStreamStrategy, use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/on(_:_:body:use:)-8rp49","title":"func on<Response>(HTTPMethod, [PathComponent], body: HTTPBodyStreamStrategy, use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/patch(_:use:)-3a7yc","title":"func patch<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/patch(_:use:)-6gpx2","title":"func patch<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/patch(_:use:)-8pqzh","title":"func patch<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/patch(_:use:)-9v9u2","title":"func patch<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/post(_:use:)-2zfvn","title":"func post<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/post(_:use:)-5tlnr","title":"func post<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/post(_:use:)-6r397","title":"func post<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/post(_:use:)-7k804","title":"func post<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/put(_:use:)-1dkjb","title":"func put<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/put(_:use:)-24vs7","title":"func put<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/put(_:use:)-25zxp","title":"func put<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/put(_:use:)-2oqql","title":"func put<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/register(collection:)","title":"func register(collection: RouteCollection) throws","type":"method"},{"path":"\/documentation\/vapor\/routes\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-20xxm","title":"func webSocket([PathComponent], maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) -> EventLoopFuture<HTTPHeaders?>), onUpgrade: (Request, WebSocket) -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-76fpm","title":"func webSocket(PathComponent..., maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) -> EventLoopFuture<HTTPHeaders?>), onUpgrade: (Request, WebSocket) -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-925h2","title":"func webSocket([PathComponent], maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) async throws -> HTTPHeaders?), onUpgrade: (Request, WebSocket) async -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routes\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-ptgo","title":"func webSocket(PathComponent..., maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) async throws -> HTTPHeaders?), onUpgrade: (Request, WebSocket) async -> ()) -> Route","type":"method"}],"path":"\/documentation\/vapor\/routes\/routesbuilder-implementations","title":"RoutesBuilder Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/routes","title":"Routes","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/routescommand\/signature\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/routescommand\/signature\/init(from:)","title":"init(from: inout CommandInput) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routescommand\/signature\/outputhelp(help:using:)","title":"func outputHelp(help: String, using: inout CommandContext)","type":"method"}],"path":"\/documentation\/vapor\/routescommand\/signature\/commandsignature-implementations","title":"CommandSignature Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/routescommand\/signature","title":"RoutesCommand.Signature","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/routescommand\/help","title":"var help: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routescommand\/run(using:signature:)","title":"func run(using: CommandContext, signature: RoutesCommand.Signature) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routescommand\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/vapor\/routescommand\/rendercompletionscript(using:shell:)","title":"func renderCompletionScript(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/vapor\/routescommand\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"path":"\/documentation\/vapor\/routescommand\/anycommand-implementations","title":"AnyCommand Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routescommand\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"},{"path":"\/documentation\/vapor\/routescommand\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"path":"\/documentation\/vapor\/routescommand\/command-implementations","title":"Command Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/routescommand","title":"RoutesCommand","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/signature-swift.struct\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/signature-swift.struct\/init(from:)","title":"init(from: inout CommandInput) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/signature-swift.struct\/outputhelp(help:using:)","title":"func outputHelp(help: String, using: inout CommandContext)","type":"method"}],"path":"\/documentation\/vapor\/servecommand\/signature-swift.struct\/commandsignature-implementations","title":"CommandSignature Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/servecommand\/signature-swift.struct","title":"ServeCommand.Signature","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/help","title":"var help: String","type":"property"},{"path":"\/documentation\/vapor\/servecommand\/signature-swift.property","title":"let signature: ServeCommand.Signature","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/run(using:signature:)","title":"func run(using: CommandContext, signature: ServeCommand.Signature) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/error\/incompatibleflags","title":"case incompatibleFlags","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/servecommand\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/vapor\/servecommand\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/servecommand\/error","title":"ServeCommand.Error","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/rendercompletionfunctions(using:shell:)","title":"func renderCompletionFunctions(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/vapor\/servecommand\/rendercompletionscript(using:shell:)","title":"func renderCompletionScript(using: CommandContext, shell: Shell) -> String","type":"method"},{"path":"\/documentation\/vapor\/servecommand\/run(using:)","title":"func run(using: inout CommandContext) throws","type":"method"}],"path":"\/documentation\/vapor\/servecommand\/anycommand-implementations","title":"AnyCommand Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/servecommand\/outputautocomplete(using:)","title":"func outputAutoComplete(using: inout CommandContext)","type":"method"},{"path":"\/documentation\/vapor\/servecommand\/outputhelp(using:)","title":"func outputHelp(using: inout CommandContext)","type":"method"}],"path":"\/documentation\/vapor\/servecommand\/command-implementations","title":"Command Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/servecommand","title":"ServeCommand","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/session\/init(id:data:)","title":"init(id: SessionID?, data: SessionData)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/session\/data","title":"var data: SessionData","type":"property"},{"path":"\/documentation\/vapor\/session\/id","title":"var id: SessionID?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/session\/authenticate(_:)","title":"func authenticate<A>(A)","type":"method"},{"path":"\/documentation\/vapor\/session\/authenticated(_:)","title":"func authenticated<A>(A.Type) -> A.SessionID?","type":"method"},{"path":"\/documentation\/vapor\/session\/destroy()","title":"func destroy()","type":"method"},{"path":"\/documentation\/vapor\/session\/unauthenticate(_:)","title":"func unauthenticate<A>(A.Type)","type":"method"}],"path":"\/documentation\/vapor\/session","title":"Session","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionsmiddleware\/init(session:configuration:)","title":"init(session: SessionDriver, configuration: SessionsConfiguration)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionsmiddleware\/session","title":"let session: SessionDriver","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionsmiddleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionsmiddleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: Responder) -> Responder","type":"method"}],"path":"\/documentation\/vapor\/sessionsmiddleware\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/sessionsmiddleware","title":"SessionsMiddleware","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/aborterror\/headers-4cfks","title":"var headers: HTTPHeaders","type":"property"}],"title":"AbortError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/aborterror\/headers-2f0b0","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/aborterror\/identifier","title":"var identifier: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/aborterror\/reason-8gkjx","title":"var reason: String","type":"property"}],"title":"AbortError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/aborterror\/reason-6mv7p","title":"var reason: String","type":"property"},{"path":"\/documentation\/vapor\/aborterror\/status","title":"var status: HTTPResponseStatus","type":"property"}],"path":"\/documentation\/vapor\/aborterror","title":"AbortError","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/anyoptionaltype\/anywrapped-3ghdw","title":"var anyWrapped: Any?","type":"property"}],"title":"AnyOptionalType Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/anyoptionaltype\/anywrapped-75g66","title":"var anyWrapped: Any?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/anyoptionaltype\/anywrappedtype-9u1em","title":"static var anyWrappedType: Any.Type","type":"property"}],"title":"AnyOptionalType Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/anyoptionaltype\/anywrappedtype-9rm7y","title":"static var anyWrappedType: Any.Type","type":"property"}],"path":"\/documentation\/vapor\/anyoptionaltype","title":"AnyOptionalType","type":"protocol"},{"path":"\/documentation\/vapor\/asyncauthenticator","title":"AsyncAuthenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncbasicauthenticator\/authenticate(basic:for:)","title":"func authenticate(basic: BasicAuthorization, for: Request) async throws","type":"method"}],"path":"\/documentation\/vapor\/asyncbasicauthenticator","title":"AsyncBasicAuthenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncbearerauthenticator\/authenticate(bearer:for:)","title":"func authenticate(bearer: BearerAuthorization, for: Request) async throws","type":"method"}],"path":"\/documentation\/vapor\/asyncbearerauthenticator","title":"AsyncBearerAuthenticator","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/vapor\/asynccredentialsauthenticator\/credentials","title":"Credentials","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/asynccredentialsauthenticator\/authenticate(credentials:for:)","title":"func authenticate(credentials: Self.Credentials, for: Request) async throws","type":"method"}],"path":"\/documentation\/vapor\/asynccredentialsauthenticator","title":"AsyncCredentialsAuthenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncmiddleware\/respond(to:chainingto:)-tv64","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"}],"title":"AsyncMiddleware Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncmiddleware\/respond(to:chainingto:)-57t0l","title":"func respond(to: Request, chainingTo: AsyncResponder) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/asyncmiddleware","title":"AsyncMiddleware","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncbasicauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) async throws","type":"method"}],"title":"AsyncBasicAuthenticator Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/vapor\/asyncbearerauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) async throws","type":"method"}],"title":"AsyncBearerAuthenticator Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/vapor\/asynccredentialsauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) async throws","type":"method"}],"title":"AsyncCredentialsAuthenticator Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncrequestauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) async throws","type":"method"},{"path":"\/documentation\/vapor\/asyncrequestauthenticator\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: AsyncResponder) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/asyncrequestauthenticator","title":"AsyncRequestAuthenticator","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/content\/decoderequest(_:)-65020","title":"static func decodeRequest(Request) -> EventLoopFuture<Self>","type":"method"},{"path":"\/documentation\/vapor\/content\/decoderequest(_:)-3rkwi","title":"static func decodeRequest(Request) async throws -> Self","type":"method"}],"title":"Content Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncrequestdecodable\/decoderequest(_:)","title":"static func decodeRequest(Request) async throws -> Self","type":"method"}],"path":"\/documentation\/vapor\/asyncrequestdecodable","title":"AsyncRequestDecodable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncresponder\/respond(to:)-6x4ae","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"title":"AsyncResponder Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncresponder\/respond(to:)-kwlr","title":"func respond(to: Request) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/asyncresponder","title":"AsyncResponder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/content\/encoderesponse(for:)-8bsxp","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"},{"path":"\/documentation\/vapor\/content\/encoderesponse(for:)-3zman","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"}],"title":"Content Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncresponseencodable\/encoderesponse(for:)","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"},{"path":"\/documentation\/vapor\/asyncresponseencodable\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/asyncresponseencodable","title":"AsyncResponseEncodable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncsessionauthenticator\/user","title":"User","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncsessionauthenticator\/authenticate(sessionid:for:)","title":"func authenticate(sessionID: Self.User.SessionID, for: Request) async throws","type":"method"},{"path":"\/documentation\/vapor\/asyncsessionauthenticator\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: AsyncResponder) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/asyncsessionauthenticator","title":"AsyncSessionAuthenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/createsession(_:for:)-6uo59","title":"func createSession(SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncsessiondriver\/createsession(_:for:)-62fms","title":"func createSession(SessionData, for: Request) async throws -> SessionID","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/deletesession(_:for:)-30joo","title":"func deleteSession(SessionID, for: Request) -> EventLoopFuture<Void>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncsessiondriver\/deletesession(_:for:)-166lp","title":"func deleteSession(SessionID, for: Request) async throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/readsession(_:for:)-7qfw3","title":"func readSession(SessionID, for: Request) -> EventLoopFuture<SessionData?>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncsessiondriver\/readsession(_:for:)-3e198","title":"func readSession(SessionID, for: Request) async throws -> SessionData?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/updatesession(_:to:for:)-2ptj0","title":"func updateSession(SessionID, to: SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/asyncsessiondriver\/updatesession(_:to:for:)-3jvze","title":"func updateSession(SessionID, to: SessionData, for: Request) async throws -> SessionID","type":"method"}],"path":"\/documentation\/vapor\/asyncsessiondriver","title":"AsyncSessionDriver","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/authenticatable\/guardmiddleware(throwing:)","title":"static func guardMiddleware(throwing: Error) -> Middleware","type":"method"},{"path":"\/documentation\/vapor\/authenticatable\/redirectmiddleware(makepath:)","title":"static func redirectMiddleware(makePath: (Request) -> String) -> Middleware","type":"method"},{"path":"\/documentation\/vapor\/authenticatable\/redirectmiddleware(path:)","title":"static func redirectMiddleware(path: String) -> Middleware","type":"method"}],"path":"\/documentation\/vapor\/authenticatable","title":"Authenticatable","type":"protocol"},{"path":"\/documentation\/vapor\/authenticator","title":"Authenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/basicauthenticator\/authenticate(basic:for:)","title":"func authenticate(basic: BasicAuthorization, for: Request) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/vapor\/basicauthenticator","title":"BasicAuthenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/bearerauthenticator\/authenticate(bearer:for:)","title":"func authenticate(bearer: BearerAuthorization, for: Request) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/vapor\/bearerauthenticator","title":"BearerAuthenticator","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bodystreamwriter\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/bodystreamwriter\/write(_:)","title":"func write(BodyStreamResult) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/vapor\/bodystreamwriter\/write(_:promise:)","title":"func write(BodyStreamResult, promise: EventLoopPromise<Void>?)","type":"method"}],"path":"\/documentation\/vapor\/bodystreamwriter","title":"BodyStreamWriter","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/cache\/for(_:)","title":"func `for`(Request) -> Self","type":"method"},{"path":"\/documentation\/vapor\/cache\/get(_:)-6l91s","title":"func get<T>(String) async throws -> T?","type":"method"},{"path":"\/documentation\/vapor\/cache\/get(_:)-7q0xa","title":"func get<T>(String) -> EventLoopFuture<T?>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/cache\/get(_:as:)-83yee","title":"func get<T>(String, as: T.Type) async throws -> T?","type":"method"}],"title":"Cache Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/cache\/get(_:as:)-89bdp","title":"func get<T>(String, as: T.Type) -> EventLoopFuture<T?>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/cache\/set(_:to:)-6540x","title":"func set<T>(String, to: T?) async throws","type":"method"}],"title":"Cache Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/cache\/set(_:to:)-815ie","title":"func set<T>(String, to: T?) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/cache\/set(_:to:expiresin:)-vva9","title":"func set<T>(String, to: T?, expiresIn: CacheExpirationTime?) async throws","type":"method"},{"path":"\/documentation\/vapor\/cache\/set(_:to:expiresin:)-31ww5","title":"func set<T>(String, to: T?, expiresIn: CacheExpirationTime?) -> EventLoopFuture<Void>","type":"method"}],"title":"Cache Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/cache\/set(_:to:expiresin:)-7tyni","title":"func set<T>(String, to: T?, expiresIn: CacheExpirationTime?) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/vapor\/cache","title":"Cache","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/client\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/client\/delegating(to:)","title":"func delegating(to: EventLoop) -> Client","type":"method"},{"path":"\/documentation\/vapor\/client\/delete(_:headers:beforesend:)-32o0b","title":"func delete(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/delete(_:headers:beforesend:)-5yz5q","title":"func delete(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/get(_:headers:beforesend:)-3lgd3","title":"func get(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/get(_:headers:beforesend:)-74who","title":"func get(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) async throws -> ClientResponse","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/client\/logging(to:)-85pie","title":"func logging(to: Logger) -> Client","type":"method"}],"title":"Client Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/client\/logging(to:)-4gqxx","title":"func logging(to: Logger) -> Client","type":"method"},{"path":"\/documentation\/vapor\/client\/patch(_:headers:beforesend:)-103n9","title":"func patch(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/patch(_:headers:beforesend:)-52j2y","title":"func patch(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/patch(_:headers:content:)-2m28t","title":"func patch<T>(URI, headers: HTTPHeaders, content: T) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/patch(_:headers:content:)-46zkw","title":"func patch<T>(URI, headers: HTTPHeaders, content: T) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/post(_:headers:beforesend:)-8ovz9","title":"func post(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/post(_:headers:beforesend:)-9wi5y","title":"func post(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/post(_:headers:content:)-1l9jv","title":"func post<T>(URI, headers: HTTPHeaders, content: T) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/post(_:headers:content:)-88d09","title":"func post<T>(URI, headers: HTTPHeaders, content: T) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/put(_:headers:beforesend:)-3dlx4","title":"func put(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/put(_:headers:beforesend:)-5n9fh","title":"func put(URI, headers: HTTPHeaders, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/put(_:headers:content:)-8phsl","title":"func put<T>(URI, headers: HTTPHeaders, content: T) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/put(_:headers:content:)-nkyp","title":"func put<T>(URI, headers: HTTPHeaders, content: T) -> EventLoopFuture<ClientResponse>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/client\/send(_:)-468zt","title":"func send(ClientRequest) async throws -> ClientResponse","type":"method"}],"title":"Client Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/client\/send(_:)-35ktt","title":"func send(ClientRequest) -> EventLoopFuture<ClientResponse>","type":"method"},{"path":"\/documentation\/vapor\/client\/send(_:headers:to:beforesend:)-375mi","title":"func send(HTTPMethod, headers: HTTPHeaders, to: URI, beforeSend: (inout ClientRequest) throws -> ()) async throws -> ClientResponse","type":"method"},{"path":"\/documentation\/vapor\/client\/send(_:headers:to:beforesend:)-3r5tg","title":"func send(HTTPMethod, headers: HTTPHeaders, to: URI, beforeSend: (inout ClientRequest) throws -> ()) -> EventLoopFuture<ClientResponse>","type":"method"}],"path":"\/documentation\/vapor\/client","title":"Client","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/codingkeyrepresentable\/codingkey","title":"var codingKey: CodingKey","type":"property"}],"path":"\/documentation\/vapor\/codingkeyrepresentable","title":"CodingKeyRepresentable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/content\/afterdecode()-31tdt","title":"func afterDecode() throws","type":"method"}],"title":"Content Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/content\/afterdecode()-65hw5","title":"func afterDecode() throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/content\/beforeencode()-2pv56","title":"func beforeEncode() throws","type":"method"}],"title":"Content Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/content\/beforeencode()-61cyv","title":"func beforeEncode() throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/content\/defaultcontenttype-9sljl","title":"static var defaultContentType: HTTPMediaType","type":"property"}],"title":"Content Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/content\/defaultcontenttype-3ommu","title":"static var defaultContentType: HTTPMediaType","type":"property"}],"path":"\/documentation\/vapor\/content","title":"Content","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentcontainer\/contenttype","title":"var contentType: HTTPMediaType?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentcontainer\/decode(_:)-28ghw","title":"func decode<C>(C.Type) throws -> C","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/decode(_:)-7wltg","title":"func decode<D>(D.Type) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/decode(_:using:)","title":"func decode<D>(D.Type, using: ContentDecoder) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/encode(_:)","title":"func encode<C>(C) throws","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/encode(_:as:)-8jy9o","title":"func encode<C>(C, as: HTTPMediaType) throws","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/encode(_:as:)-ezop","title":"func encode<E>(E, as: HTTPMediaType) throws","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/encode(_:using:)","title":"func encode<E>(E, using: ContentEncoder) throws","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/get(_:at:)-1jnp6","title":"func get<D>(D.Type, at: CodingKeyRepresentable...) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/contentcontainer\/get(_:at:)-9e92c","title":"func get<D>(D.Type, at: [CodingKeyRepresentable]) throws -> D","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentcontainer\/subscript(_:)","title":"subscript<D>(CodingKeyRepresentable...) -> D?","type":"subscript"},{"path":"\/documentation\/vapor\/contentcontainer\/subscript(_:at:)-90mrm","title":"subscript<D>(D.Type, at _: [CodingKeyRepresentable]) -> D?","type":"subscript"},{"path":"\/documentation\/vapor\/contentcontainer\/subscript(_:at:)-9hg1o","title":"subscript<D>(D.Type, at _: CodingKeyRepresentable...) -> D?","type":"subscript"}],"path":"\/documentation\/vapor\/contentcontainer","title":"ContentContainer","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentdecoder\/decode(_:from:headers:)","title":"func decode<D>(D.Type, from: ByteBuffer, headers: HTTPHeaders) throws -> D","type":"method"}],"path":"\/documentation\/vapor\/contentdecoder","title":"ContentDecoder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentencoder\/encode(_:to:headers:)","title":"func encode<E>(E, to: inout ByteBuffer, headers: inout HTTPHeaders) throws","type":"method"}],"path":"\/documentation\/vapor\/contentencoder","title":"ContentEncoder","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/vapor\/credentialsauthenticator\/credentials","title":"Credentials","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/credentialsauthenticator\/authenticate(credentials:for:)","title":"func authenticate(credentials: Self.Credentials, for: Request) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/vapor\/credentialsauthenticator","title":"CredentialsAuthenticator","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/debuggableerror\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/description","title":"var description: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/documentationlinks-259m9","title":"var documentationLinks: [String]","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/documentationlinks-2dfci","title":"var documentationLinks: [String]","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/fullidentifier","title":"var fullIdentifier: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/githubissues-1795i","title":"var gitHubIssues: [String]","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/githubissues-4o4su","title":"var gitHubIssues: [String]","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/identifier","title":"var identifier: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/loglevel-7cxi7","title":"var logLevel: Logger.Level","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/loglevel-552h0","title":"var logLevel: Logger.Level","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/possiblecauses-9wvnj","title":"var possibleCauses: [String]","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/possiblecauses-59zu4","title":"var possibleCauses: [String]","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/reason","title":"var reason: String","type":"property"},{"path":"\/documentation\/vapor\/debuggableerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/source-9sohi","title":"var source: ErrorSource?","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/source-3l5o6","title":"var source: ErrorSource?","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/stackoverflowquestions-9i7hh","title":"var stackOverflowQuestions: [String]","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/stackoverflowquestions-7z9v3","title":"var stackOverflowQuestions: [String]","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/stacktrace-8xnnk","title":"var stackTrace: StackTrace?","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/stacktrace-pvzf","title":"var stackTrace: StackTrace?","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/suggestedfixes-6ua2u","title":"var suggestedFixes: [String]","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/suggestedfixes-2y1mz","title":"var suggestedFixes: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/debuggableerror\/debuggablehelp(format:)","title":"func debuggableHelp(format: HelpFormat) -> String","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/readablename-5uonz","title":"static var readableName: String","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/readablename-55ap2","title":"static var readableName: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/vapor\/debuggableerror\/typeidentifier-9xqog","title":"static var typeIdentifier: String","type":"property"}],"title":"DebuggableError Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/debuggableerror\/typeidentifier-2dkdy","title":"static var typeIdentifier: String","type":"property"}],"path":"\/documentation\/vapor\/debuggableerror","title":"DebuggableError","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/extendable\/extend","title":"var extend: Extend","type":"property"}],"path":"\/documentation\/vapor\/extendable","title":"Extendable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/lifecyclehandler\/didboot(_:)-wfef","title":"func didBoot(Application) throws","type":"method"}],"title":"LifecycleHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/lifecyclehandler\/didboot(_:)-87x5k","title":"func didBoot(Application) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/lifecyclehandler\/shutdown(_:)-9nssk","title":"func shutdown(Application)","type":"method"}],"title":"LifecycleHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/lifecyclehandler\/shutdown(_:)-2clwm","title":"func shutdown(Application)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/lifecyclehandler\/willboot(_:)-8anu6","title":"func willBoot(Application) throws","type":"method"}],"title":"LifecycleHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/lifecyclehandler\/willboot(_:)-9zn","title":"func willBoot(Application) throws","type":"method"}],"path":"\/documentation\/vapor\/lifecyclehandler","title":"LifecycleHandler","type":"protocol"},{"path":"\/documentation\/vapor\/lockkey","title":"LockKey","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/middleware\/makeresponder(chainingto:)","title":"func makeResponder(chainingTo: Responder) -> Responder","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncmiddleware\/respond(to:chainingto:)-tv64","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"}],"title":"AsyncMiddleware Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/middleware\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/middleware","title":"Middleware","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/vapor\/optionaltype\/wrappedtype","title":"WrappedType","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/optionaltype\/wrapped","title":"var wrapped: Self.WrappedType?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/optionaltype\/makeoptionaltype(_:)","title":"static func makeOptionalType(Self.WrappedType?) -> Self","type":"method"}],"path":"\/documentation\/vapor\/optionaltype","title":"OptionalType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/passwordhasher\/async(on:hopto:)","title":"func async(on: NIOThreadPool, hopTo: EventLoop) -> AsyncPasswordHasher","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/passwordhasher\/hash(_:)-5f1rv","title":"func hash(String) throws -> String","type":"method"}],"title":"PasswordHasher Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/passwordhasher\/hash(_:)-3asw5","title":"func hash<Password>(Password) throws -> [UInt8]","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/passwordhasher\/verify(_:created:)-1zc1y","title":"func verify(String, created: String) throws -> Bool","type":"method"}],"title":"PasswordHasher Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/passwordhasher\/verify(_:created:)-7ca6a","title":"func verify<Password, Digest>(Password, created: Digest) throws -> Bool","type":"method"}],"path":"\/documentation\/vapor\/passwordhasher","title":"PasswordHasher","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/basicauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) -> EventLoopFuture<Void>","type":"method"}],"title":"BasicAuthenticator Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/vapor\/bearerauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) -> EventLoopFuture<Void>","type":"method"}],"title":"BearerAuthenticator Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/vapor\/credentialsauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) -> EventLoopFuture<Void>","type":"method"}],"title":"CredentialsAuthenticator Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/requestauthenticator\/authenticate(request:)","title":"func authenticate(request: Request) -> EventLoopFuture<Void>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/requestauthenticator\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/requestauthenticator\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/requestauthenticator","title":"RequestAuthenticator","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/content\/decoderequest(_:)-3rkwi","title":"static func decodeRequest(Request) async throws -> Self","type":"method"},{"path":"\/documentation\/vapor\/content\/decoderequest(_:)-65020","title":"static func decodeRequest(Request) -> EventLoopFuture<Self>","type":"method"}],"title":"Content Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/requestdecodable\/decoderequest(_:)","title":"static func decodeRequest(Request) -> EventLoopFuture<Self>","type":"method"}],"path":"\/documentation\/vapor\/requestdecodable","title":"RequestDecodable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncresponder\/respond(to:)-6x4ae","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"title":"AsyncResponder Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/responder\/respond(to:)","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/responder","title":"Responder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/content\/encoderesponse(for:)-8bsxp","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"},{"path":"\/documentation\/vapor\/content\/encoderesponse(for:)-3zman","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"}],"title":"Content Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/responseencodable\/encoderesponse(for:)","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"path":"\/documentation\/vapor\/responseencodable\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/responseencodable","title":"ResponseEncodable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routecollection\/boot(routes:)","title":"func boot(routes: RoutesBuilder) throws","type":"method"}],"path":"\/documentation\/vapor\/routecollection","title":"RouteCollection","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/routesbuilder\/add(_:)","title":"func add(Route)","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/delete(_:use:)-36kex","title":"func delete<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/delete(_:use:)-3u4o2","title":"func delete<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/delete(_:use:)-4mhxe","title":"func delete<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/delete(_:use:)-4qth9","title":"func delete<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/get(_:use:)-1llm2","title":"func get<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/get(_:use:)-37ujq","title":"func get<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/get(_:use:)-3blcq","title":"func get<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/get(_:use:)-8q2tn","title":"func get<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/group(_:configure:)-155m1","title":"func group([PathComponent], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/group(_:configure:)-57ell","title":"func group([Middleware], configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/group(_:configure:)-6dkbm","title":"func group(Middleware..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/group(_:configure:)-ld6z","title":"func group(PathComponent..., configure: (RoutesBuilder) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/grouped(_:)-2z43n","title":"func grouped([Middleware]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/grouped(_:)-5335m","title":"func grouped(PathComponent...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/grouped(_:)-6hkte","title":"func grouped([PathComponent]) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/grouped(_:)-8seb6","title":"func grouped(Middleware...) -> RoutesBuilder","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/on(_:_:body:use:)-123rf","title":"func on<Response>(HTTPMethod, PathComponent..., body: HTTPBodyStreamStrategy, use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/on(_:_:body:use:)-3doar","title":"func on<Response>(HTTPMethod, [PathComponent], body: HTTPBodyStreamStrategy, use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/on(_:_:body:use:)-6i7pb","title":"func on<Response>(HTTPMethod, PathComponent..., body: HTTPBodyStreamStrategy, use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/on(_:_:body:use:)-8xjc5","title":"func on<Response>(HTTPMethod, [PathComponent], body: HTTPBodyStreamStrategy, use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/patch(_:use:)-2oum9","title":"func patch<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/patch(_:use:)-48o0u","title":"func patch<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/patch(_:use:)-4w8du","title":"func patch<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/patch(_:use:)-66yt6","title":"func patch<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/post(_:use:)-3hclo","title":"func post<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/post(_:use:)-83i8d","title":"func post<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/post(_:use:)-8wdeg","title":"func post<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/post(_:use:)-90v7c","title":"func post<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/put(_:use:)-16yi3","title":"func put<Response>(PathComponent..., use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/put(_:use:)-4asmo","title":"func put<Response>([PathComponent], use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/put(_:use:)-6m1qu","title":"func put<Response>([PathComponent], use: (Request) async throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/put(_:use:)-7ost3","title":"func put<Response>(PathComponent..., use: (Request) throws -> Response) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/register(collection:)","title":"func register(collection: RouteCollection) throws","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-5ooy1","title":"func webSocket(PathComponent..., maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) async throws -> HTTPHeaders?), onUpgrade: (Request, WebSocket) async -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-8zfo3","title":"func webSocket([PathComponent], maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) -> EventLoopFuture<HTTPHeaders?>), onUpgrade: (Request, WebSocket) -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-9my73","title":"func webSocket(PathComponent..., maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) -> EventLoopFuture<HTTPHeaders?>), onUpgrade: (Request, WebSocket) -> ()) -> Route","type":"method"},{"path":"\/documentation\/vapor\/routesbuilder\/websocket(_:maxframesize:shouldupgrade:onupgrade:)-e4lu","title":"func webSocket([PathComponent], maxFrameSize: WebSocketMaxFrameSize, shouldUpgrade: ((Request) async throws -> HTTPHeaders?), onUpgrade: (Request, WebSocket) async -> ()) -> Route","type":"method"}],"path":"\/documentation\/vapor\/routesbuilder","title":"RoutesBuilder","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/server\/onshutdown","title":"var onShutdown: EventLoopFuture<Void>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/server\/shutdown()","title":"func shutdown()","type":"method"},{"path":"\/documentation\/vapor\/server\/start()","title":"func start() throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/server\/start(address:)-85yik","title":"func start(address: BindAddress?) throws","type":"method"}],"title":"Server Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/server\/start(address:)-93ccl","title":"func start(address: BindAddress?) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/server\/start(hostname:port:)-6oo14","title":"func start(hostname: String?, port: Int?) throws","type":"method"}],"title":"Server Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/server\/start(hostname:port:)-1bfda","title":"func start(hostname: String?, port: Int?) throws","type":"method"}],"path":"\/documentation\/vapor\/server","title":"Server","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionauthenticatable\/sessionid-swift.associatedtype","title":"SessionID","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionauthenticatable\/sessionid-swift.property","title":"var sessionID: Self.SessionID","type":"property"}],"path":"\/documentation\/vapor\/sessionauthenticatable","title":"SessionAuthenticatable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionauthenticator\/user","title":"User","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionauthenticator\/authenticate(sessionid:for:)","title":"func authenticate(sessionID: Self.User.SessionID, for: Request) -> EventLoopFuture<Void>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionauthenticator\/respond(to:chainingto:)","title":"func respond(to: Request, chainingTo: Responder) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/sessionauthenticator\/middleware-implementations","title":"Middleware Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/sessionauthenticator","title":"SessionAuthenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/createsession(_:for:)-6uo59","title":"func createSession(SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/sessiondriver\/createsession(_:for:)","title":"func createSession(SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/deletesession(_:for:)-30joo","title":"func deleteSession(SessionID, for: Request) -> EventLoopFuture<Void>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/sessiondriver\/deletesession(_:for:)","title":"func deleteSession(SessionID, for: Request) -> EventLoopFuture<Void>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/readsession(_:for:)-7qfw3","title":"func readSession(SessionID, for: Request) -> EventLoopFuture<SessionData?>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/sessiondriver\/readsession(_:for:)","title":"func readSession(SessionID, for: Request) -> EventLoopFuture<SessionData?>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/asyncsessiondriver\/updatesession(_:to:for:)-2ptj0","title":"func updateSession(SessionID, to: SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"}],"title":"AsyncSessionDriver Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/sessiondriver\/updatesession(_:to:for:)","title":"func updateSession(SessionID, to: SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"}],"path":"\/documentation\/vapor\/sessiondriver","title":"SessionDriver","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/vapor\/storagekey\/value","title":"Value","type":"associatedtype"}],"path":"\/documentation\/vapor\/storagekey","title":"StorageKey","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlquerycontainer\/decode(_:)-80qd6","title":"func decode<C>(C.Type) throws -> C","type":"method"},{"path":"\/documentation\/vapor\/urlquerycontainer\/decode(_:)-8gmv9","title":"func decode<D>(D.Type) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/urlquerycontainer\/decode(_:using:)","title":"func decode<D>(D.Type, using: URLQueryDecoder) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/urlquerycontainer\/encode(_:)-2eimf","title":"func encode<C>(C) throws","type":"method"},{"path":"\/documentation\/vapor\/urlquerycontainer\/encode(_:)-8vvhb","title":"func encode<E>(E) throws","type":"method"},{"path":"\/documentation\/vapor\/urlquerycontainer\/encode(_:using:)","title":"func encode<E>(E, using: URLQueryEncoder) throws","type":"method"},{"path":"\/documentation\/vapor\/urlquerycontainer\/get(_:at:)-71pl0","title":"func get<D>(D.Type, at: CodingKeyRepresentable...) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/urlquerycontainer\/get(_:at:)-u5fu","title":"func get<D>(D.Type, at: [CodingKeyRepresentable]) throws -> D","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlquerycontainer\/subscript(_:)","title":"subscript<D>(CodingKeyRepresentable...) -> D?","type":"subscript"},{"path":"\/documentation\/vapor\/urlquerycontainer\/subscript(_:at:)-26w0c","title":"subscript<D>(D.Type, at _: [CodingKeyRepresentable]) -> D?","type":"subscript"},{"path":"\/documentation\/vapor\/urlquerycontainer\/subscript(_:at:)-7kfq4","title":"subscript<D>(D.Type, at _: CodingKeyRepresentable...) -> D?","type":"subscript"}],"path":"\/documentation\/vapor\/urlquerycontainer","title":"URLQueryContainer","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlquerydecoder\/decode(_:from:)","title":"func decode<D>(D.Type, from: URI) throws -> D","type":"method"}],"path":"\/documentation\/vapor\/urlquerydecoder","title":"URLQueryDecoder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlqueryencoder\/encode(_:to:)","title":"func encode<E>(E, to: inout URI) throws","type":"method"}],"path":"\/documentation\/vapor\/urlqueryencoder","title":"URLQueryEncoder","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatable\/validate(_:)-4mo9t","title":"static func validate(Decoder) throws","type":"method"},{"path":"\/documentation\/vapor\/validatable\/validate(_:)-582ha","title":"static func validate(Request) throws","type":"method"},{"path":"\/documentation\/vapor\/validatable\/validate(content:)","title":"static func validate(content: Request) throws","type":"method"},{"path":"\/documentation\/vapor\/validatable\/validate(json:)","title":"static func validate(json: String) throws","type":"method"},{"path":"\/documentation\/vapor\/validatable\/validate(query:)-1kut8","title":"static func validate(query: URI) throws","type":"method"},{"path":"\/documentation\/vapor\/validatable\/validate(query:)-3s1kw","title":"static func validate(query: Request) throws","type":"method"},{"path":"\/documentation\/vapor\/validatable\/validations()","title":"static func validations() -> Validations","type":"method"},{"path":"\/documentation\/vapor\/validatable\/validations(_:)","title":"static func validations(inout Validations)","type":"method"}],"path":"\/documentation\/vapor\/validatable","title":"Validatable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresult\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresult\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresult\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresult","title":"ValidatorResult","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/viewrenderer\/for(_:)","title":"func `for`(Request) -> ViewRenderer","type":"method"},{"path":"\/documentation\/vapor\/viewrenderer\/render(_:)-39f28","title":"func render(String) async throws -> View","type":"method"},{"path":"\/documentation\/vapor\/viewrenderer\/render(_:)-5fr6i","title":"func render(String) -> EventLoopFuture<View>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/vapor\/viewrenderer\/render(_:_:)-6io9g","title":"func render<E>(String, E) async throws -> View","type":"method"}],"title":"ViewRenderer Implementations","type":"groupMarker"}],"path":"\/documentation\/vapor\/viewrenderer\/render(_:_:)-434ox","title":"func render<E>(String, E) -> EventLoopFuture<View>","type":"method"}],"path":"\/documentation\/vapor\/viewrenderer","title":"ViewRenderer","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/init(_:headers:reason:identifier:suggestedfixes:file:function:line:column:range:stacktrace:)","title":"init(HTTPResponseStatus, headers: HTTPHeaders, reason: String?, identifier: String?, suggestedFixes: [String], file: String, function: String, line: UInt, column: UInt, range: Range<UInt>?, stackTrace: StackTrace?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/headers-2grol","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/abort\/identifier-9qiq5","title":"var identifier: String","type":"property"},{"path":"\/documentation\/vapor\/abort\/reason-5a5hp","title":"var reason: String","type":"property"},{"path":"\/documentation\/vapor\/abort\/source-2cddt","title":"var source: ErrorSource?","type":"property"},{"path":"\/documentation\/vapor\/abort\/stacktrace-4t4re","title":"var stackTrace: StackTrace?","type":"property"},{"path":"\/documentation\/vapor\/abort\/status","title":"var status: HTTPResponseStatus","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/redirect(to:type:)","title":"static func redirect(to: String, type: RedirectType) -> Abort","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/headers-8r95v","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/abort\/identifier-1rjym","title":"var identifier: String","type":"property"},{"path":"\/documentation\/vapor\/abort\/reason-47be9","title":"var reason: String","type":"property"}],"path":"\/documentation\/vapor\/abort\/aborterror-implementations","title":"AbortError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/vapor\/abort\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/abort\/documentationlinks","title":"var documentationLinks: [String]","type":"property"},{"path":"\/documentation\/vapor\/abort\/errordescription-3e9a0","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/abort\/failurereason-3tvl4","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/vapor\/abort\/fullidentifier","title":"var fullIdentifier: String","type":"property"},{"path":"\/documentation\/vapor\/abort\/githubissues","title":"var gitHubIssues: [String]","type":"property"},{"path":"\/documentation\/vapor\/abort\/helpanchor-2s326","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/vapor\/abort\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/vapor\/abort\/possiblecauses","title":"var possibleCauses: [String]","type":"property"},{"path":"\/documentation\/vapor\/abort\/recoverysuggestion-8rnsl","title":"var recoverySuggestion: String?","type":"property"},{"path":"\/documentation\/vapor\/abort\/source-3jnpi","title":"var source: ErrorSource?","type":"property"},{"path":"\/documentation\/vapor\/abort\/stackoverflowquestions","title":"var stackOverflowQuestions: [String]","type":"property"},{"path":"\/documentation\/vapor\/abort\/stacktrace-5qzq5","title":"var stackTrace: StackTrace?","type":"property"},{"path":"\/documentation\/vapor\/abort\/suggestedfixes","title":"var suggestedFixes: [String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/debuggablehelp(format:)","title":"func debuggableHelp(format: HelpFormat) -> String","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/readablename","title":"static var readableName: String","type":"property"},{"path":"\/documentation\/vapor\/abort\/typeidentifier","title":"static var typeIdentifier: String","type":"property"}],"path":"\/documentation\/vapor\/abort\/debuggableerror-implementations","title":"DebuggableError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/vapor\/abort\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/abort\/errordescription-5k94x","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/abort\/failurereason-8u488","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/vapor\/abort\/helpanchor-6pr5w","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/vapor\/abort\/recoverysuggestion-95iep","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/vapor\/abort\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/abort","title":"Abort","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/anyasyncresponse\/init(_:)","title":"init(AsyncResponseEncodable)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/anyasyncresponse\/encoderesponse(for:)","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/anyasyncresponse\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/anyasyncresponse\/asyncresponseencodable-implementations","title":"AsyncResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/anyasyncresponse","title":"AnyAsyncResponse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/anyresponse\/init(_:)","title":"init(ResponseEncodable)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/anyresponse\/encoderesponse(for:)","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/anyresponse\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/anyresponse\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/anyresponse","title":"AnyResponse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncbasicresponder\/init(closure:)","title":"init(closure: (Request) async throws -> Response)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncbasicresponder\/respond(to:)-3f7vf","title":"func respond(to: Request) async throws -> Response","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncbasicresponder\/respond(to:)-1thur","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/asyncbasicresponder\/asyncresponder-implementations","title":"AsyncResponder Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/asyncbasicresponder","title":"AsyncBasicResponder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/init(hasher:threadpool:eventloop:)","title":"init(hasher: PasswordHasher, threadPool: NIOThreadPool, eventLoop: EventLoop)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/hash(_:)-12ae3","title":"func hash(String) async throws -> String","type":"method"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/hash(_:)-8e4iq","title":"func hash<Password>(Password) async throws -> [UInt8]","type":"method"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/hash(_:)-9xv9l","title":"func hash(String) -> EventLoopFuture<String>","type":"method"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/hash(_:)-an0c","title":"func hash<Password>(Password) -> EventLoopFuture<[UInt8]>","type":"method"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/verify(_:created:)-2xbtm","title":"func verify(String, created: String) -> EventLoopFuture<Bool>","type":"method"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/verify(_:created:)-5wfna","title":"func verify<Password, Digest>(Password, created: Digest) async throws -> Bool","type":"method"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/verify(_:created:)-96zh0","title":"func verify<Password, Digest>(Password, created: Digest) -> EventLoopFuture<Bool>","type":"method"},{"path":"\/documentation\/vapor\/asyncpasswordhasher\/verify(_:created:)-9a53i","title":"func verify(String, created: String) async throws -> Bool","type":"method"}],"path":"\/documentation\/vapor\/asyncpasswordhasher","title":"AsyncPasswordHasher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/basicauthorization\/init(username:password:)","title":"init(username: String, password: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/basicauthorization\/password","title":"let password: String","type":"property"},{"path":"\/documentation\/vapor\/basicauthorization\/username","title":"let username: String","type":"property"}],"path":"\/documentation\/vapor\/basicauthorization","title":"BasicAuthorization","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/basicresponder\/init(closure:)","title":"init(closure: (Request) throws -> EventLoopFuture<Response>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/basicresponder\/respond(to:)","title":"func respond(to: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/basicresponder","title":"BasicResponder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bearerauthorization\/init(token:)","title":"init(token: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bearerauthorization\/token","title":"let token: String","type":"property"}],"path":"\/documentation\/vapor\/bearerauthorization","title":"BearerAuthorization","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bytecount\/init(value:)","title":"init(value: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bytecount\/value","title":"let value: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/bytecount\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/bytecount\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bytecount\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/bytecount\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bytecount\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/vapor\/bytecount\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bytecount\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/vapor\/bytecount\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/bytecount\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/bytecount\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/bytecount","title":"ByteCount","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientrequest\/init(method:url:headers:body:)","title":"init(method: HTTPMethod, url: URI, headers: HTTPHeaders, body: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientrequest\/body","title":"var body: ByteBuffer?","type":"property"},{"path":"\/documentation\/vapor\/clientrequest\/content","title":"var content: ContentContainer","type":"property"},{"path":"\/documentation\/vapor\/clientrequest\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/clientrequest\/method","title":"var method: HTTPMethod","type":"property"},{"path":"\/documentation\/vapor\/clientrequest\/query","title":"var query: URLQueryContainer","type":"property"},{"path":"\/documentation\/vapor\/clientrequest\/url","title":"var url: URI","type":"property"}],"path":"\/documentation\/vapor\/clientrequest","title":"ClientRequest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/init(status:headers:body:)","title":"init(status: HTTPStatus, headers: HTTPHeaders, body: ByteBuffer?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/body","title":"var body: ByteBuffer?","type":"property"},{"path":"\/documentation\/vapor\/clientresponse\/content","title":"var content: ContentContainer","type":"property"},{"path":"\/documentation\/vapor\/clientresponse\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/clientresponse\/status","title":"var status: HTTPStatus","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/encoderesponse(for:)-7qz32","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/clientresponse\/asyncresponseencodable-implementations","title":"AsyncResponseEncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/clientresponse\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/vapor\/clientresponse\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/vapor\/clientresponse\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/clientresponse\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/clientresponse\/encoderesponse(for:)-4sgpu","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"path":"\/documentation\/vapor\/clientresponse\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/clientresponse\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/clientresponse","title":"ClientResponse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentconfiguration\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentconfiguration\/requiredecoder(for:)","title":"func requireDecoder(for: HTTPMediaType) throws -> ContentDecoder","type":"method"},{"path":"\/documentation\/vapor\/contentconfiguration\/requireencoder(for:)","title":"func requireEncoder(for: HTTPMediaType) throws -> ContentEncoder","type":"method"},{"path":"\/documentation\/vapor\/contentconfiguration\/requireurldecoder()","title":"func requireURLDecoder() throws -> URLQueryDecoder","type":"method"},{"path":"\/documentation\/vapor\/contentconfiguration\/requireurlencoder()","title":"func requireURLEncoder() throws -> URLQueryEncoder","type":"method"},{"path":"\/documentation\/vapor\/contentconfiguration\/use(decoder:for:)","title":"func use(decoder: ContentDecoder, for: HTTPMediaType)","type":"method"},{"path":"\/documentation\/vapor\/contentconfiguration\/use(encoder:for:)","title":"func use(encoder: ContentEncoder, for: HTTPMediaType)","type":"method"},{"path":"\/documentation\/vapor\/contentconfiguration\/use(urldecoder:)","title":"func use(urlDecoder: URLQueryDecoder)","type":"method"},{"path":"\/documentation\/vapor\/contentconfiguration\/use(urlencoder:)","title":"func use(urlEncoder: URLQueryEncoder)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentconfiguration\/global","title":"static var global: ContentConfiguration","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/contentconfiguration\/default()","title":"static func `default`() -> ContentConfiguration","type":"method"}],"path":"\/documentation\/vapor\/contentconfiguration","title":"ContentConfiguration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/decoderunwrapper\/init(from:)","title":"init(from: Decoder)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/decoderunwrapper\/decoder","title":"let decoder: Decoder","type":"property"}],"path":"\/documentation\/vapor\/decoderunwrapper","title":"DecoderUnwrapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/directoryconfiguration\/init(workingdirectory:)","title":"init(workingDirectory: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/directoryconfiguration\/publicdirectory","title":"var publicDirectory: String","type":"property"},{"path":"\/documentation\/vapor\/directoryconfiguration\/resourcesdirectory","title":"var resourcesDirectory: String","type":"property"},{"path":"\/documentation\/vapor\/directoryconfiguration\/viewsdirectory","title":"var viewsDirectory: String","type":"property"},{"path":"\/documentation\/vapor\/directoryconfiguration\/workingdirectory","title":"var workingDirectory: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/directoryconfiguration\/detect()","title":"static func detect() -> DirectoryConfiguration","type":"method"}],"path":"\/documentation\/vapor\/directoryconfiguration","title":"DirectoryConfiguration","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/dotenvfile\/line\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/dotenvfile\/line\/key","title":"let key: String","type":"property"},{"path":"\/documentation\/vapor\/dotenvfile\/line\/value","title":"let value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/dotenvfile\/line\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/dotenvfile\/line\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/dotenvfile\/line","title":"DotEnvFile.Line","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/dotenvfile\/lines","title":"let lines: [DotEnvFile.Line]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/dotenvfile\/load(overwrite:)","title":"func load(overwrite: Bool)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/dotenvfile\/load(for:on:fileio:logger:)","title":"static func load(for: Environment, on: Application.EventLoopGroupProvider, fileio: NonBlockingFileIO, logger: Logger)","type":"method"},{"path":"\/documentation\/vapor\/dotenvfile\/load(for:on:logger:)","title":"static func load(for: Environment, on: Application.EventLoopGroupProvider, logger: Logger)","type":"method"},{"path":"\/documentation\/vapor\/dotenvfile\/load(path:fileio:on:overwrite:)","title":"static func load(path: String, fileio: NonBlockingFileIO, on: EventLoop, overwrite: Bool) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/vapor\/dotenvfile\/load(path:on:fileio:logger:)","title":"static func load(path: String, on: Application.EventLoopGroupProvider, fileio: NonBlockingFileIO, logger: Logger)","type":"method"},{"path":"\/documentation\/vapor\/dotenvfile\/load(path:on:logger:)","title":"static func load(path: String, on: Application.EventLoopGroupProvider, logger: Logger)","type":"method"},{"path":"\/documentation\/vapor\/dotenvfile\/read(path:fileio:on:)","title":"static func read(path: String, fileio: NonBlockingFileIO, on: EventLoop) -> EventLoopFuture<DotEnvFile>","type":"method"}],"path":"\/documentation\/vapor\/dotenvfile","title":"DotEnvFile","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/vapor\/environment\/process-swift.struct\/subscript(dynamicmember:)-5svk","title":"subscript<T>(dynamicMember _: String) -> T?","type":"subscript"},{"path":"\/documentation\/vapor\/environment\/process-swift.struct\/subscript(dynamicmember:)-6vkif","title":"subscript(dynamicMember _: String) -> String?","type":"subscript"}],"path":"\/documentation\/vapor\/environment\/process-swift.struct","title":"Environment.Process","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/environment\/==(_:_:)","title":"static func == (Environment, Environment) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/environment\/init(name:arguments:)","title":"init(name: String, arguments: [String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/environment\/arguments","title":"var arguments: [String]","type":"property"},{"path":"\/documentation\/vapor\/environment\/commandinput","title":"var commandInput: CommandInput","type":"property"},{"path":"\/documentation\/vapor\/environment\/isrelease","title":"var isRelease: Bool","type":"property"},{"path":"\/documentation\/vapor\/environment\/name","title":"let name: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/environment\/development","title":"static var development: Environment","type":"property"},{"path":"\/documentation\/vapor\/environment\/process-swift.type.property","title":"static var process: Environment.Process","type":"property"},{"path":"\/documentation\/vapor\/environment\/production","title":"static var production: Environment","type":"property"},{"path":"\/documentation\/vapor\/environment\/testing","title":"static var testing: Environment","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/environment\/custom(name:)","title":"static func custom(name: String) -> Environment","type":"method"},{"path":"\/documentation\/vapor\/environment\/detect(arguments:)","title":"static func detect(arguments: [String]) throws -> Environment","type":"method"},{"path":"\/documentation\/vapor\/environment\/detect(from:)","title":"static func detect(from: inout CommandInput) throws -> Environment","type":"method"},{"path":"\/documentation\/vapor\/environment\/get(_:)","title":"static func get(String) -> String?","type":"method"},{"path":"\/documentation\/vapor\/environment\/secret(key:fileio:on:)","title":"static func secret(key: String, fileIO: NonBlockingFileIO, on: EventLoop) -> EventLoopFuture<String?>","type":"method"},{"path":"\/documentation\/vapor\/environment\/secret(path:fileio:on:)","title":"static func secret(path: String, fileIO: NonBlockingFileIO, on: EventLoop) -> EventLoopFuture<String?>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/environment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/environment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/environment","title":"Environment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/errorsource\/init(file:function:line:column:range:)","title":"init(file: String, function: String, line: UInt, column: UInt, range: Range<UInt>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/errorsource\/column","title":"var column: UInt","type":"property"},{"path":"\/documentation\/vapor\/errorsource\/file","title":"var file: String","type":"property"},{"path":"\/documentation\/vapor\/errorsource\/function","title":"var function: String","type":"property"},{"path":"\/documentation\/vapor\/errorsource\/line","title":"var line: UInt","type":"property"},{"path":"\/documentation\/vapor\/errorsource\/range","title":"var range: Range<UInt>?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/errorsource\/capture(file:function:line:column:range:)","title":"static func capture(file: String, function: String, line: UInt, column: UInt, range: Range<UInt>?) -> ErrorSource","type":"method"}],"path":"\/documentation\/vapor\/errorsource","title":"ErrorSource","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/extend\/init()","title":"init()","type":"init"},{"path":"\/documentation\/vapor\/extend\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, Any)...)","type":"init"},{"path":"\/documentation\/vapor\/extend\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/extend\/storage","title":"var storage: [String : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/extend\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/vapor\/extend\/get(_:default:)-6f154","title":"func get<T>(AnyKeyPath, default: T) -> T","type":"method"},{"path":"\/documentation\/vapor\/extend\/get(_:default:)-7134n","title":"func get<T>(String, default: T) -> T","type":"method"},{"path":"\/documentation\/vapor\/extend\/set(_:to:)-3vesn","title":"func set<T>(String, to: T)","type":"method"},{"path":"\/documentation\/vapor\/extend\/set(_:to:)-5veie","title":"func set<T>(AnyKeyPath, to: T)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/vapor\/extend\/subscript(_:)","title":"subscript(String) -> Any?","type":"subscript"}],"path":"\/documentation\/vapor\/extend","title":"Extend","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/file\/init(data:filename:)-4sgpz","title":"init(data: ByteBuffer, filename: String)","type":"init"},{"path":"\/documentation\/vapor\/file\/init(data:filename:)-4vugh","title":"init(data: String, filename: String)","type":"init"},{"path":"\/documentation\/vapor\/file\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/file\/contenttype","title":"var contentType: HTTPMediaType?","type":"property"},{"path":"\/documentation\/vapor\/file\/data","title":"var data: ByteBuffer","type":"property"},{"path":"\/documentation\/vapor\/file\/extension","title":"var `extension`: String?","type":"property"},{"path":"\/documentation\/vapor\/file\/filename","title":"var filename: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/file\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/file\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/file\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/file\/init(multipart:)","title":"init?(multipart: MultipartPart)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/file\/multipart","title":"var multipart: MultipartPart?","type":"property"}],"path":"\/documentation\/vapor\/file\/multipartpartconvertible-implementations","title":"MultipartPartConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/file","title":"File","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/fileio\/collectfile(at:)-3fdrp","title":"func collectFile(at: String) -> EventLoopFuture<ByteBuffer>","type":"method"},{"path":"\/documentation\/vapor\/fileio\/collectfile(at:)-5i401","title":"func collectFile(at: String) async throws -> ByteBuffer","type":"method"},{"path":"\/documentation\/vapor\/fileio\/readfile(at:chunksize:onread:)","title":"func readFile(at: String, chunkSize: Int, onRead: (ByteBuffer) -> EventLoopFuture<Void>) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/vapor\/fileio\/streamfile(at:chunksize:mediatype:oncompleted:)","title":"func streamFile(at: String, chunkSize: Int, mediaType: HTTPMediaType?, onCompleted: (Result<Void, Error>) -> ()) -> Response","type":"method"},{"path":"\/documentation\/vapor\/fileio\/writefile(_:at:)-2eegp","title":"func writeFile(ByteBuffer, at: String) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/vapor\/fileio\/writefile(_:at:)-5fl4o","title":"func writeFile(ByteBuffer, at: String) async throws","type":"method"}],"path":"\/documentation\/vapor\/fileio","title":"FileIO","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/hotp\/init(key:digest:digits:)","title":"init(key: SymmetricKey, digest: OTPDigest, digits: OTPDigits)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/hotp\/generate(counter:)","title":"func generate(counter: UInt64) -> String","type":"method"},{"path":"\/documentation\/vapor\/hotp\/generate(counter:range:)","title":"func generate(counter: UInt64, range: Int) -> [String]","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/hotp\/generate(key:digest:digits:counter:)","title":"static func generate(key: SymmetricKey, digest: OTPDigest, digits: OTPDigits, counter: UInt64) -> String","type":"method"}],"path":"\/documentation\/vapor\/hotp","title":"HOTP","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/value\/init(string:expires:maxage:domain:path:issecure:ishttponly:samesite:)","title":"init(string: String, expires: Date?, maxAge: Int?, domain: String?, path: String?, isSecure: Bool, isHTTPOnly: Bool, sameSite: HTTPCookies.SameSitePolicy?)","type":"init"},{"path":"\/documentation\/vapor\/httpcookies\/value\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/value\/domain","title":"var domain: String?","type":"property"},{"path":"\/documentation\/vapor\/httpcookies\/value\/expires","title":"var expires: Date?","type":"property"},{"path":"\/documentation\/vapor\/httpcookies\/value\/ishttponly","title":"var isHTTPOnly: Bool","type":"property"},{"path":"\/documentation\/vapor\/httpcookies\/value\/issecure","title":"var isSecure: Bool","type":"property"},{"path":"\/documentation\/vapor\/httpcookies\/value\/maxage","title":"var maxAge: Int?","type":"property"},{"path":"\/documentation\/vapor\/httpcookies\/value\/path","title":"var path: String?","type":"property"},{"path":"\/documentation\/vapor\/httpcookies\/value\/samesite","title":"var sameSite: HTTPCookies.SameSitePolicy?","type":"property"},{"path":"\/documentation\/vapor\/httpcookies\/value\/string","title":"var string: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/value\/serialize(name:)","title":"func serialize(name: String) -> String","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/value\/expired","title":"static let expired: HTTPCookies.Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/value\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/httpcookies\/value\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/value\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/httpcookies\/value\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/httpcookies\/value","title":"HTTPCookies.Value","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/init()","title":"init()","type":"init"},{"path":"\/documentation\/vapor\/httpcookies\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, HTTPCookies.Value)...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/all","title":"var all: [String : HTTPCookies.Value]","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/subscript(_:)","title":"subscript(String) -> HTTPCookies.Value?","type":"subscript"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/lax","title":"case lax","type":"case"},{"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/none","title":"case none","type":"case"},{"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/strict","title":"case strict","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/httpcookies\/samesitepolicy","title":"HTTPCookies.SameSitePolicy","type":"enum"}],"path":"\/documentation\/vapor\/httpcookies","title":"HTTPCookies","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatype\/==(_:_:)","title":"static func == (HTTPMediaType, HTTPMediaType) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatype\/init(type:subtype:parameters:)","title":"init(type: String, subType: String, parameters: [String : String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatype\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/parameters","title":"var parameters: [String : String]","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/subtype","title":"var subType: String","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/type","title":"var type: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/vapor\/httpmediatype\/serialize()","title":"func serialize() -> String","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatype\/any","title":"static let any: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/audio","title":"static let audio: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/avi","title":"static let avi: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/binary","title":"static let binary: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/bzip2","title":"static let bzip2: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/css","title":"static let css: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/dtd","title":"static let dtd: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/formdata","title":"static let formData: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/gif","title":"static let gif: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/gzip","title":"static let gzip: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/html","title":"static let html: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/jpeg","title":"static let jpeg: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/json","title":"static let json: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/jsonapi","title":"static let jsonAPI: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/jsonsequence","title":"static let jsonSequence: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/midi","title":"static let midi: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/mp3","title":"static let mp3: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/mpeg","title":"static let mpeg: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/multipart","title":"static let multipart: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/ogg","title":"static let ogg: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/pdf","title":"static let pdf: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/plaintext","title":"static let plainText: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/png","title":"static let png: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/svg","title":"static let svg: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/tar","title":"static let tar: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/urlencodedform","title":"static let urlEncodedForm: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/wave","title":"static let wave: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/xml","title":"static let xml: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatype\/zip","title":"static let zip: HTTPMediaType","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatype\/fileextension(_:)","title":"static func fileExtension(String) -> HTTPMediaType?","type":"method"},{"path":"\/documentation\/vapor\/httpmediatype\/formdata(boundary:)","title":"static func formData(boundary: String) -> HTTPMediaType","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/httpmediatype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/httpmediatype","title":"HTTPMediaType","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpmediatypepreference\/mediatype","title":"var mediaType: HTTPMediaType","type":"property"},{"path":"\/documentation\/vapor\/httpmediatypepreference\/q","title":"var q: Double?","type":"property"}],"path":"\/documentation\/vapor\/httpmediatypepreference","title":"HTTPMediaTypePreference","type":"struct"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/memorysessions\/storage-swift.class\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/memorysessions\/storage-swift.class\/queue","title":"let queue: DispatchQueue","type":"property"},{"path":"\/documentation\/vapor\/memorysessions\/storage-swift.class\/sessions","title":"var sessions: [SessionID : SessionData]","type":"property"}],"path":"\/documentation\/vapor\/memorysessions\/storage-swift.class","title":"MemorySessions.Storage","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/memorysessions\/init(storage:)","title":"init(storage: MemorySessions.Storage)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/memorysessions\/storage-swift.property","title":"let storage: MemorySessions.Storage","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/memorysessions\/createsession(_:for:)","title":"func createSession(SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"},{"path":"\/documentation\/vapor\/memorysessions\/deletesession(_:for:)","title":"func deleteSession(SessionID, for: Request) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/vapor\/memorysessions\/readsession(_:for:)","title":"func readSession(SessionID, for: Request) -> EventLoopFuture<SessionData?>","type":"method"},{"path":"\/documentation\/vapor\/memorysessions\/updatesession(_:to:for:)","title":"func updateSession(SessionID, to: SessionData, for: Request) -> EventLoopFuture<SessionID>","type":"method"}],"path":"\/documentation\/vapor\/memorysessions","title":"MemorySessions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/middlewares\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/middlewares\/resolve()","title":"func resolve() -> [Middleware]","type":"method"},{"path":"\/documentation\/vapor\/middlewares\/use(_:at:)","title":"func use(Middleware, at: Middlewares.Position)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/middlewares\/position\/beginning","title":"case beginning","type":"case"},{"path":"\/documentation\/vapor\/middlewares\/position\/end","title":"case end","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/middlewares\/position\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/middlewares\/position\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/middlewares\/position","title":"Middlewares.Position","type":"enum"}],"path":"\/documentation\/vapor\/middlewares","title":"Middlewares","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextdecoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextdecoder\/decode(_:from:headers:)","title":"func decode<D>(D.Type, from: ByteBuffer, headers: HTTPHeaders) throws -> D","type":"method"}],"path":"\/documentation\/vapor\/plaintextdecoder","title":"PlaintextDecoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextencoder\/init(_:)","title":"init(HTTPMediaType)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextencoder\/encode(_:to:headers:)","title":"func encode<E>(E, to: inout ByteBuffer, headers: inout HTTPHeaders) throws","type":"method"}],"path":"\/documentation\/vapor\/plaintextencoder","title":"PlaintextEncoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextrenderer\/init(fileio:viewsdirectory:logger:eventloopgroup:)","title":"init(fileio: NonBlockingFileIO, viewsDirectory: String, logger: Logger, eventLoopGroup: EventLoopGroup)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextrenderer\/eventloopgroup","title":"let eventLoopGroup: EventLoopGroup","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextrenderer\/for(_:)","title":"func `for`(Request) -> ViewRenderer","type":"method"},{"path":"\/documentation\/vapor\/plaintextrenderer\/render(_:_:)-14ni7","title":"func render<E>(String, E) -> EventLoopFuture<View>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/plaintextrenderer\/render(_:)","title":"func render(String) -> EventLoopFuture<View>","type":"method"},{"path":"\/documentation\/vapor\/plaintextrenderer\/render(_:_:)-7rlot","title":"func render<E>(String, E) async throws -> View","type":"method"}],"path":"\/documentation\/vapor\/plaintextrenderer\/viewrenderer-implementations","title":"ViewRenderer Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/plaintextrenderer","title":"PlaintextRenderer","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessiondata\/==(_:_:)","title":"static func == (SessionData, SessionData) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessiondata\/init()","title":"init()","type":"init"},{"path":"\/documentation\/vapor\/sessiondata\/init(_:)","title":"init([String : String])","type":"init"},{"path":"\/documentation\/vapor\/sessiondata\/init(initialdata:)","title":"init(initialData: [String : String])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessiondata\/snapshot","title":"var snapshot: [String : String]","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessiondata\/subscript(_:)","title":"subscript(String) -> String?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessiondata\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/vapor\/sessiondata\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessiondata\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/vapor\/sessiondata\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessiondata\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, String)...)","type":"init"}],"path":"\/documentation\/vapor\/sessiondata\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/sessiondata","title":"SessionData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionid\/init(string:)","title":"init(string: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionid\/string","title":"let string: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionid\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/vapor\/sessionid\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionid\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/vapor\/sessionid\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/sessionid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/sessionid","title":"SessionID","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionsconfiguration\/init(cookiename:cookiefactory:)","title":"init(cookieName: String, cookieFactory: (SessionID) -> HTTPCookies.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionsconfiguration\/cookiefactory","title":"var cookieFactory: (SessionID) -> HTTPCookies.Value","type":"property"},{"path":"\/documentation\/vapor\/sessionsconfiguration\/cookiename","title":"var cookieName: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/sessionsconfiguration\/default()","title":"static func `default`() -> SessionsConfiguration","type":"method"}],"path":"\/documentation\/vapor\/sessionsconfiguration","title":"SessionsConfiguration","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/stacktrace\/frame\/file","title":"var file: String","type":"property"},{"path":"\/documentation\/vapor\/stacktrace\/frame\/function","title":"var function: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/stacktrace\/frame\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/stacktrace\/frame\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/stacktrace\/frame","title":"StackTrace.Frame","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/stacktrace\/frames","title":"var frames: [StackTrace.Frame]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/stacktrace\/description(max:)","title":"func description(max: Int) -> String","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/stacktrace\/iscaptureenabled","title":"static var isCaptureEnabled: Bool","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/stacktrace\/capture(skip:)","title":"static func capture(skip: Int) -> StackTrace?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/stacktrace\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/stacktrace\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/stacktrace","title":"StackTrace","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/storage\/init(logger:)","title":"init(logger: Logger)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/storage\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/vapor\/storage\/contains(_:)","title":"func contains<Key>(Key.Type) -> Bool","type":"method"},{"path":"\/documentation\/vapor\/storage\/get(_:)","title":"func get<Key>(Key.Type) -> Key.Value?","type":"method"},{"path":"\/documentation\/vapor\/storage\/set(_:to:onshutdown:)","title":"func set<Key>(Key.Type, to: Key.Value?, onShutdown: ((Key.Value) throws -> ())?)","type":"method"},{"path":"\/documentation\/vapor\/storage\/shutdown()","title":"func shutdown()","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/vapor\/storage\/subscript(_:)","title":"subscript<Key>(Key.Type) -> Key.Value?","type":"subscript"}],"path":"\/documentation\/vapor\/storage","title":"Storage","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/totp\/init(key:digest:digits:interval:)","title":"init(key: SymmetricKey, digest: OTPDigest, digits: OTPDigits, interval: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/totp\/generate(time:)","title":"func generate(time: Date) -> String","type":"method"},{"path":"\/documentation\/vapor\/totp\/generate(time:range:)","title":"func generate(time: Date, range: Int) -> [String]","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/totp\/generate(key:digest:digits:interval:time:)","title":"static func generate(key: SymmetricKey, digest: OTPDigest, digits: OTPDigits, interval: Int, time: Date) -> String","type":"method"}],"path":"\/documentation\/vapor\/totp","title":"TOTP","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/init(_:)","title":"init(String?)","type":"init"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/value","title":"let value: String?","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/http","title":"static let http: URI.Scheme","type":"property"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/httpunixdomainsocket","title":"static let httpUnixDomainSocket: URI.Scheme","type":"property"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/https","title":"static let https: URI.Scheme","type":"property"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/httpsunixdomainsocket","title":"static let httpsUnixDomainSocket: URI.Scheme","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/uri\/scheme-swift.struct\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/uri\/scheme-swift.struct","title":"URI.Scheme","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/init(scheme:host:port:path:query:fragment:)-2dh2f","title":"init(scheme: URI.Scheme, host: String?, port: Int?, path: String, query: String?, fragment: String?)","type":"init"},{"path":"\/documentation\/vapor\/uri\/init(scheme:host:port:path:query:fragment:)-8lcrr","title":"init(scheme: String?, host: String?, port: Int?, path: String, query: String?, fragment: String?)","type":"init"},{"path":"\/documentation\/vapor\/uri\/init(string:)","title":"init(string: String)","type":"init"},{"path":"\/documentation\/vapor\/uri\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/uri\/fragment","title":"var fragment: String?","type":"property"},{"path":"\/documentation\/vapor\/uri\/host","title":"var host: String?","type":"property"},{"path":"\/documentation\/vapor\/uri\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/vapor\/uri\/port","title":"var port: Int?","type":"property"},{"path":"\/documentation\/vapor\/uri\/query","title":"var query: String?","type":"property"},{"path":"\/documentation\/vapor\/uri\/scheme-swift.property","title":"var scheme: String?","type":"property"},{"path":"\/documentation\/vapor\/uri\/string","title":"var string: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/uri\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/vapor\/uri\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/uri\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/uri\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/uri","title":"URI","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/configuration\/init(boolflags:arrayseparators:datedecodingstrategy:)","title":"init(boolFlags: Bool, arraySeparators: [Character], dateDecodingStrategy: URLEncodedFormDecoder.Configuration.DateDecodingStrategy)","type":"init"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/configuration\/datedecodingstrategy\/custom(_:)","title":"case custom((Decoder) throws -> Date)","type":"case"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/configuration\/datedecodingstrategy\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/configuration\/datedecodingstrategy\/secondssince1970","title":"case secondsSince1970","type":"case"}],"path":"\/documentation\/vapor\/urlencodedformdecoder\/configuration\/datedecodingstrategy","title":"URLEncodedFormDecoder.Configuration.DateDecodingStrategy","type":"enum"}],"path":"\/documentation\/vapor\/urlencodedformdecoder\/configuration","title":"URLEncodedFormDecoder.Configuration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/init(configuration:)","title":"init(configuration: URLEncodedFormDecoder.Configuration)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/decode(_:from:)-7fve9","title":"func decode<D>(D.Type, from: URI) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/decode(_:from:)-9bvto","title":"func decode<D>(D.Type, from: String) throws -> D","type":"method"},{"path":"\/documentation\/vapor\/urlencodedformdecoder\/decode(_:from:headers:)","title":"func decode<D>(D.Type, from: ByteBuffer, headers: HTTPHeaders) throws -> D","type":"method"}],"path":"\/documentation\/vapor\/urlencodedformdecoder","title":"URLEncodedFormDecoder","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/init(arrayencoding:dateencodingstrategy:)","title":"init(arrayEncoding: URLEncodedFormEncoder.Configuration.ArrayEncoding, dateEncodingStrategy: URLEncodedFormEncoder.Configuration.DateEncodingStrategy)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/arrayencoding-swift.property","title":"var arrayEncoding: URLEncodedFormEncoder.Configuration.ArrayEncoding","type":"property"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/dateencodingstrategy-swift.property","title":"var dateEncodingStrategy: URLEncodedFormEncoder.Configuration.DateEncodingStrategy","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/arrayencoding-swift.enum\/bracket","title":"case bracket","type":"case"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/arrayencoding-swift.enum\/separator(_:)","title":"case separator(Character)","type":"case"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/arrayencoding-swift.enum\/values","title":"case values","type":"case"}],"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/arrayencoding-swift.enum","title":"URLEncodedFormEncoder.Configuration.ArrayEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/dateencodingstrategy-swift.enum\/custom(_:)","title":"case custom((Date, Encoder) throws -> Void)","type":"case"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/dateencodingstrategy-swift.enum\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/dateencodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"}],"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration\/dateencodingstrategy-swift.enum","title":"URLEncodedFormEncoder.Configuration.DateEncodingStrategy","type":"enum"}],"path":"\/documentation\/vapor\/urlencodedformencoder\/configuration","title":"URLEncodedFormEncoder.Configuration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/init(configuration:)","title":"init(configuration: URLEncodedFormEncoder.Configuration)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/encode(_:)","title":"func encode<E>(E) throws -> String","type":"method"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/encode(_:to:)","title":"func encode<E>(E, to: inout URI) throws","type":"method"},{"path":"\/documentation\/vapor\/urlencodedformencoder\/encode(_:to:headers:)","title":"func encode<E>(E, to: inout ByteBuffer, headers: inout HTTPHeaders) throws","type":"method"}],"path":"\/documentation\/vapor\/urlencodedformencoder","title":"URLEncodedFormEncoder","type":"struct"},{"path":"\/documentation\/vapor\/validation","title":"Validation","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationresult\/customfailuredescription","title":"let customFailureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validationresult\/key","title":"let key: ValidationKey","type":"property"},{"path":"\/documentation\/vapor\/validationresult\/result","title":"let result: ValidatorResult","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationresult\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validationresult\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validationresult\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validationresult\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validationresult","title":"ValidationResult","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/validations\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/validations\/add(_:as:is:required:customfailuredescription:)","title":"func add<T>(ValidationKey, as: T.Type, is: Validator<T>, required: Bool, customFailureDescription: String?)","type":"method"},{"path":"\/documentation\/vapor\/validations\/add(_:required:customfailuredescription:_:)","title":"func add(ValidationKey, required: Bool, customFailureDescription: String?, (inout Validations) -> ())","type":"method"},{"path":"\/documentation\/vapor\/validations\/add(_:result:customfailuredescription:)","title":"func add(ValidationKey, result: ValidatorResult, customFailureDescription: String?)","type":"method"},{"path":"\/documentation\/vapor\/validations\/add(each:required:customfailuredescription:_:)","title":"func add(each: ValidationKey, required: Bool, customFailureDescription: String?, (Int, inout Validations) -> ())","type":"method"},{"path":"\/documentation\/vapor\/validations\/validate(_:)","title":"func validate(Decoder) throws -> ValidationsResult","type":"method"},{"path":"\/documentation\/vapor\/validations\/validate(json:)","title":"func validate(json: String) throws -> ValidationsResult","type":"method"},{"path":"\/documentation\/vapor\/validations\/validate(query:)","title":"func validate(query: URI) throws -> ValidationsResult","type":"method"},{"path":"\/documentation\/vapor\/validations\/validate(request:)","title":"func validate(request: Request) throws -> ValidationsResult","type":"method"}],"path":"\/documentation\/vapor\/validations","title":"Validations","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationserror\/failures","title":"let failures: [ValidationResult]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationserror\/headers","title":"var headers: HTTPHeaders","type":"property"},{"path":"\/documentation\/vapor\/validationserror\/reason-14jsz","title":"var reason: String","type":"property"},{"path":"\/documentation\/vapor\/validationserror\/reason-udbs","title":"var reason: String","type":"property"},{"path":"\/documentation\/vapor\/validationserror\/status","title":"var status: HTTPResponseStatus","type":"property"}],"path":"\/documentation\/vapor\/validationserror\/aborterror-implementations","title":"AbortError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationserror\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/validationserror\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationserror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/vapor\/validationserror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validationserror","title":"ValidationsError","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationsresult\/error","title":"var error: ValidationsError?","type":"property"},{"path":"\/documentation\/vapor\/validationsresult\/results","title":"let results: [ValidationResult]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationsresult\/assert()","title":"func assert() throws","type":"method"}],"path":"\/documentation\/vapor\/validationsresult","title":"ValidationsResult","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/validator\/init(validate:)","title":"init(validate: (T) -> ValidatorResult)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validator\/validate","title":"let validate: (T) -> ValidatorResult","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validator\/alphanumeric-3dl3g","title":"static var alphanumeric: Validator<[String]>","type":"property"},{"path":"\/documentation\/vapor\/validator\/alphanumeric-wv2u","title":"static var alphanumeric: Validator<String>","type":"property"},{"path":"\/documentation\/vapor\/validator\/ascii-3tfvs","title":"static var ascii: Validator<[String]>","type":"property"},{"path":"\/documentation\/vapor\/validator\/ascii-6lrs5","title":"static var ascii: Validator<String>","type":"property"},{"path":"\/documentation\/vapor\/validator\/email","title":"static var email: Validator<String>","type":"property"},{"path":"\/documentation\/vapor\/validator\/empty","title":"static var empty: Validator<T>","type":"property"},{"path":"\/documentation\/vapor\/validator\/nil","title":"static var `nil`: Validator<T>","type":"property"},{"path":"\/documentation\/vapor\/validator\/url","title":"static var url: Validator<String>","type":"property"},{"path":"\/documentation\/vapor\/validator\/valid","title":"static var valid: Validator<T>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/validator\/case(of:)","title":"static func `case`<E>(of: E.Type) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/characterset(_:)-17q4c","title":"static func characterSet(CharacterSet) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/characterset(_:)-4psdp","title":"static func characterSet(CharacterSet) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/count(_:)-1ca0v","title":"static func count(PartialRangeFrom<Int>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/count(_:)-1jym","title":"static func count(PartialRangeUpTo<Int>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/count(_:)-3ybxt","title":"static func count(ClosedRange<Int>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/count(_:)-9l8ri","title":"static func count(PartialRangeThrough<Int>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/count(_:)-g2vr","title":"static func count(Range<Int>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/in(_:)-54xf","title":"static func `in`(T...) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/in(_:)-7kktb","title":"static func `in`<S>(S) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/range(_:)-48hpz","title":"static func range(Range<T>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/range(_:)-6jxns","title":"static func range(PartialRangeUpTo<T>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/range(_:)-8dln2","title":"static func range(PartialRangeFrom<T>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/range(_:)-9tucj","title":"static func range(PartialRangeThrough<T>) -> Validator<T>","type":"method"},{"path":"\/documentation\/vapor\/validator\/range(_:)-zvgv","title":"static func range(ClosedRange<T>) -> Validator<T>","type":"method"}],"path":"\/documentation\/vapor\/validator","title":"Validator","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/and\/left","title":"let left: ValidatorResult","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/and\/right","title":"let right: ValidatorResult","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/and\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/and\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/and\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/and\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/and","title":"ValidatorResults.And","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/case\/enumtype","title":"let enumType: E.Type","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/case\/rawvalue","title":"let rawValue: T","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/case\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/case\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/case\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/case\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/case","title":"ValidatorResults.Case","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/characterset\/characterset","title":"let characterSet: CharacterSet","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/characterset\/invalidslice","title":"var invalidSlice: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/characterset\/string","title":"let string: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/characterset\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/characterset\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/characterset\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/characterset\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/characterset","title":"ValidatorResults.CharacterSet","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/codable\/error","title":"let error: Error","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/codable\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/codable\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/codable\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/codable\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/codable","title":"ValidatorResults.Codable","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/collectioncharacterset\/characterset","title":"let characterSet: CharacterSet","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/collectioncharacterset\/strings","title":"let strings: [String]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/collectioncharacterset\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/collectioncharacterset\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/collectioncharacterset\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/collectioncharacterset\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/collectioncharacterset","title":"ValidatorResults.CollectionCharacterSet","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/email\/isvalidemail","title":"let isValidEmail: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/email\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/email\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/email\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/email\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/email","title":"ValidatorResults.Email","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/empty\/isempty","title":"let isEmpty: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/empty\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/empty\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/empty\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/empty\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/empty","title":"ValidatorResults.Empty","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/in\/item","title":"let item: T","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/in\/items","title":"let items: [T]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/in\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/in\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/in\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/in\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/in","title":"ValidatorResults.In","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/invalid\/reason","title":"let reason: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/invalid\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/invalid\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/invalid\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/invalid\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/invalid","title":"ValidatorResults.Invalid","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/missing\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/missing\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/missing\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/missing\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/missing","title":"ValidatorResults.Missing","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nested\/results","title":"let results: [ValidatorResult]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nested\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nested\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nested\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/nested\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/nested","title":"ValidatorResults.Nested","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nestedeach\/results","title":"let results: [[ValidatorResult]]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nestedeach\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nestedeach\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nestedeach\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/nestedeach\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/nestedeach","title":"ValidatorResults.NestedEach","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nil\/isnil","title":"let isNil: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nil\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nil\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nil\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/nil\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/nil","title":"ValidatorResults.Nil","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nilignoring\/result","title":"let result: ValidatorResult?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/nilignoring\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nilignoring\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/nilignoring\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/nilignoring\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/nilignoring","title":"ValidatorResults.NilIgnoring","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/not\/result","title":"let result: ValidatorResult","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/not\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/not\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/not\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/not\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/not","title":"ValidatorResults.Not","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/notfound\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/notfound\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/notfound\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/notfound\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/notfound","title":"ValidatorResults.NotFound","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/or\/left","title":"let left: ValidatorResult","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/or\/right","title":"let right: ValidatorResult","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/or\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/or\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/or\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/or\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/or","title":"ValidatorResults.Or","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/range\/result","title":"let result: RangeResult<T>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/range\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/range\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/range\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/range\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/range","title":"ValidatorResults.Range","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/skipped\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/skipped\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/skipped\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/skipped\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/skipped","title":"ValidatorResults.Skipped","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/typemismatch\/type","title":"let type: Any.Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/typemismatch\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/typemismatch\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/typemismatch\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/typemismatch\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/typemismatch","title":"ValidatorResults.TypeMismatch","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/url\/isvalidurl","title":"let isValidURL: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/url\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/url\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/url\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/url\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/url","title":"ValidatorResults.URL","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/valid\/isvalid","title":"let isValid: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validatorresults\/valid\/failuredescription","title":"var failureDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/valid\/isfailure","title":"var isFailure: Bool","type":"property"},{"path":"\/documentation\/vapor\/validatorresults\/valid\/successdescription","title":"var successDescription: String?","type":"property"}],"path":"\/documentation\/vapor\/validatorresults\/valid\/validatorresult-implementations","title":"ValidatorResult Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validatorresults\/valid","title":"ValidatorResults.Valid","type":"struct"}],"path":"\/documentation\/vapor\/validatorresults","title":"ValidatorResults","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/view\/init(data:)","title":"init(data: ByteBuffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/view\/data","title":"var data: ByteBuffer","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/view\/encoderesponse(for:)-isxh","title":"func encodeResponse(for: Request) -> EventLoopFuture<Response>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/view\/encoderesponse(for:)-61q7y","title":"func encodeResponse(for: Request) async throws -> Response","type":"method"}],"path":"\/documentation\/vapor\/view\/asyncresponseencodable-implementations","title":"AsyncResponseEncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/view\/encoderesponse(status:headers:for:)","title":"func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>","type":"method"}],"path":"\/documentation\/vapor\/view\/responseencodable-implementations","title":"ResponseEncodable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/view","title":"View","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/websocketmaxframesize\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/websocketmaxframesize\/default","title":"static var `default`: WebSocketMaxFrameSize","type":"property"}],"path":"\/documentation\/vapor\/websocketmaxframesize","title":"WebSocketMaxFrameSize","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcrypt","title":"var Bcrypt: BCryptDigest","type":"var"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/!(_:)","title":"func ! <T>(Validator<T>) -> Validator<T>","type":"op"},{"path":"\/documentation\/vapor\/&&(_:_:)-7d0wi","title":"func && <T>(Validator<T>, Validator<T?>) -> Validator<T?>","type":"op"},{"path":"\/documentation\/vapor\/&&(_:_:)-9d0ah","title":"func && <T>(Validator<T?>, Validator<T>) -> Validator<T?>","type":"op"},{"path":"\/documentation\/vapor\/&&(_:_:)-9klsz","title":"func && <T>(Validator<T>, Validator<T>) -> Validator<T>","type":"op"},{"path":"\/documentation\/vapor\/+(_:_:)","title":"func + (CharacterSet, CharacterSet) -> CharacterSet","type":"op"},{"path":"\/documentation\/vapor\/__(_:_:)-19cwe","title":"func || <T>(Validator<T?>, Validator<T>) -> Validator<T?>","type":"op"},{"path":"\/documentation\/vapor\/__(_:_:)-1lcz1","title":"func || <T>(Validator<T>, Validator<T?>) -> Validator<T?>","type":"op"},{"path":"\/documentation\/vapor\/__(_:_:)-2nh77","title":"func || <T>(Validator<T>, Validator<T>) -> Validator<T>","type":"op"},{"path":"\/documentation\/vapor\/__(_:_:)-3q2yj","title":"func ?? <T>(EventLoopFuture<T?>, T) -> EventLoopFuture<T>","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpstatus","title":"HTTPStatus","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/basiccodingkey\/index(_:)","title":"case index(Int)","type":"case"},{"path":"\/documentation\/vapor\/basiccodingkey\/key(_:)","title":"case key(String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/basiccodingkey\/init(_:)-2o2i7","title":"init(CodingKeyRepresentable)","type":"init"},{"path":"\/documentation\/vapor\/basiccodingkey\/init(_:)-7prq4","title":"init(CodingKey)","type":"init"},{"path":"\/documentation\/vapor\/basiccodingkey\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/vapor\/basiccodingkey\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/basiccodingkey\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/vapor\/basiccodingkey\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/basiccodingkey\/debugdescription-83x4o","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/vapor\/basiccodingkey\/description-1xkaz","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/basiccodingkey\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/basiccodingkey\/debugdescription-97xaz","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/vapor\/basiccodingkey\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/basiccodingkey\/description-ty86","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/basiccodingkey\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/basiccodingkey","title":"BasicCodingKey","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcrypterror\/hashfailure","title":"case hashFailure","type":"case"},{"path":"\/documentation\/vapor\/bcrypterror\/invalidcost","title":"case invalidCost","type":"case"},{"path":"\/documentation\/vapor\/bcrypterror\/invalidhash","title":"case invalidHash","type":"case"},{"path":"\/documentation\/vapor\/bcrypterror\/invalidsalt","title":"case invalidSalt","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcrypterror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/bcrypterror\/errordescription-6kkbb","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcrypterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/bcrypterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcrypterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/vapor\/bcrypterror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bcrypterror\/errordescription-8jmar","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/vapor\/bcrypterror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/vapor\/bcrypterror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/vapor\/bcrypterror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/vapor\/bcrypterror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/bcrypterror","title":"BcryptError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/bindaddress\/hostname(_:port:)","title":"case hostname(String?, port: Int?)","type":"case"},{"path":"\/documentation\/vapor\/bindaddress\/unixdomainsocket(path:)","title":"case unixDomainSocket(path: String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/bindaddress\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/bindaddress\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/bindaddress","title":"BindAddress","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/bodystreamresult\/buffer(_:)","title":"case buffer(ByteBuffer)","type":"case"},{"path":"\/documentation\/vapor\/bodystreamresult\/end","title":"case end","type":"case"},{"path":"\/documentation\/vapor\/bodystreamresult\/error(_:)","title":"case error(Error)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bodystreamresult\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/vapor\/bodystreamresult\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/bodystreamresult\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/bodystreamresult\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/bodystreamresult","title":"BodyStreamResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/cacheexpirationtime\/days(_:)","title":"case days(Int)","type":"case"},{"path":"\/documentation\/vapor\/cacheexpirationtime\/hours(_:)","title":"case hours(Int)","type":"case"},{"path":"\/documentation\/vapor\/cacheexpirationtime\/minutes(_:)","title":"case minutes(Int)","type":"case"},{"path":"\/documentation\/vapor\/cacheexpirationtime\/seconds(_:)","title":"case seconds(Int)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/cacheexpirationtime\/seconds","title":"var seconds: Int","type":"property"}],"path":"\/documentation\/vapor\/cacheexpirationtime","title":"CacheExpirationTime","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/endpointcacheerror\/contentdecodefailure(_:)","title":"case contentDecodeFailure(Error)","type":"case"},{"path":"\/documentation\/vapor\/endpointcacheerror\/unexpctedresponsestatus(_:uri:)","title":"case unexpctedResponseStatus(HTTPStatus, uri: URI)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/endpointcacheerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/vapor\/endpointcacheerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/endpointcacheerror","title":"EndpointCacheError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpbodystreamstrategy\/collect(maxsize:)","title":"case collect(maxSize: ByteCount?)","type":"case"},{"path":"\/documentation\/vapor\/httpbodystreamstrategy\/stream","title":"case stream","type":"case"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpbodystreamstrategy\/collect","title":"static var collect: HTTPBodyStreamStrategy","type":"property"}],"path":"\/documentation\/vapor\/httpbodystreamstrategy","title":"HTTPBodyStreamStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpversionmajor\/one","title":"case one","type":"case"},{"path":"\/documentation\/vapor\/httpversionmajor\/two","title":"case two","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/httpversionmajor\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/httpversionmajor\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/httpversionmajor","title":"HTTPVersionMajor","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/helpformat\/long","title":"case long","type":"case"},{"path":"\/documentation\/vapor\/helpformat\/short","title":"case short","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/helpformat\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/helpformat\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/helpformat","title":"HelpFormat","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/otpdigest\/sha1","title":"case sha1","type":"case"},{"path":"\/documentation\/vapor\/otpdigest\/sha256","title":"case sha256","type":"case"},{"path":"\/documentation\/vapor\/otpdigest\/sha512","title":"case sha512","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/otpdigest\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/otpdigest\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/otpdigest","title":"OTPDigest","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/otpdigits\/eight","title":"case eight","type":"case"},{"path":"\/documentation\/vapor\/otpdigits\/seven","title":"case seven","type":"case"},{"path":"\/documentation\/vapor\/otpdigits\/six","title":"case six","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/otpdigits\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/otpdigits\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/otpdigits\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/vapor\/otpdigits\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/vapor\/otpdigits\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/otpdigits","title":"OTPDigits","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/rangeresult\/between(min:max:)","title":"case between(min: T, max: T)","type":"case"},{"path":"\/documentation\/vapor\/rangeresult\/greaterthanmax(_:)","title":"case greaterThanMax(T)","type":"case"},{"path":"\/documentation\/vapor\/rangeresult\/greaterthanorequaltomin(_:)","title":"case greaterThanOrEqualToMin(T)","type":"case"},{"path":"\/documentation\/vapor\/rangeresult\/lessthanmin(_:)","title":"case lessThanMin(T)","type":"case"},{"path":"\/documentation\/vapor\/rangeresult\/lessthanorequaltomax(_:)","title":"case lessThanOrEqualToMax(T)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/rangeresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/rangeresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/rangeresult","title":"RangeResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/redirecttype\/normal","title":"case normal","type":"case"},{"path":"\/documentation\/vapor\/redirecttype\/permanent","title":"case permanent","type":"case"},{"path":"\/documentation\/vapor\/redirecttype\/temporary","title":"case temporary","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/redirecttype\/status","title":"var status: HTTPStatus","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/vapor\/redirecttype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/vapor\/redirecttype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/redirecttype","title":"RedirectType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/integer(_:)","title":"case integer(Int)","type":"case"},{"path":"\/documentation\/vapor\/validationkey\/string(_:)","title":"case string(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/vapor\/validationkey\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/vapor\/validationkey\/description-6jn8j","title":"var description: String","type":"property"},{"path":"\/documentation\/vapor\/validationkey\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/vapor\/validationkey\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/vapor\/validationkey\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/description-lq3u","title":"var description: String","type":"property"}],"path":"\/documentation\/vapor\/validationkey\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/validationkey\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/vapor\/validationkey\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/vapor\/validationkey\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/vapor\/validationkey\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/vapor\/validationkey\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/vapor\/validationkey","title":"ValidationKey","type":"enum"}],"path":"\/documentation\/vapor","title":"Vapor","type":"module"},{"path":"\/documentation\/vaporrouting","title":"VaporRouting","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocket\/closecode","title":"var closeCode: WebSocketErrorCode?","type":"property"},{"path":"\/documentation\/websocketkit\/websocket\/eventloop","title":"var eventLoop: EventLoop","type":"property"},{"path":"\/documentation\/websocketkit\/websocket\/isclosed","title":"var isClosed: Bool","type":"property"},{"path":"\/documentation\/websocketkit\/websocket\/onclose","title":"var onClose: EventLoopFuture<Void>","type":"property"},{"path":"\/documentation\/websocketkit\/websocket\/pinginterval","title":"var pingInterval: TimeAmount?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocket\/close(code:)-1eayq","title":"func close(code: WebSocketErrorCode) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/close(code:)-55sf6","title":"func close(code: WebSocketErrorCode) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/close(code:promise:)","title":"func close(code: WebSocketErrorCode, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/onbinary(_:)-4fwe","title":"func onBinary((WebSocket, ByteBuffer) -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/onbinary(_:)-9ad7o","title":"func onBinary((WebSocket, ByteBuffer) async -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/onping(_:)-4uhez","title":"func onPing((WebSocket) async -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/onping(_:)-754ek","title":"func onPing((WebSocket) -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/onpong(_:)-1fyc3","title":"func onPong((WebSocket) async -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/onpong(_:)-2c5ha","title":"func onPong((WebSocket) -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/ontext(_:)-2sgdl","title":"func onText((WebSocket, String) -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/ontext(_:)-7hqw8","title":"func onText((WebSocket, String) async -> ())","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/send(_:)-456g0","title":"func send([UInt8]) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/send(_:)-7lx98","title":"func send<S>(S) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/send(_:promise:)-7xfjt","title":"func send<S>(S, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/send(_:promise:)-sa8j","title":"func send([UInt8], promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/send(raw:opcode:fin:)","title":"func send<Data>(raw: Data, opcode: WebSocketOpcode, fin: Bool) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/send(raw:opcode:fin:promise:)","title":"func send<Data>(raw: Data, opcode: WebSocketOpcode, fin: Bool, promise: EventLoopPromise<Void>?)","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/sendping()","title":"func sendPing() async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/sendping(promise:)","title":"func sendPing(promise: EventLoopPromise<Void>?)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocket\/client(on:onupgrade:)","title":"static func client(on: Channel, onUpgrade: (WebSocket) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(scheme:host:port:path:headers:configuration:on:onupgrade:)","title":"static func connect(scheme: String, host: String, port: Int, path: String, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) -> ()) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(scheme:host:port:path:query:headers:configuration:on:onupgrade:)-2vob7","title":"static func connect(scheme: String, host: String, port: Int, path: String, query: String?, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) async -> ()) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(scheme:host:port:path:query:headers:configuration:on:onupgrade:)-wrer","title":"static func connect(scheme: String, host: String, port: Int, path: String, query: String?, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(to:headers:configuration:on:onupgrade:)-392c","title":"static func connect(to: String, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(to:headers:configuration:on:onupgrade:)-5cpsb","title":"static func connect(to: URL, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) -> ()) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(to:headers:configuration:on:onupgrade:)-6chid","title":"static func connect(to: URL, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) async -> ()) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(to:headers:configuration:on:onupgrade:)-6zo6m","title":"static func connect(to: URL, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(to:headers:configuration:on:onupgrade:)-9wk0s","title":"static func connect(to: String, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) async -> ()) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/connect(to:headers:configuration:on:onupgrade:)-dwcw","title":"static func connect(to: String, headers: HTTPHeaders, configuration: WebSocketClient.Configuration, on: EventLoopGroup, onUpgrade: (WebSocket) -> ()) async throws","type":"method"},{"path":"\/documentation\/websocketkit\/websocket\/server(on:onupgrade:)","title":"static func server(on: Channel, onUpgrade: (WebSocket) -> ()) -> EventLoopFuture<Void>","type":"method"}],"path":"\/documentation\/websocketkit\/websocket","title":"WebSocket","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/configuration\/init(tlsconfiguration:maxframesize:)","title":"init(tlsConfiguration: TLSConfiguration?, maxFrameSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/configuration\/maxframesize","title":"var maxFrameSize: Int","type":"property"},{"path":"\/documentation\/websocketkit\/websocketclient\/configuration\/tlsconfiguration","title":"var tlsConfiguration: TLSConfiguration?","type":"property"}],"path":"\/documentation\/websocketkit\/websocketclient\/configuration","title":"WebSocketClient.Configuration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/init(eventloopgroupprovider:configuration:)","title":"init(eventLoopGroupProvider: WebSocketClient.EventLoopGroupProvider, configuration: WebSocketClient.Configuration)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/connect(scheme:host:port:path:query:headers:onupgrade:)","title":"func connect(scheme: String, host: String, port: Int, path: String, query: String?, headers: HTTPHeaders, onUpgrade: (WebSocket) -> ()) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/websocketkit\/websocketclient\/syncshutdown()","title":"func syncShutdown() throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/alreadyshutdown","title":"case alreadyShutdown","type":"case"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/invalidresponsestatus(_:)","title":"case invalidResponseStatus(HTTPResponseHead)","type":"case"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/invalidurl","title":"case invalidURL","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/errordescription-73gu0","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/websocketkit\/websocketclient\/error\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/errordescription-fubt","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/websocketkit\/websocketclient\/error\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/websocketkit\/websocketclient\/error\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/websocketkit\/websocketclient\/error","title":"WebSocketClient.Error","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/websocketkit\/websocketclient\/eventloopgroupprovider\/createnew","title":"case createNew","type":"case"},{"path":"\/documentation\/websocketkit\/websocketclient\/eventloopgroupprovider\/shared(_:)","title":"case shared(EventLoopGroup)","type":"case"}],"path":"\/documentation\/websocketkit\/websocketclient\/eventloopgroupprovider","title":"WebSocketClient.EventLoopGroupProvider","type":"enum"}],"path":"\/documentation\/websocketkit\/websocketclient","title":"WebSocketClient","type":"class"}],"path":"\/documentation\/websocketkit","title":"WebSocketKit","type":"module"},{"path":"\/documentation\/xctestdynamicoverlay","title":"XCTestDynamicOverlay","type":"module"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/peek()","title":"func peek() -> Element?","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/pop()","title":"func pop() -> Element?","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/push(_:)","title":"func push(Element)","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/remove(_:)","title":"func remove(Element)","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/removefirst(where:)","title":"func removeFirst(where: (Element) throws -> Bool) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/_niodatastructures\/priorityqueue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/==(_:_:)","title":"static func == (PriorityQueue<Element>, PriorityQueue<Element>) -> Bool","type":"op"}],"path":"\/documentation\/_niodatastructures\/priorityqueue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/iterator\/init(queue:)","title":"init(queue: PriorityQueue<Element>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/iterator\/next()","title":"func next() -> Element?","type":"method"}],"path":"\/documentation\/_niodatastructures\/priorityqueue\/iterator","title":"PriorityQueue.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/flatmap(_:)-1zatq","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/flatmap(_:)-jpaz","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/joined(separator:)-3cjzz","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/joined(separator:)-4ifdp","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/makeiterator()","title":"func makeIterator() -> PriorityQueue<Element>.Iterator","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/_niodatastructures\/priorityqueue\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/_niodatastructures\/priorityqueue\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/_niodatastructures\/priorityqueue","title":"PriorityQueue","type":"struct"}],"path":"\/documentation\/_niodatastructures","title":"_NIODataStructures","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}