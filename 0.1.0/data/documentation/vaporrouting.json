{"hierarchy":{"paths":[[]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Additional Resources","level":2,"type":"heading","anchor":"Additional-Resources"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/vapor-routing"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/vapor-routing\/discussions","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"http:\/\/pointfree.co\/episodes\/ep188-tour-of-parser-printers-vapor-routing","isActive":true}],"type":"paragraph"}]}]},{"text":"Motivation","level":2,"type":"heading","anchor":"Motivation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Routing in "},{"isActive":true,"type":"reference","identifier":"http:\/\/vapor.codes"},{"type":"text","text":" has a simple API that is similar to popular web frameworks in other languages, such as Ruby’s "},{"isActive":true,"type":"reference","identifier":"http:\/\/sinatrarb.com"},{"type":"text","text":" or Node’s "},{"isActive":true,"type":"reference","identifier":"http:\/\/expressjs.com"},{"type":"text","text":". It works well for simple routes, but complexity grows over time due to lack of type safety and inability to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generate"}]},{"type":"text","text":" correct URLs to pages on your site."}]},{"type":"paragraph","inlineContent":[{"text":"To see this, consider an endpoint to fetch a book that is associated with a particular user:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ GET \/users\/:userId\/books\/:bookId","app.get(\"users\", \":userId\", \"books\", \":bookId\") { req -> Response in","  guard","    let userId = req.parameters.get(\"userId\", Int.self),","    let bookId = req.parameters.get(\"bookId\", Int.self)","  else {","    struct BadRequest: Error {}","    throw BadRequest()","  }","","  \/\/ Logic for fetching user and book and constructing response...","  let user = try await database.fetchUser(user.id)","  let book = try await database.fetchBook(book.id)","  return BookResponse(...)","}"]},{"type":"paragraph","inlineContent":[{"text":"When a URL request is made to the server whose method and path matches the above pattern, the closure will be executed for handling that endpoint’s logic.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that we must sprinkle in validation code and error handling into the endpoint’s logic in order to coerce the stringy parameter types into first class data types. This obscures the real logic of the endpoint, and any changes to the route’s pattern must be kept in sync with the validation logic, such as if we wanted to rename “users” to “user” and “books” to “book”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to these drawbacks, we often need to be able to generate a valid URL to the user’s book page by specifying a user and book id. For example, suppose we wanted to generate an HTML page with a list of all the books for a user, including a link to each book. We have no choice but to manually interpolate a string to form the URL:"}]},{"syntax":"swift","type":"codeListing","code":["Node.ul(","  user.books.map { book in","    .li(","      .a(.href(\"\/users\/\\(user.id)\/book\/\\(book.id)\"), book.title)","    )","  }",")"]},{"syntax":"html","type":"codeListing","code":["<ul>","  <li><a href=\"\/users\/42\/book\/321\">Blob autobiography<\/a><\/li>","  <li><a href=\"\/users\/42\/book\/123\">Life of Blob<\/a><\/li>","  <li><a href=\"\/users\/42\/book\/456\">Blobbed around the world<\/a><\/li>","<\/ul>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is our responsibility to make sure that this interpolated string matches exactly what was specified in the Vapor route. This can be tedious and error prone."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In fact, there is a typo in the above code. The URL constructed goes to “\/book\/:bookId”, but really it should be “\/book"},{"type":"emphasis","inlineContent":[{"text":"s","type":"text"}]},{"type":"text","text":"\/:bookId”:"}]},{"syntax":"diff","type":"codeListing","code":["- .a(.href(\"\/users\/\\(user.id)\/book\/\\(book.id)\"), book.title)","+ .a(.href(\"\/users\/\\(user.id)\/books\/\\(book.id)\"), book.title)"]},{"type":"paragraph","inlineContent":[{"text":"This library aims to solve these problems, and more, when dealing with routing in a Vapor application.","type":"text"}]},{"text":"Adding Parsing as a dependency","level":2,"type":"heading","anchor":"Adding-Parsing-as-a-dependency"},{"type":"paragraph","inlineContent":[{"text":"To use the VaporRouting library in a SwiftPM project, add it to the dependencies of your Package.swift","type":"text"},{"text":" ","type":"text"},{"text":"and specify the ","type":"text"},{"type":"codeVoice","code":"VaporRouting"},{"text":" product in any targets that need access to the library:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let package = Package(","  dependencies: [","    .package(url: \"https:\/\/github.com\/pointfreeco\/vapor-routing\", from: \"0.1.0\"),","  ],","  targets: [","    .target(","      name: \"<target-name>\",","      dependencies: [.product(name: \"VaporRouting\", package: \"vapor-routing\")]","    )","  ]",")"]},{"text":"Getting started","level":2,"type":"heading","anchor":"Getting-started"},{"type":"paragraph","inlineContent":[{"text":"To use this libary, one starts by constructing an enum that describes all the routes your website supports. For example, the book endpoint described above can be represented as:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum SiteRoute {","  case userBook(userId: Int, bookId: Int)","  \/\/ more cases for each route","}"]},{"type":"paragraph","inlineContent":[{"text":"Then you construct a router as a parser-printer from our ","type":"text"},{"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing"},{"text":", which is an object that is capable of parsing URL requests in ","type":"text"},{"type":"codeVoice","code":"SiteRoute"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"printing","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"codeVoice","code":"SiteRoute"},{"text":" values back into URL requests. Such routers can be constructed with various parser-printers the library vends, such as ","type":"text"},{"type":"codeVoice","code":"Path"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Query"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Body"},{"text":" and more:","type":"text"}]},{"syntax":"swift","code":["import VaporRouting","","let siteRouter = OneOf {","  \/\/ Maps the URL \"\/users\/:userId\/books\/:bookId\" to the","  \/\/ SiteRouter.userBook enum case.","  Route(.case(SiteRouter.userBook)) {","    Path { \"users\"; Digits(); \"books\"; Digits() }","  }","","  \/\/ More uses of Route for each case in SiteRoute","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Once that little bit of upfront work is done, using the router doesn’t look too dissimilar from using Vapor’s native routing tools. First you mount the router to the application to take care of all routing responsibilities, and you do so by providing a closure that transforms ","type":"text"},{"code":"SiteRoute","type":"codeVoice"},{"text":" to a response:","type":"text"}]},{"syntax":"swift","code":["\/\/ configure.swift","public func configure(_ app: Application) throws {","  ...","","  app.mount(siteRouter, use: siteHandler)","}","","func siteHandler(","  request: Request,","  route: SiteRoute",") async throws -> AsyncResponseEncodable {","  switch route {","  case .userBook(userId: userId, bookId: bookId):","    let user = try await database.fetchUser(user.id)","    let book = try await database.fetchBook(book.id)","    return BookResponse(...)","","  \/\/ more cases...","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Notice that handling the ","type":"text"},{"code":".userBook","type":"codeVoice"},{"text":" case is entirely focused on just the logic for the endpoint, not parsing and validating the parameters in the URL.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"With that done you can now easily generate URLs to any part of your website usinge a type safe, concise API. For example, generating the list of book links now looks like this:","type":"text"}]},{"syntax":"swift","code":["Node.ul(","  user.books.map { book in","    .li(","      .a(","        .href(siteRouter.path(for: .userBook(userId: user.id, bookId: book.id)),","        book.title","      )","    )","  }",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note there is no string interpolation or guessing what shape the path should be in. All of that is handled by the router. We only have to provide the data for the user and book ids, and the router takes care of the rest. If we make a change to the ","type":"text"},{"type":"codeVoice","code":"siteRouter"},{"text":", such as recognizer the singular form “\/user\/:userId\/book\/:bookId”, then all paths will automatically be updated. We will not need to search the code base to replace “users” with “user” and “books” with “book”.","type":"text"}]},{"level":2,"text":"Global router","anchor":"Global-router","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"It is best practice to put a router in your global application context rather than reach","type":"text"},{"text":" ","type":"text"},{"text":"out to a globally defined router. To do this you can define a ","type":"text"},{"code":"StorageKey","type":"codeVoice"},{"text":" conformance","type":"text"},{"text":" ","type":"text"},{"text":"to represent the router’s type and add a computed property on Vapor’s ","type":"text"},{"code":"Application","type":"codeVoice"},{"text":" type:","type":"text"}]},{"syntax":"swift","code":["enum SiteRouterKey: StorageKey {","  typealias Value = AnyParserPrinter<URLRequestData, SiteRoute>","}","","extension Application {","  var router: SiteRouterKey.Value {","    get {","      self.storage[SiteRouterKey.self]!","    }","    set {","      self.storage[SiteRouterKey.self] = newValue","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can set the router on the application instance handed to your "},{"type":"codeVoice","code":"configure"},{"type":"text","text":" function:"}]},{"syntax":"swift","code":["\/\/ configure.swift","public func configure(_ app: Application) throws {","  ...","","  app.router = router","    .eraseToAnyParserPrinter()","  app.mount(app.router, use: siteHandler)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is also an appropriate place to configure the base URL of the router so that when you"},{"type":"text","text":" "},{"type":"text","text":"need to generate absolute URLs (e.g. for emails) you can do so correctly:"}]},{"syntax":"swift","code":["\/\/ configure.swift","public func configure(_ app: Application) throws {","  ...","","  app.router = router","    .baseUrl(","      app.environment == .production ? \"http:\/\/www.mysite.com\"","      : app.environment == .staging ? \"http:\/\/staging.mysite.com\"","      : \"http:\/\/localhost:8080\"","    )","    .eraseToAnyParserPrinter()","","  app.mount(app.router, use: siteHandler)","}"],"type":"codeListing"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"A bidirectional Vapor router with more type safety and less fuss."}],"variants":[{"paths":["\/documentation\/vaporrouting"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/VaporRouting"},"metadata":{"modules":[{"name":"VaporRouting"}],"externalID":"VaporRouting","role":"collection","roleHeading":"Framework","symbolKind":"module","title":"VaporRouting"},"kind":"symbol","seeAlsoSections":[{"identifiers":["http:\/\/pointfree.co\/episodes\/ep188-tour-of-parser-printers-vapor-routing"],"abstract":[{"type":"text","text":"A free video from "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.pointfree.co"},{"type":"text","text":" demonstrating how to use the vapor-routing library:"}],"title":"Related Documentation"}],"references":{"https://github.com/pointfreeco/vapor-routing/discussions":{"titleInlineContent":[{"text":"Discussions","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/vapor-routing\/discussions","title":"Discussions","url":"https:\/\/github.com\/pointfreeco\/vapor-routing\/discussions"},"http://pointfree.co/episodes/ep188-tour-of-parser-printers-vapor-routing":{"titleInlineContent":[{"type":"text","text":"Point-Free Video"}],"type":"link","identifier":"http:\/\/pointfree.co\/episodes\/ep188-tour-of-parser-printers-vapor-routing","title":"Point-Free Video","url":"http:\/\/pointfree.co\/episodes\/ep188-tour-of-parser-printers-vapor-routing"},"https://github.com/pointfreeco/vapor-routing":{"titleInlineContent":[{"text":"GitHub Repo","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/vapor-routing","title":"GitHub Repo","url":"https:\/\/github.com\/pointfreeco\/vapor-routing"},"http://expressjs.com":{"titleInlineContent":[{"type":"text","text":"Express"}],"type":"link","identifier":"http:\/\/expressjs.com","title":"Express","url":"http:\/\/expressjs.com"},"http://vapor.codes":{"titleInlineContent":[{"text":"Vapor","type":"text"}],"type":"link","identifier":"http:\/\/vapor.codes","title":"Vapor","url":"http:\/\/vapor.codes"},"http://sinatrarb.com":{"titleInlineContent":[{"type":"text","text":"Sinatra"}],"type":"link","identifier":"http:\/\/sinatrarb.com","title":"Sinatra","url":"http:\/\/sinatrarb.com"},"http://github.com/pointfreeco/swift-parsing":{"titleInlineContent":[{"text":"parsing library","type":"text"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing","title":"parsing library","url":"http:\/\/github.com\/pointfreeco\/swift-parsing"},"doc://co.pointfree.VaporRouting/documentation/VaporRouting":{"kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A bidirectional Vapor router with more type safety and less fuss."}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/VaporRouting","title":"VaporRouting","url":"\/documentation\/vaporrouting"}}}